<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnet on Massimiliano's Tech Chronicles</title><link>https://ilmax.github.io/tags/dotnet/</link><description>Recent content in dotnet on Massimiliano's Tech Chronicles</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 17 Nov 2022 13:09:55 +0000</lastBuildDate><atom:link href="https://ilmax.github.io/tags/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>EF Core 7 is here - Welcome typed entity id üçæ</title><link>https://ilmax.github.io/posts/efcore-7-typed-ids/</link><pubDate>Thu, 17 Nov 2022 13:09:55 +0000</pubDate><guid>https://ilmax.github.io/posts/efcore-7-typed-ids/</guid><description>Source code
EF 7 has been released at dotnetconf and it brings a heap of new and exciting features. To read about all the new goodnes in this release you can go through the What&amp;rsquo;s new in EF Core 7 docs page.
One of the feature I&amp;rsquo;m more excited about that hasn&amp;rsquo;t been properly advertised (hence this post), in my opinion, is support for what they call Value generation for DDD guarded types.</description></item><item><title>Azure WebJobs, Service Bus and Managed Identity: Lesson learned</title><link>https://ilmax.github.io/posts/servicebus-manageed-identity-rbac/</link><pubDate>Tue, 09 Aug 2022 13:07:51 +0000</pubDate><guid>https://ilmax.github.io/posts/servicebus-manageed-identity-rbac/</guid><description>Today I was converting some Azure webjobs to connect to Azure Service Bus using managed service identity (MSI).
The application is a simple C# Azure WebJob built using the Azure WebJob SDK that subscribe to a topic and process incoming message writing to a database.
These are the nuget packages used:
Microsoft.Azure.WebJobs v 3.0.33 Microsoft.Azure.WebJobs.Extensions.ServiceBus v 5.6.0 Please note that since Azure Functions are built on top of the WebJobs SDK, you may encounter the same issue there, I haven&amp;rsquo;t verified though.</description></item><item><title>Integration testing with EF Core, part 1</title><link>https://ilmax.github.io/posts/ef-integration-test-1/</link><pubDate>Tue, 06 Apr 2021 16:25:33 +0000</pubDate><guid>https://ilmax.github.io/posts/ef-integration-test-1/</guid><description>In this mini series I will go through some challenges and the solutions I applied in implementing integration testing with EF Core and SQL Server running on Docker.
EF Core has been out for a while now (according to Wikipedia it&amp;rsquo;s been released on 27/6/2016) and since day one it had support for an in memory database provider. The aim of the in memory database provider is to simplify testing and if you compare what it takes now to write test against an Entity Framework Core DbContext compared to the old Entity Framework one you can see how much easier it&amp;rsquo;s now compared to the experience we had back then.</description></item><item><title>Integration testing with EF Core, part 2</title><link>https://ilmax.github.io/posts/ef-integration-test-2/</link><pubDate>Tue, 06 Apr 2021 16:25:33 +0000</pubDate><guid>https://ilmax.github.io/posts/ef-integration-test-2/</guid><description>In the first part of this mini series, I described how I implemented integration tests with EF core and SQL Server running on top of a Docker container. The approach explained in the first blog post works but it has one very big downside, the ability to debug integration tests.
In order to be able to do so, we need to replace Docker compose with a code based solution and, depending on your testing framework of choice, pick the appropriate hook to start the SQL Server container.</description></item></channel></rss>