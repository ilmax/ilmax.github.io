<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>efcore on Massimiliano's Tech Chronicles</title><link>https://maxdon.tech/tags/efcore/</link><description>Recent content in efcore on Massimiliano's Tech Chronicles</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Apr 2021 16:25:33 +0000</lastBuildDate><atom:link href="https://maxdon.tech/tags/efcore/index.xml" rel="self" type="application/rss+xml"/><item><title>Integration testing with EF Core, part 1</title><link>https://maxdon.tech/posts/ef-integration-test-1/</link><pubDate>Tue, 06 Apr 2021 16:25:33 +0000</pubDate><guid>https://maxdon.tech/posts/ef-integration-test-1/</guid><description>In this mini series I will go through some challenges and the solutions I applied in implementing integration testing with EF Core and SQL Server running on Docker.
EF Core has been out for a while now (according to Wikipedia it&amp;rsquo;s been released on 27/6/2016) and since day one it had support for an in memory database provider. The aim of the in memory database provider is to simplify testing and if you compare what it takes now to write test against an Entity Framework Core DbContext compared to the old Entity Framework one you can see how much easier it&amp;rsquo;s now compared to the experience we had back then.</description></item><item><title>Integration testing with EF Core, part 2</title><link>https://maxdon.tech/posts/ef-integration-test-2/</link><pubDate>Tue, 06 Apr 2021 16:25:33 +0000</pubDate><guid>https://maxdon.tech/posts/ef-integration-test-2/</guid><description>In the first part of this mini series, I described how I implemented integration tests with EF core and SQL Server running on top of a Docker container. The approach explained in the first blog post works but it has one very big downside, the ability to debug integration tests.
In order to be able to do so, we need to replace Docker compose with a code based solution and, depending on your testing framework of choice, pick the appropriate hook to start the SQL Server container.</description></item></channel></rss>