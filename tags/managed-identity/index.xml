<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>managed-identity on Massimiliano's Tech Chronicles</title><link>https://ilmax.github.io/site/tags/managed-identity/</link><description>Recent content in managed-identity on Massimiliano's Tech Chronicles</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 09 Aug 2022 13:07:51 +0000</lastBuildDate><atom:link href="https://ilmax.github.io/site/tags/managed-identity/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure WebJobs, Service Bus and Managed Identity: Lesson learned</title><link>https://ilmax.github.io/site/posts/servicebus-manageed-identity-rbac/</link><pubDate>Tue, 09 Aug 2022 13:07:51 +0000</pubDate><guid>https://ilmax.github.io/site/posts/servicebus-manageed-identity-rbac/</guid><description>Today I was converting some Azure webjobs to connect to Azure Service Bus using managed service identity (MSI).
The application is a simple C# Azure WebJob built using the Azure WebJob SDK that subscribe to a topic and process incoming message writing to a database.
These are the nuget packages used:
Microsoft.Azure.WebJobs v 3.0.33 Microsoft.Azure.WebJobs.Extensions.ServiceBus v 5.6.0 Please note that since Azure Functions are built on top of the WebJobs SDK, you may encounter the same issue there, I haven&amp;rsquo;t verified though.</description></item><item><title>Using Managed Identity with Azure WebJobs and Service Bus</title><link>https://ilmax.github.io/site/posts/servicebus-managed-identity/</link><pubDate>Tue, 24 May 2022 10:01:30 +0000</pubDate><guid>https://ilmax.github.io/site/posts/servicebus-managed-identity/</guid><description>Managed Service Identity (or MSI for short) allows Azure resources to connect to Azure services that supports AD authentication (see the full list here) without using secrets. This is extremely useful because handling secrets the proper way it&amp;rsquo;s far from easy.
How MSI works is beyond the scope of the article and you can find more information here, but in a nutshell:
You create a service principal object and an application in Azure AD to represents your service (this is done automatically when turning on managed identity) You grant some permissions to access the downstream service it needs to communicate to You configure the authentication to the downstream service to be done via MSI In my case, I have a WebJob that processes messages via a ServiceBus queue, so I granted the service principal a permission to read from the queue using the built in Azure Service Bus Data Receiver role.</description></item><item><title>Configure secret-less connection from App Services to Azure Sql via terraform</title><link>https://ilmax.github.io/site/posts/azure-sql-secret-less-conn/</link><pubDate>Wed, 16 Feb 2022 18:17:46 +0000</pubDate><guid>https://ilmax.github.io/site/posts/azure-sql-secret-less-conn/</guid><description>It&amp;rsquo;s been a while since we can connect App services to Azure Sql in a secret-less fashion, using managed service identity (MSI for brevity from now onwards).
The configuration is a bit more complicated than connecting to other Azure services e.g. Azure Storage Account because it involves running some queries on the Azure Sql database in order to create the user and grant them the required privileges, for more info see the tutorial here.</description></item></channel></rss>