<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Massimiliano's Tech Chronicles</title><link>https://maxdon.tech/posts/</link><description>Recent content in Posts on Massimiliano's Tech Chronicles</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 19 Jan 2023 16:39:35 +0100</lastBuildDate><atom:link href="https://maxdon.tech/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Goodbye secrets üëã, Hello token exchange: Connect Your GitHub Actions to Azure securely</title><link>https://maxdon.tech/posts/github-azure-oidc/</link><pubDate>Thu, 19 Jan 2023 16:39:35 +0100</pubDate><guid>https://maxdon.tech/posts/github-azure-oidc/</guid><description>OpenID Connect (OIDC) integration between Azure Active Directory and GitHub allows your GitHub Actions workflows to securely access resources in Azure, without needing to store the Azure credentials in the GitHub action secrets.
This functionality has been available for quite a while, it was first announced on October 2021 and up until now, it has been on my &amp;ldquo;things to look into&amp;rdquo; list.
Recently I&amp;rsquo;ve been working on a project to migrate Azure DevOps to GitHub so I decided that time has come to look into this functionality.</description></item><item><title>Terraform Tips &amp; Tricks: Managing Large-Scale Azure Resource Imports</title><link>https://maxdon.tech/posts/import-many-terraform/</link><pubDate>Sun, 08 Jan 2023 14:44:21 +0000</pubDate><guid>https://maxdon.tech/posts/import-many-terraform/</guid><description>This post describes my journey to import several hundred Azure resources in Terraform. Before digging into the what and the how let me give you a brief description of our environment&amp;rsquo;s infrastructure.
In my current company, we manage many Azure resources for each environment and we have a few of them (DEV, TEST, etc.). Every environment looks pretty much the same and it mostly differs by product SKUs, database sizes, etc.</description></item><item><title>EF Core 7 is here - Welcome typed entity id üçæ</title><link>https://maxdon.tech/posts/efcore-7-typed-ids/</link><pubDate>Thu, 17 Nov 2022 13:09:55 +0000</pubDate><guid>https://maxdon.tech/posts/efcore-7-typed-ids/</guid><description>Source code
EF 7 has been released at dotnetconf and it brings a heap of new and exciting features. To read about all the new goodnes in this release you can go through the What&amp;rsquo;s new in EF Core 7 docs page.
One of the feature I&amp;rsquo;m more excited about that hasn&amp;rsquo;t been properly advertised (hence this post), in my opinion, is support for what they call Value generation for DDD guarded types.</description></item><item><title>Azure WebJobs, Service Bus and Managed Identity: Lesson learned</title><link>https://maxdon.tech/posts/servicebus-manageed-identity-rbac/</link><pubDate>Tue, 09 Aug 2022 13:07:51 +0000</pubDate><guid>https://maxdon.tech/posts/servicebus-manageed-identity-rbac/</guid><description>Today I was converting some Azure webjobs to connect to Azure Service Bus using managed service identity (MSI).
The application is a simple C# Azure WebJob built using the Azure WebJob SDK that subscribe to a topic and process incoming message writing to a database.
These are the nuget packages used:
Microsoft.Azure.WebJobs v 3.0.33 Microsoft.Azure.WebJobs.Extensions.ServiceBus v 5.6.0 Please note that since Azure Functions are built on top of the WebJobs SDK, you may encounter the same issue there, I haven&amp;rsquo;t verified though.</description></item><item><title>Dynamically scale down AppService outside business hours to save üí∞üí∞</title><link>https://maxdon.tech/posts/dynamically-scale-app-service-plans/</link><pubDate>Mon, 25 Jul 2022 12:59:43 +0000</pubDate><guid>https://maxdon.tech/posts/dynamically-scale-app-service-plans/</guid><description>The other day I was on a quest to lower a bit our Azure spending.
Im my current company we have several environment that we use for different purposes, Development, Test, Acceptance and so on.
All these environments have slightly different tiers for various services and I was wondering how to lower App Service Plan tier outside business hours.
App Services have some built-in, albeit limited, capabilities to scale but this only involves scaling out.</description></item><item><title>Zero downtime deployment with Azure Container Apps and Github Actions - Part 1</title><link>https://maxdon.tech/posts/aca-zero-downtime-1/</link><pubDate>Fri, 24 Jun 2022 10:12:18 +0000</pubDate><guid>https://maxdon.tech/posts/aca-zero-downtime-1/</guid><description>Introduction As you may know, Azure Container Apps went out of preview during Microsoft Build in late May this year. Azure Container Apps is a very interesting service that runs on top of Kubernetes adding some additional powerful capabilities in a simple and covinient way. Some of these capabilities are:
Built in support for Keda autoscalers Built in support for Dapr components Ability to scale to zero There&amp;rsquo;s a lot more to it, you can dig deeper on the official Microsoft documentation here</description></item><item><title>Create Azure Container Apps with terraform</title><link>https://maxdon.tech/posts/aca-terraform/</link><pubDate>Thu, 26 May 2022 10:04:06 +0000</pubDate><guid>https://maxdon.tech/posts/aca-terraform/</guid><description>Microsoft announced at Microsoft Build that Azure Container Apps are now generally available (GA).
If you&amp;rsquo;re not familiar with Azure Container Apps (ACA) I suggest you to go and check out the documentation here.
Fully managed serverless container service for building and deploying modern apps at scale
This is how Microsoft itself markets the product.
I think it&amp;rsquo;s a very interesting platform and it offers some of the benefits of Kubernetes, abstracting a lot of concepts and complexity.</description></item><item><title>Using Managed Identity with Azure WebJobs and Service Bus</title><link>https://maxdon.tech/posts/servicebus-managed-identity/</link><pubDate>Tue, 24 May 2022 10:01:30 +0000</pubDate><guid>https://maxdon.tech/posts/servicebus-managed-identity/</guid><description>Managed Service Identity (or MSI for short) allows Azure resources to connect to Azure services that supports AD authentication (see the full list here) without using secrets. This is extremely useful because handling secrets the proper way it&amp;rsquo;s far from easy.
How MSI works is beyond the scope of the article and you can find more information here, but in a nutshell:
You create a service principal object and an application in Azure AD to represents your service (this is done automatically when turning on managed identity) You grant some permissions to access the downstream service it needs to communicate to You configure the authentication to the downstream service to be done via MSI In my case, I have a WebJob that processes messages via a ServiceBus queue, so I granted the service principal a permission to read from the queue using the built in Azure Service Bus Data Receiver role.</description></item><item><title>Implement Azure AD Workload Identity on AKS with terraform</title><link>https://maxdon.tech/posts/azwi-k8s/</link><pubDate>Thu, 24 Feb 2022 09:55:39 +0000</pubDate><guid>https://maxdon.tech/posts/azwi-k8s/</guid><description>Azure makes it very easy to create managed identities for a variety of services (e.g. Azure Functions, App Services, Logic Apps&amp;hellip;), but when we want to implement it for Azure Kubernetes Service, things gets just a bit more complicated.
First of all we have few options to choose from:
AAD Pod Identity (deprecated) Azure AD Workload Identity What we discuss in this post, azwi for brevity. Both solutions aims to associate a pod with an identity in Azure Active Directory so we can grant this identity permissions to access another resource (i.</description></item><item><title>Configure secret-less connection from App Services to Azure Sql via terraform</title><link>https://maxdon.tech/posts/azure-sql-secret-less-conn/</link><pubDate>Wed, 16 Feb 2022 18:17:46 +0000</pubDate><guid>https://maxdon.tech/posts/azure-sql-secret-less-conn/</guid><description>It&amp;rsquo;s been a while since we can connect App services to Azure Sql in a secret-less fashion, using managed service identity (MSI for brevity from now onwards).
The configuration is a bit more complicated than connecting to other Azure services e.g. Azure Storage Account because it involves running some queries on the Azure Sql database in order to create the user and grant them the required privileges, for more info see the tutorial here.</description></item><item><title>Poor mans App services deployment slot auto-swap for Linux with GitHub Actions</title><link>https://maxdon.tech/posts/poor-man-linux-swap/</link><pubDate>Wed, 08 Dec 2021 18:14:44 +0000</pubDate><guid>https://maxdon.tech/posts/poor-man-linux-swap/</guid><description>Nowadays App Service deployment has became quite straight forward. Since support for running Docker containers was added to the platform, this has become my preferred way of deploying and running code in production.
One way to deploy a Docker container to an App Service is taking advantage of an Azure Container Registry (henceforth referred to as ACR), the process looks like this:
Ahead of time:
Configure the App Service to pull the image from your ACR During continuous delivery build:</description></item><item><title>Integration testing with EF Core, part 1</title><link>https://maxdon.tech/posts/ef-integration-test-1/</link><pubDate>Tue, 06 Apr 2021 16:25:33 +0000</pubDate><guid>https://maxdon.tech/posts/ef-integration-test-1/</guid><description>In this mini series I will go through some challenges and the solutions I applied in implementing integration testing with EF Core and SQL Server running on Docker.
EF Core has been out for a while now (according to Wikipedia it&amp;rsquo;s been released on 27/6/2016) and since day one it had support for an in memory database provider. The aim of the in memory database provider is to simplify testing and if you compare what it takes now to write test against an Entity Framework Core DbContext compared to the old Entity Framework one you can see how much easier it&amp;rsquo;s now compared to the experience we had back then.</description></item><item><title>Integration testing with EF Core, part 2</title><link>https://maxdon.tech/posts/ef-integration-test-2/</link><pubDate>Tue, 06 Apr 2021 16:25:33 +0000</pubDate><guid>https://maxdon.tech/posts/ef-integration-test-2/</guid><description>In the first part of this mini series, I described how I implemented integration tests with EF core and SQL Server running on top of a Docker container. The approach explained in the first blog post works but it has one very big downside, the ability to debug integration tests.
In order to be able to do so, we need to replace Docker compose with a code based solution and, depending on your testing framework of choice, pick the appropriate hook to start the SQL Server container.</description></item></channel></rss>