[{"content":"","date":"24 July 2024","externalUrl":null,"permalink":"/tags/azure/","section":"Tags","summary":"","title":"Azure","type":"tags"},{"content":"","date":"24 July 2024","externalUrl":null,"permalink":"/tags/devops/","section":"Tags","summary":"","title":"Devops","type":"tags"},{"content":"","date":"24 July 2024","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"Github","type":"tags"},{"content":"In today\u0026rsquo;s post, we will look at an interesting challenge, having GitHub actions interact with Azure PaaS services for which we have disabled public access.\nProblem Statement # If you are working on improving your cloud security posture on Azure, one of the first things that you should look into when deploying PaaS services (like for example Azure Storage, Azure Cosmos DB or Azure SQL Server) is to disable the public access.\nMost PaaS services nowadays allow you to disable public access, meaning that you can\u0026rsquo;t connect to those services over the Internet anymore. For the applications deployed in Azure, you can take advantage of Virtual Networks, Private Endpoints and Private DNS Zones to enable private connectivity without changing any single line of code.\nThis is all well and good, but what about those services that aren\u0026rsquo;t deployed in Azure, like for example the CI/CD runners?\nChances are that you interact with your infrastructure in CI/CD pipelines (like for example running terraform apply) and, as soon as you close the firewall, some operations will start to fail due to connectivity problems.\nAt this point, we have several ways of fixing the issue, here\u0026rsquo;s a quick non-exhaustive list off the top of my head:\nOpen and close the PaaS Service public access when the pipeline starts and revert the operation at the end Allow access to the PaaS Services from within your office network and self-host your runners within your office network Self-host your runners in Azure Virtual Machines with network connectivity to those services All the options in the above list will fix the issue but they all have some disadvantages, so can we do better? Not long ago, we got a new and better alternative which is to take advantage of GitHub private networking for hosted runners.\nGitHub private networking inner workings, image courtesy of https://docs.github.com/en/organizations/managing-organization-settings/about-azure-private-networking-for-github-hosted-runners-in-your-organization GitHub private networking # This relatively new feature (Public beta started in November 2023 and went GA in April 2024), allows GitHub-hosted runners to use a network interface card (NIC) created in a subnet under your control. This way we don\u0026rsquo;t have to manage our own hosted runners, GitHub will keep managing the runners for us, while we will still be able to connect to PaaS service using private connectivity.\nTo set this up we need to configure a few things:\nGet your GitHub the Enterprise ID or Organization ID (more on this below) Create the Azure VNET that will host the NICs used by the GitHub runners Create a GitHub network configuration in Azure Create a Hosted Computed Network configuration in GitHub Create Runner Group(s) and Runner(s) on GitHub Change your GitHub action runs-on to reference the runner WARN: This functionality is only supported by GitHub Enterprise and GitHub Team plans Azure private connectivity # Let\u0026rsquo;s now take a look into a few concepts that are necessary for understanding how this can be configured.\nAzure Private Link overview, image courtesy of https://azure.microsoft.com/en-us/products/private-link/ Private Endpoints # Private Endpoints can be thought of as read-only Network Interface Cards (NICs) for your PaaS services. Those NICs are created in the subnet you specify and are assigned a private IP from the VNET address space. The connection between the private endpoint and the PaaS service uses a secure private link.\nWhen using Private Endpoints, the traffic never leaves the Microsoft backbone network as opposed to going through the public internet, making it not only more secure but also a faster way to access your PaaS services.\nPrivate DNS Zones # When a PaaS service enables the Private Endpoints, at the DNS level the service FQDN turns into a CNAME to the private link zone for the related service. Let\u0026rsquo;s see the changes in resolving an Azure Storage Account hostname with the dig command (available in Linux and MacOS, when using Windows you can use dig on WSL or nslookup on cmd/PowerShell)\nNo Private Endpoints\ndig example.blob.core.windows.net ;; ANSWER SECTION: example.blob.core.windows.net. 60 IN CNAME blob.ams08prdstr13c.store.core.windows.net. blob.ams08prdstr13c.store.core.windows.net. 86400 IN A 1.2.3.4 With Private Endpoints\ndig examplepe.blob.core.windows.net ;; ANSWER SECTION: examplepe.blob.core.windows.net. 60 IN CNAME examplepe.privatelink.blob.core.windows.net. examplepe.privatelink.blob.core.windows.net. 60 IN CNAME blob.am5prdstr12a.store.core.windows.net. blob.am5prdstr12a.store.core.windows.net. 60 IN A 1.2.3.5 As you can see above, after we turn on Private Endpoints for a particular service, we get another DNS indirection. This zone coincides with the name of the Private DNS Zone in which we have to create our records to enable private connectivity.\nTIP: You can read more about how this works in the Microsoft documentation.\nDifferent services have different DNS Zones and those are mentioned in the documentation here.\nAn A record is then created in the respective Private DNS Zone that resolves to the IP of the NIC that represents your PaaS service.\nPrivate Endpoint can be linked to one or more Private DNS Zones to make sure that whenever the IP of the NIC connected to the Private Endpoint changes, the DNS record(s) are automatically updated by the platform for us.\nVNET Peering # If you need to connect to PaaS services via Private Endpoint from a different VNET than the one whenre the Private Endpoint NICs lives, you can take advantage of network peering and you should be able to communicate without any problems. VNET Peering is very flexible and can peer networks that are in the same regions as well as different region, subscription or even tenant.\nTo be able to resolve the hostname to the private IP of the NIC created by the Private Endpoints, we need to make sure that the private DNS Zone is linked to all the VNETs that have to connect to the PaaS service.\nBear in mind that network peering is not transitive, so if you need to traverse several networks, you need to configure an network virtual appliance (NVA) that knows how to route traffic All three components briefly described above are used to configure private access to PaaS services and GitHub-hosted runners can take advantage of this infrastructure. Let\u0026rsquo;s see how below.\nConfiguration # To get this working we need to configure the networking in Azure, create the hosted network configuration in GitHub, create runner groups and runners in GitHub and, as the last step, we can change the workflow\u0026rsquo;s runs-on to specify the new runner name, let see how to do this in detail.\nAzure configuration # In Azure, you have to decide in which VNET the GitHub-hosted runner NICs will be created. You can use the same network where the private endpoint for your PaaS services lives or create another VNET to keep things separate, this decision is up to you and depends on your networking configuration/requirements. What\u0026rsquo;s worth noting is that just a subset of Azure regions are supported, so you may be forced to create a VNET in a region different from the VNET that contains your Private Endpoints.\nAs of today (July 2024) the only supported regions are:\nEastUs EastUs2 WestUs2 WestUs3 CentralUs NorthCentralUs SouthCentralUs AustraliaEast JapanEast FranceCentral GermanyWestCentral NorthEurope NorwayEast SwedenCentral SwitzerlandNorth UkSouth SoutheastAsia If the VNET that contains the Private Endpoints is not in any of those regions, you have to create a new VNET and use Regional VNET Peerings or create another set of Private Endpoints in the designed VNET. If you use a HUB/Spoke network topology, you may want to create a dedicated spoke that will host the GitHub NICs.\nWhen you have multiple spokes that need to communicate, you can either peer them together, configure traffic routing through an NVA or connect them through a VPN gateway. Please refer to the documentation on how to achieve that.\nIn my case, I went with the easy option to use network peering between the two spoke VNETs.\nAfter the networking part has been taken care of, we need to:\nRegister a new resource provider Create a new resource of type GitHub.Network/networkSettings Copy the tag.GithubId output Register the resource provider can be done in several ways, via Terraform (see below) or via az cli running the following command:\naz provider register --namespace GitHub.Network In GitHub, depending on whether you have an Enterprise Cloud or Team Plan, you can configure the Hosted Compute Networking on the Enterprise level or at the organization level. If you have GitHub Enterprise Cloud, you can still select whether to configure it at the Enterprise or Organization level.\nThe GitHub network settings need to know about your Enterprise/Organization so, before creating the network settings resource in Azure, we need to get a hold of the Enterprise ID/Organization ID from GitHub. As far as I know, this is not displayed anywhere in the UI so we need to execute a GraphQL API call as shown below:\nGitHub Enterprise ID # We get the organization ID via the following GraphQL call, before the call we also need to generate a personal access token with the required grants.\ncurl -H \u0026#34;Authorization: Bearer BEARER_TOKEN\u0026#34; -X POST \\ -d \u0026#39;{ \u0026#34;query\u0026#34;: \u0026#34;query($slug: String!) { enterprise (slug: $slug) { slug databaseId } }\u0026#34; , \u0026#34;variables\u0026#34;: { \u0026#34;slug\u0026#34;: \u0026#34;ENTERPRISE_SLUG\u0026#34; } }\u0026#39; \\ https://api.github.com/graphql TIP: The documentation for configuring the private networking for GitHub-hosted runners in your Enterprise can be found here GitHub Organization ID # curl -H \u0026#34;Authorization: Bearer BEARER_TOKEN\u0026#34; -X POST \\ -d \u0026#39;{ \u0026#34;query\u0026#34;: \u0026#34;query($login: String!) { organization (login: $login) { login databaseId } }\u0026#34; , \u0026#34;variables\u0026#34;: { \u0026#34;login\u0026#34;: \u0026#34;ORGANIZATION_LOGIN\u0026#34; } }\u0026#39; \\ https://api.github.com/graphql TIP: The documentation for configuring private networking for GitHub-hosted runners in your Organization can be found here Create the GitHub network setting # Here\u0026rsquo;s the Terraform code to create the GitHub network settings resource in Azure:\nterraform { required_providers { azurerm = { source = \u0026#34;hashicorp/azurerm\u0026#34; version = \u0026#34;\u0026gt;3.0.0\u0026#34; } azapi = { source = \u0026#34;Azure/azapi\u0026#34; version = \u0026#34;~\u0026gt; 1.14.0\u0026#34; } } } # Register the GitHub.Network resource provider resource \u0026#34;azurerm_resource_provider_registration\u0026#34; \u0026#34;github_resource_provider\u0026#34; { name = \u0026#34;GitHub.Network\u0026#34; } resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;resource_group\u0026#34; { location = \u0026#34;North Europe\u0026#34; name = \u0026#34;My-Rg\u0026#34; } resource \u0026#34;azurerm_virtual_network\u0026#34; \u0026#34;vnet\u0026#34; { name = \u0026#34;My-vnet\u0026#34; location = azurerm_resource_group.resource_group.location resource_group_name = azurerm_resource_group.resource_group.name address_space = \u0026#34;10.0.0.0/8\u0026#34; } resource \u0026#34;azurerm_subnet\u0026#34; \u0026#34;runner_subnet\u0026#34; { name = \u0026#34;My-runner-subnet\u0026#34; resource_group_name = azurerm_resource_group.resource_group.name virtual_network_name = azurerm_virtual_network.vnet.name address_prefixes = \u0026#34;10.0.1.0/24\u0026#34; delegation { name = \u0026#34;delegation\u0026#34; service_delegation { name = \u0026#34;GitHub.Network/networkSettings\u0026#34; actions = [\u0026#34;Microsoft.Network/virtualNetworks/subnets/join/action\u0026#34;] } } } # Create the GitHub Network settings resource \u0026#34;azapi_resource\u0026#34; \u0026#34;github_network_settings\u0026#34; { type = \u0026#34;GitHub.Network/networkSettings@2024-04-02\u0026#34; name = \u0026#34;github_network_settings_resource\u0026#34; # The name of the networksettings location = \u0026#34;West Europe\u0026#34; # The region in which the networksetting resource will be created parent_id = azurerm_resource_group.resource_group.id # Parent Id that should point to the ID of the resource group schema_validation_enabled = false body = jsonencode({ properties = { businessId = var.github_business_id # GitHub EnterpriseID or Organization ID based on Enterprise vs Organization level configuration subnetId = azurerm_subnet.runner_subnet.id # ID of the subnet where the NICs will be injected } }) response_export_values = [\u0026#34;tags.GitHubId\u0026#34;] # Export the tags.GitHubId lifecycle { ignore_changes = [tags] } } output \u0026#34;github_network_settings_id\u0026#34; { description = \u0026#34;ID of the GitHub.Network/networkSettings resource\u0026#34; value = jsondecode(azapi_resource.github_network_settings.output).gitHubId.value } You can find the whole source code at the end of the article in the references section\nGitHub configuration # I decided to create the Hosted Compute Networking configurations at the Organization levels because it is where it makes the most sense for my use case, but creating it at the Enterprise level is pretty much the same thing, so you can easily adapt this tutorial to it.\nGo to your Organization Settings In Hosted Compute Networking, create a new Network Configuration and pick Azure Private Networking Add a name to the configuration and then click on the Add Azure Virtual Network button Paste the ID outputted by Terraform while creating the GitHub Network settings resource Save the configuration GitHub network setting configuration dialog, image courtesy of https://github.com/garnertb/github-runner-vnet After the network configuration is created, we have to create a Runner Group that uses the network configuration just created.\nGo to Organization settings \u0026gt; Actions \u0026gt; Runner Groups Give the Runner Group a name In the network configuration dropdown, select the network configuration created in the previous step Save the Runner group After the Runner Group has been created, it\u0026rsquo;s now time to create a runner (or more) within the Runner Group\nClick on the Runner Group just created Click on the New runner \u0026gt; New GitHub-hosted runner Specify name, OS, Image (OS Version) and Specs (Size) Make sure the Runner Group is the previously created Runner Group Save the runner Now that we have configured everything, we can change the runs-on label on a workflow with the name of one of the runners created above and it will use the new runner that has VNET connectivity with our PaaS service.\nname: Sample workflow on: pull_request: jobs: build: name: Build runs-on: azure-vnet-runner # Use the name of the runner just created References # John Savill Technical training - Private Endpoints GitHub docs - Organization private networking GitHub docs - Enterprise private networking Example code Conclusion # Thanks to GitHub private networking for hosted runners, we can ensure our CI/CD pipeline works seamlessly even when we deny public access to the PaaS services we use, allowing us to enhance the security posture of our Azure Subscription.\nIn this repository, I have a simple Terraform configuration where I deploy an Azure Storage Account, disable Public Access, and create the Private Endpoints for blob and tables within a VNET. In another VNET I have configured the GitHub network settings, the output of such configuration is the token that you can input in GitHub when creating the Hosted Compute Networking configuration.\nI hope you enjoyed this article, if you have some questions, don\u0026rsquo;t hesitate to reach out. Till the next time!\n","date":"24 July 2024","externalUrl":null,"permalink":"/posts/github-actions-azure-vnet-integration/","section":"Posts","summary":"In today\u0026rsquo;s post, we will look at an interesting challenge, having GitHub actions interact with Azure PaaS services for which we have disabled public access.","title":"Github Actions Azure Vnet Integration","type":"posts"},{"content":"","date":"24 July 2024","externalUrl":null,"permalink":"/","section":"Max's Tech Chronicles","summary":"","title":"Max's Tech Chronicles","type":"page"},{"content":"","date":"24 July 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"24 July 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"24 July 2024","externalUrl":null,"permalink":"/tags/terraform/","section":"Tags","summary":"","title":"Terraform","type":"tags"},{"content":"","date":"16 July 2024","externalUrl":null,"permalink":"/tags/homelab/","section":"Tags","summary":"","title":"Homelab","type":"tags"},{"content":"If you have been following along in this series, so far we have configured the master node and added a few worker nodes to the cluster. Now it\u0026rsquo;s time to implement a fun part, the TLS certificate management for our internally exposed web applications, so without further ado, let\u0026rsquo;s dive right into it.\nMixing cert-manager, Let\u0026rsquo;s Encrypt \u0026amp; Cloudflare # Cert-manager is a certificate controller for Kubernetes, created by Jetstack and donated to CNCF. Amongst its key features, we are specifically interested in:\nAutomated issuance and renewal of certificates to secure Ingress with TLS Fully integrated Issuers from recognized public and private Certificate Authorities We will install cert-manager and configure it to request a certificate from Let\u0026rsquo;s Encrypt CA.\nI won\u0026rsquo;t go into great details on how the certificate issuing process works but, given that our services are not exposed to the internet, we need to pick a Let\u0026rsquo;sEncrypt challenge that supports this scenario.\nLet\u0026rsquo;s Encrypt challenges # As the documentation puts it\n\u0026ldquo;When you get a certificate from Let’s Encrypt, our servers validate that you control the domain names in that certificate using challenges\u0026rdquo; Let\u0026rsquo;s Encrypt supports several challenge types:\nHTTP-01 DNS-01 TLS-ALPN-01 Out of those 3, HTTP-01 and TLS-ALPN-01 require your server to be exposed to the internet, while our explicit goal is not to expose any service through the public internet, so the only suitable challenge we can pick is DNS-01.\nThe DNS-01 challenge # The DNS-01 challenge process is represented in the following sequence diagram:\nThe diagram DNS-01 challenge Tip: If you want to read more about how the ACME protocol works, you can read the internet standard RFC 8555 DNS Registrar # I\u0026rsquo;m using Cloudflare as my registrar because I love their services, their API allows us to automate DNS management, there are a lot of integrations already existing for Cloudflare and it works natively with cert-manager.\nCloudflare is not the only provider supported by cert-manager and the list of all the supported providers for the DNS-01 challenge can be found here.\nInstall and configure cert-manager # We\u0026rsquo;re using Helm to install cert-manager, so we need to add the Helm repository and then install the chart.\nhelm repo add jetstack https://charts.jetstack.io helm repo update helm upgrade --install cert-manager jetstack/cert-manager \\ --namespace cert-manager \\ --create-namespace \\ --version v1.15.1 \\ --set crds.enabled=true Generate Cloudflare API token # Now that we installed cert-manager, we have to configure it to consume the Cloudflare API. We have to create a Cloudflare API token to allow cert-manager to consume the Cloudflare API, for which the required permissions are:\nPermissions:\nZone - DNS - Edit Zone - Zone - Read Zone Resources\nInclude - All Zones Now we need to create a Kubernetes secret with the token generated earlier:\nkubectl create secret generic cloudflare-api-key-secret \\ -n cert-manager --from-literal=api-key=[YOUR_CLOUDFLARE_API_KEY] Configure the staging ClusterIssuer # When we install cert-manager, it creates some custom resource definitions (CRDs) that we will use to configure various aspects of the certificate request process, two of which are the Issuer or ClusterIssuer. Those resources represent certificate authorities (CAs) that will issue our cluster the TLS certificates.\nBoth resources are pretty much identical, with the only difference being that the Issuer is namespace scoped, while the other ClusterIssuer is global, so if you use the issuer and need a certificate for services in multiple namespaces, you need to deploy multiple Issuer resources while with the ClusterIssuer one resource will suffice for the whole cluster. For my homelab I\u0026rsquo;ve picked the ClusterIssuer one.\nOn the ClusterIssuer we have to configure Let\u0026rsquo;s Encrypt DNS-01 challenge and point the resource to the secret created earlier used to authenticate towards the Cloudflare API.\nDue to the strict rate limiting applied by the Let\u0026rsquo;s Encrypt production APIs, it\u0026rsquo;s a good idea to use their staging APIs first and then, only when everything works correctly, we can then create another ClusterIssuer and target Let\u0026rsquo;s Encrypt production APIs.\nLet\u0026rsquo;s see here below what the configuration looks like:\nCreate a file file called clusterissuer-staging.yml and paste the following manifest into it:\napiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: letsencrypt-dns01-staging-issuer spec: acme: server: https://acme-staging-v02.api.letsencrypt.org/directory # Staging API email: mail@mail.com # your email address for updates privateKeySecretRef: name: letsencrypt-dns01-staging-private-key # Name of a secret used to store the ACME account private key solvers: - dns01: cloudflare: email: mail@mail.com # your cloudflare account email address apiTokenSecretRef: name: cloudflare-api-key-secret # Matches the name of the secret created earlier key: api-key # Matches the key of the secret created earlier Make sure you replace the email in the manifest above. Create the staging ClusterIssuer in the cluster\nkubectl apply -f clusterissuer-staging.yml Warn: If you use a different namespace than cert-issuer, you may need to configure the Cluster Issuer Namespace to specify cert-manager in which namespace to look for the Cloudflare secret. Make sure to read the documentation here Verify staging ClusterIssuer installation # To make sure everything is configured correctly, we will create a certificate issue request since we\u0026rsquo;re using the staging API of Let\u0026rsquo;s Encrypt, this certificate won\u0026rsquo;t be used for TLS, only to make sure everything is configured correctly.\nBefore proceeding, let\u0026rsquo;s create an A record in Cloudflare that points to the Traefik service created in the first article of the series. To get the IP address let\u0026rsquo;s use the following command:\nkubectl get svc -n traefik NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE traefik LoadBalancer 10.43.63.113 192.168.2.210 80:31468/TCP,443:31486/TCP,443:31486/UDP 13d Here we are interested in the external IP, so we will create an A record that points to that IP. Please note that we are creating an A record in our DNS that points to a private IP address. This will allow us to resolve the services hosted in K3s using a domain name and use TLS certificates, rather than using the IP.\nFor this example, I\u0026rsquo;ve created a temporary A record for the k3s subdomain in the maxdon.tech domain I own that points to 192.168.2.210, it looks like the following:\nType Name Content A k3s.maxdon.tech 192.168.2.210 After the record has been created, it\u0026rsquo;s time to test the certificate-issuing process.\nCreate a test namespace\nkubectl create namespace test-cert Create a certificate issue request by pasting the following code in a file called test-certificate-staging.yml\napiVersion: cert-manager.io/v1 kind: Certificate metadata: name: test-certificate namespace: test-cert spec: secretName: test-example-tls # This is the name of the secret that will hold the TLS certificate issuerRef: name: letsencrypt-dns01-staging-issuer # This should be the name of the staging CLusterIssuer kind: ClusterIssuer dnsNames: - k3s.maxdon.tech # This should be the same name of the A record created in Cloudflare earlier Make sure you replace the domain k3s.maxdon.tech with your domain. Create the test certificate in the cluster\nkubectl apply -f test-certificate-staging.yml Verify that the certificate has been issued with kubectl get certificates and the output should be the following:\nkubectl get certificate -n test-cert NAME READY SECRET AGE test-certificate True test-example-tls 75s Please note that this step can take up to a couple of minutes when using the DNS-01 challenge! If the process went well, we now have a secret that contains our certificate, the name of the secret is defined when we create the certificate resource, and we can then inspect the secret using this command:\nkubectl describe -n test-cert secrets test-example-tls Name: test-example-tls Namespace: test-cert Labels: controller.cert-manager.io/fao=true Annotations: cert-manager.io/alt-names: k3s.maxdon.tech cert-manager.io/certificate-name: test-certificate cert-manager.io/common-name: k3s.maxdon.tech cert-manager.io/ip-sans: cert-manager.io/issuer-group: cert-manager.io/issuer-kind: ClusterIssuer cert-manager.io/issuer-name: letsencrypt-dns01-staging-issuer cert-manager.io/uri-sans: Type: kubernetes.io/tls Data ==== tls.crt: 3733 bytes tls.key: 1679 bytes As you can see, we have successfully obtained a certificate with the correct common name, we can also see that this certificate has been issued by the staging issuer, so this shouldn\u0026rsquo;t be used in our services.\nTroubleshooting # If the certificate-issuing process fails, here are a few things to look out for:\nMake sure that the ClusterIssuer is ready\nkubectl get clusterissuer NAME READY AGE letsencrypt-dns01-staging-issuer True 2m7s If ready is false, try to look at the events of the ClusterIssuer using the following command:\nkubectl describe clusterissuer letsencrypt-dns01-staging-issuer I had the following error:\nStatus: Acme: Conditions: Last Transition Time: 2024-07-17T12:57:39Z Message: Failed to register ACME account: Get \u0026#34;https://acme-staging-v02.api.letsencrypt.org/directory\u0026#34;: dial tcp: lookup acme-staging-v02.api.letsencrypt.org on 10.43.0.10:53: server misbehaving Observed Generation: 1 Reason: ErrRegisterACMEAccount Status: False Type: Ready This was due to an incorrect configuration of the DNS on the cluster nodes so the cluster couldn\u0026rsquo;t correctly resolve hostnames. Fixing the DNS issue, and deleting and re-installing the ClusterIssuer resolved the error.\nFor additional troubleshooting tips, refer to the cert-manager documentation on the subject here.\nCheck the issuing process\nWith cert-manager, whenever we create a Certificate resource, cert-manager creates several resources. Those resources are linked and you can \u0026ldquo;walk\u0026rdquo; the link using kubectl describe {resourcetype} {resourcename} using the order resource as a starting point. What we are interested in here is the Events: section of the output which will help us figure out what\u0026rsquo;s wrong. Another, probably simpler, way to achieve the same result, is to query for all the events in the namespace we care about:\nkubectl get events -n test-cert LAST SEEN TYPE REASON OBJECT MESSAGE 32m Normal Started challenge/test-certificate-wrong-1-4090149863-2764006135 Challenge scheduled for processing 11m Warning PresentError challenge/test-certificate-wrong-1-4090149863-2764006135 Error presenting challenge: Found no Zones for domain _acme-challenge.k3s.example.tech. (neither in the sub-domain nor in the SLD) please make sure your domain-entries in the config are correct and the API key is correctly setup with Zone.read rights. 32m Normal Created order/test-certificate-wrong-1-4090149863 Created Challenge resource \u0026#34;test-certificate-wrong-1-4090149863-2764006135\u0026#34; for domain \u0026#34;k3s.example.tech\u0026#34; 32m Normal WaitingForApproval certificaterequest/test-certificate-wrong-1 Not signing CertificateRequest until it is Approved 32m Normal WaitingForApproval certificaterequest/test-certificate-wrong-1 Not signing CertificateRequest until it is Approved 32m Normal WaitingForApproval certificaterequest/test-certificate-wrong-1 Not signing CertificateRequest until it is Approved 32m Normal WaitingForApproval certificaterequest/test-certificate-wrong-1 Not signing CertificateRequest until it is Approved 32m Normal WaitingForApproval certificaterequest/test-certificate-wrong-1 Not signing CertificateRequest until it is Approved 32m Normal cert-manager.io certificaterequest/test-certificate-wrong-1 Certificate request has been approved by cert-manager.io 32m Normal OrderCreated certificaterequest/test-certificate-wrong-1 Created Order resource test-cert/test-certificate-wrong-1-4090149863 32m Normal Issuing certificate/test-certificate-wrong Issuing certificate as Secret does not exist 32m Normal Generated certificate/test-certificate-wrong Stored new private key in temporary Secret resource \u0026#34;test-certificate-wrong-rvtwc\u0026#34; 32m Normal Requested certificate/test-certificate-wrong Created new CertificateRequest resource \u0026#34;test-certificate-wrong-1\u0026#34; From here you can see that I requested a certificate for a domain I don\u0026rsquo;t own (example.tech)\nCleanup the test certificate # If you successfully managed to get a certificate using the staging ClusterIssuer, now it\u0026rsquo;s time to clean up the test certificate and the related secret. The quickest way to do so is to delete the whole namespace:\nkubectl delete ns test-cert Configure the production ClusterIssuer # Now, that we correctly obtained a staging certificate, it\u0026rsquo;s time to configure cert-manager to use the production API of Let\u0026rsquo;s Encrypt. To do so, we need to change the server URI and give it a different name, everything else stays the same as the staging ClusterIssuer, see the updated manifest here below:\nCreate a file called clusterissuer-production.yml and paste the following manifest into it: apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: letsencrypt-dns01-production-issuer spec: acme: server: https://acme-v02.api.letsencrypt.org/directory # Production API email: mail@mail.com # your email address for updates privateKeySecretRef: name: letsencrypt-dns01-production-private-key # Name of a secret used to store the ACME account private key solvers: - dns01: cloudflare: email: mail@mail.com # your cloudflare account email address apiTokenSecretRef: name: cloudflare-api-key-secret key: api-key Make sure you replace the email in the manifest above. Create the staging ClusterIssuer in the cluster kubectl apply -f clusterissuer-production.yml At this point, let\u0026rsquo;s make sure that the production ClusterIssuer is ready as we did previously using:\nkubectl get clusterissuer NAME READY AGE letsencrypt-dns01-staging-issuer True 5m7s letsencrypt-dns01-production-issuer True 1m12s Verify production ClusterIssuer installation # We can deploy a demo site using nginx and request a valid certificate from Let\u0026rsquo;s Encrypt to verify that we can successfully obtain a valid TLS certificate from Let\u0026rsquo;s Encrypt. Copy and paste the following manifest in a file called demosite.yml:\n--- apiVersion: v1 kind: Namespace metadata: name: demo-site --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-web namespace: demo-site labels: app: nginx-web spec: replicas: 1 selector: matchLabels: app: nginx-web template: metadata: labels: app: nginx-web spec: containers: - name: nginx image: nginx ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: nginx-web-service namespace: demo-site labels: app: nginx-web spec: type: ClusterIP ports: - port: 80 targetPort: 80 selector: app: nginx-web --- apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: k3s-tls-certificate namespace: demo-site spec: secretName: k3s-maxdon-tech-tls # Specify the name of the generated TLS certificate secret issuerRef: name: letsencrypt-dns01-production-issuer # Use the production ClusterIssuer kind: ClusterIssuer dnsNames: - k3s.maxdon.tech --- apiVersion: traefik.io/v1alpha1 kind: IngressRoute metadata: name: nginx-web-ingress namespace: demo-site spec: entryPoints: - websecure # Use websecure bind on 443 that\u0026#39;s an entry point defined by Traefik, alongside a web one that it\u0026#39;s bind on port 80 routes: - match: Host(`k3s.maxdon.tech`) kind: Rule services: - name: nginx-web-service port: 80 tls: secretName: k3s-maxdon-tech-tls # Match the name of the secret that contains the certificate Make sure you replace the host k3s.maxdon.tech with your domain. Now let\u0026rsquo;s create all the resources in the cluster using our friend kubectl as follows:\nkubectl apply -f demosite.yml After a few minutes, you should be able to see a certificate in the demo-site namespace using the following command:\nkubectl get certificate -n demo-site NAME READY SECRET AGE k3s-tls-certificate True k3s-maxdon-tech-tls 92s At this point, we should be able to navigate in our browser to the website and verify that we have a valid TLS certificate, that has been issued by Let\u0026rsquo;s Encrypt, we can now delete the demosite resources using the following command:\nkubectl delete -f demosite.yml Conclusion # This was quite a lengthy post, but cert-manager makes it really easy for us to configure and automate certificate management. Beware that cert-manager doesn\u0026rsquo;t support all the domain registrar so if you still have to buy a domain and want to use cert-manager, make sure that you\u0026rsquo;re buying it from one of the supported ones.\nJust to recap, to expose a service with its related TLS certificate we need to:\nCreate a certificate resource to instruct cert-manager to request a certificate for us Instruct Traefik on which certificate to use, specifying the same secret name used in the certificate resource At this point, we achieved all the goals from the first post:\nMultinode k8s Cluster Do not expose any internal service to the internet Resolve internal services deployed on the cluster via domain name Have free SSL certificates and automated certificate renewal Pretty easy no?\nIn the next article we will look at automating the DNS records management that is still a manual process as of now, so stay tuned for the next one!\n","date":"16 July 2024","externalUrl":null,"permalink":"/posts/k3s-raspberry-tls/","section":"Posts","summary":"If you have been following along in this series, so far we have configured the master node and added a few worker nodes to the cluster.","title":"Install K3s on a Raspberry PI - TLS certificates","type":"posts"},{"content":"","date":"16 July 2024","externalUrl":null,"permalink":"/series/k3s-on-raspberry-pi/","section":"Series","summary":"","title":"K3s on Raspberry PI","type":"series"},{"content":"","date":"16 July 2024","externalUrl":null,"permalink":"/tags/kubernetes/","section":"Tags","summary":"","title":"Kubernetes","type":"tags"},{"content":"","date":"16 July 2024","externalUrl":null,"permalink":"/tags/rpi/","section":"Tags","summary":"","title":"Rpi","type":"tags"},{"content":"","date":"16 July 2024","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"16 July 2024","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"In the first article of this mini-series, we configured the master node and kubectl on our PC, now it\u0026rsquo;s time to configure the worker nodes and join them to the cluster, here\u0026rsquo;s the final state with my hostnames and IPs:\nThe diagram of the K3s multinode cluster Operating System Preparation # Similar to the previous article, we will go through some basic O.S. configuration and then start the installation of K3s on the new node. Since those steps were already explained in the first post of the series, I will only show the relevant command to execute, if you want to get more details about what those commands do, please refer to the first article of the series.\nOS \u0026amp; Packages updates # SSH into the Raspberry PI using either the ssh user@hostname.domain format (if you don’t have a domain configured you can use the hostname.local, for me for example it’s ssh pi-node-02.local) or ssh user@ip-address\nUpdate apt packages \u0026amp; OS using the following commands:\nsudo apt-get update -y sudo apt-get upgrade -y sudo apt-get dist-upgrade -y sudo apt --fix-broken install -y sudo apt autoremove -y sudo apt autoclean More information on what is the local domain and how it works can be found here Configure a static IP on the Raspberry PI # nmcli con show connetion={add your connection name here} sudo nmcli con mod $connection ipv4.method manual ipv4.addr 192.168.2.202/24 ipv4.gateway 192.168.2.254 ipv4.dns \u0026#34;192.168.2.59 1.1.1.1\u0026#34; sudo reboot Please note that 192.168.2.59 is the IP of my Pi-Hole used as my dns resolver\nConfigure the kernel to enable cgroup v2 # echo \u0026#39; cgroup_memory=1 cgroup_enable=memory\u0026#39; | sudo tee -a /boot/firmware/cmdline.txt sudo reboot Verify cgroup v2 is enabled # pi-adm@pi-node-02:~$ grep cgroup /proc/filesystems nodev cgroup nodev cgroup2 \u0026lt;-- This tells us that cgroup v2 is enabled Worker node installation # The worker node installation is similar to the master node one, we still have to run the k3s install script, but we will change some parameters, we need to tell K3s that\u0026rsquo;s going to act as a worker and what the master node IP is, let\u0026rsquo;s see how here below:\nSSH into your Raspberry PI master node using ssh user@hostname.domain or ssh user@ip-address\nCopy the master node token displayed using the following command:\nsudo cat /var/lib/rancher/k3s/server/node-token SSH into the worker node using ssh user@hostname.domain or ssh user@ip-address\nPrepare K3s kubelet configuration file in /etc/rancher/k3s/kubelet.config\nkubeconfig=/etc/rancher/k3s/kubelet.config sudo mkdir -p $(dirname $kubeconfig) sudo tee $kubeconfig \u0026gt;/dev/null \u0026lt;\u0026lt;EOF apiVersion: kubelet.config.k8s.io/v1beta1 kind: KubeletConfiguration shutdownGracePeriod: 30s shutdownGracePeriodCriticalPods: 10s EOF Set the variable MASTER_TOKEN with the value of the node token copied from the server in step 2\nexport MASTER_TOKEN=K10.... Set the variable MASTER_IP with the IP of the master node\nexport MASTER_IP=192.168.2.201 SSH Into the worker host and Install K3s using the command below:\ncurl -sfL https://get.k3s.io | K3S_URL=https://$MASTER_IP:6443 \\ K3S_TOKEN=$MASTER_TOKEN sh -s - --node-label \u0026#39;node_type=worker\u0026#39; \\ --kubelet-arg \u0026#39;config=/etc/rancher/k3s/kubelet.config\u0026#39; \\ --kube-proxy-arg \u0026#39;metrics-bind-address=0.0.0.0\u0026#39; Installation Parameters # Let’s now look at all the parameters that we specified in the command line:\nK3S_URL Is used to specify the address of the master node, this also assumes it\u0026rsquo;s an agent installation (as opposed to a server one) K3S_TOKEN This is the token we copied from the K3s master node that will be used by K3s to join the cluster --node-label 'node_type=worker' This is a random label that we add to the node, label name and value are completely up to you and can be omitted --kubelet-arg 'config=/etc/rancher/k3s/kubelet.config' Specify the location of the kubelet config file (the one we generated in the previous step) --kube-proxy-arg 'metrics-bind-address=0.0.0.0' Bind on all addresses to enable metrics scraping from an external node Verify worker node installation # If everything is configured correctly, from our machine we should now be able to see the new node added to our cluster:\nkubectl get nodes NAME STATUS ROLES AGE VERSION pi-node-01 Ready control-plane,master 20m v1.29.5+k3s1 pi-node-02 Ready \u0026lt;none\u0026gt; 20s v1.29.5+k3s1 If you want to change the role from \u0026lt;none\u0026gt; to worker, we need to add a label to the node, which can achieved via the following command:\nkubectl label node pi-node-02 kubernetes.io/role=worker Please note that\u0026rsquo;s not possible to specify the label kubernetes.io/role=worker at K3s installation time using the parameter --node-label. The installation will result in an error, thus we have to manually label the node after the installation Lens Metrics # If you\u0026rsquo;re using Lens, the Kubernetes GUI, you can configure the metrics displayed in the cluster overview page to display information about your cluster, like memory usage and CPU usage as shown in the picture below:\nThe cluster metrics displayed by Lens Install Prometheus with the following commands\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts helm repo update helm install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace Configure lens metrics to use Helm\nSpecify the Prometheus service address\nIn Lens, from the catalog, go to the cluster setting -\u0026gt; Metrics and set the Prometheus service address to monitoring/prometheus-server:80 as shown below:\nThe cluster metrics configuration in Lens Conclusions # That\u0026rsquo;s all it takes to add a K3s node to an existing cluster, if you have multiple nodes, you can simply repeat those steps multiple times. So far we installed a multinode cluster, so only implemented the first of the features discussed in the first post, in the next post of the series though we will start to implement the other capabilities.\nSee you in the next post!\nHero Image generated by Bing Copilot\n","date":"12 July 2024","externalUrl":null,"permalink":"/posts/k3s-raspberry-pi-worker/","section":"Posts","summary":"In the first article of this mini-series, we configured the master node and kubectl on our PC, now it\u0026rsquo;s time to configure the worker nodes and join them to the cluster, here\u0026rsquo;s the final state with my hostnames and IPs:","title":"Install K3s on a Raspberry PI - Worker node","type":"posts"},{"content":" Motivation # I recently bought a few Raspberry PI 5 SBCs to play around with Kubernetes at home and, without noticing, I started spending a lot of my free time with it.\nThe initial set of features that I wanted to set up were the following:\nMultinode k8s Cluster Do not expose any internal service to the internet Resolve internal services deployed on the cluster via domain name Have free SSL certificates and automated certificate renewal As we will soon see, even this limited set of features, requires a decent amount of work to configure, so this process is split into a mini-series of articles to keep them relatively short.\nPlease note that I\u0026rsquo;m not going through all the O.S. installation and initial configuration in this article, so as a pre-requisite you have to install the O.S. into an SD card (or SSD if you happen to have the M2 Hat). Why K3s # One of the more common distributions of Kubernetes that are installed on the Raspberry PI is K3s. K3s is a certified and lightweight distribution, it\u0026rsquo;s also a goal of the project not to diverge from the main Kubernetes code, which makes it perfect for getting your hands dirty with Kubernetes on resource-constrained devices.\nOperating System Preparation # OS \u0026amp; Packages updates # Let\u0026rsquo;s first update all the installed packages and the kernel itself.\nSSH into the Raspberry PI using either the ssh user@hostname.domain format (if you don\u0026rsquo;t have a domain configured you can use the hostname.local, for me for example it\u0026rsquo;s ssh pi-node-01.local) or ssh user@ip-address Update apt packages \u0026amp; OS using the following commands: sudo apt-get update -y sudo apt-get upgrade -y sudo apt-get dist-upgrade -y sudo apt --fix-broken install -y sudo apt autoremove -y sudo apt autoclean More information on what is the local domain and how it works can be found here Configure a static IP on the Raspberry PI # I decided to set each Raspberry PI IP to a static value, this step is not strictly required but if your node changes IP, you will be in for a fun debugging session, so just to make things simpler, let\u0026rsquo;s configure the Raspberry PIs with a static IP. You can choose to do so in 2 different ways:\nConfigure the router\u0026rsquo;s DHCP reservation (if available) so that the router assigns the same IP address to the device identified by its physical MAC address Configure the router to limit the DHCP addresses available, and set the Raspberry PI IP configuration to manual I chose the second option because my router doesn\u0026rsquo;t support DHCP reservation, so here\u0026rsquo;s what I\u0026rsquo;ve done:\nConfigure the router to limit the DHCP addresses to the range 192.168.2.1 to 192.168.2.200 Configure each Raspberry PI with an address starting from 201 up with the command below: sudo nmcli con mod preconfigured ipv4.method manual ipv4.addr 192.168.2.201/24 ipv4.gateway 192.168.2.254 \u0026#34;192.168.2.59 1.1.1.1\u0026#34; sudo reboot Please note that 192.168.2.59 is the IP of my Pi-Hole used as my dns resolver\nwhere preconfigured is the name of my connection, configured by the Raspberry PI Imager that I preconfigure while flashing the O.S. to the SD card. You can list all the connection names using the command nmcli connections show. If you\u0026rsquo;re using the WiFi interface, you can get the name of the connection using nmcli connection show | grep wifi | cut -d' ' -f1\nConfigure the kernel to enable cgroup v2 # K3s requires cgroup v2 to function and, by default, they\u0026rsquo;re disabled in the Raspberry PI O.S. so we need to enable them as follows:\necho \u0026#39; cgroup_memory=1 cgroup_enable=memory\u0026#39; | sudo tee -a /boot/firmware/cmdline.txt sudo reboot Without memory cgroup v2 enabled, k3s will fail to start with the following error: level=fatal msg=\u0026quot;failed to find memory cgroup (v2)\u0026quot; Verify cgroup v2 is enabled # To verify that cgroup v2 is enabled we can run this command on the Raspberry PI:\npi-adm@pi-node-01:~$ grep cgroup /proc/filesystems nodev cgroup nodev cgroup2 \u0026lt;-- This tells us that cgroup v2 is enabled Master Node Installation # The first node that we will install is the master node, I\u0026rsquo;m calling this out because the install instruction is a little different between the master node and the worker nodes.\nSSH into your Raspberry PI using ssh user@hostname.domain or ssh user@ip-address\nGenerate a random token, e.g. using OpenSSL\nexport K3S_TOKEN=$(openssl rand -base64 20) Prepare the K3s kubelet configuration file in /etc/rancher/k3s/kubelet.config\nkubeconfig=/etc/rancher/k3s/kubelet.config sudo mkdir -p $(dirname $kubeconfig) sudo tee $kubeconfig \u0026gt;/dev/null \u0026lt;\u0026lt;EOF apiVersion: kubelet.config.k8s.io/v1beta1 kind: KubeletConfiguration shutdownGracePeriod: 30s shutdownGracePeriodCriticalPods: 10s EOF This kubelet configuration enables the new kubernetes feature Graceful Shutdown ensuring that the pod follows the normal pod termination process during the node shutdown.\nInstall the K3s control plane node\ncurl -sfL https://get.k3s.io | K3S_TOKEN=$K3S_TOKEN sh -s - server \\ --write-kubeconfig-mode \u0026#39;0644\u0026#39; --node-taint \u0026#39;node-role.kubernetes.io/control-plane:NoSchedule\u0026#39; \\ --disable \u0026#39;servicelb\u0026#39; --disable \u0026#39;traefik\u0026#39; \\ --kube-controller-manager-arg \u0026#39;bind-address=0.0.0.0\u0026#39; --kube-proxy-arg \u0026#39;metrics-bind-address=0.0.0.0\u0026#39; \\ --kube-scheduler-arg \u0026#39;bind-address=0.0.0.0\u0026#39; --kubelet-arg \u0026#39;config=/etc/rancher/k3s/kubelet.config\u0026#39; \\ --kube-controller-manager-arg \u0026#39;terminated-pod-gc-threshold=10\u0026#39; Please note that the argument --node-taint... tells Kubernetes not to schedule pods on this node, if you want to schedule pods on the master node as well, remove that argument but bear in mind that\u0026rsquo;s not the suggested approach. If you set up a single Kubernetes node though, you have to remove that argument. Installation parameters # Let\u0026rsquo;s now look at all the parameters that we specified in the command line:\n-s server Used to tell K3s to run in server mode (for master node) as opposed to agent mode (for worker nodes) --write-kubeconfig-mode '0644' Writes the kubeconfig file with the specified mode --node-taint 'node-role.kubernetes.io/control-plane:NoSchedule' Tells K3s to not schedule any user pods on the master node, K3s common services: core-dns and metric-service will still run on the master node --disable 'servicelb' Do not install the built-in service load balancer (we will replace it with MetalLb later on) --disable 'traefik' Do not install Traefik, we will install it manually so we will have access to its configuration --kube-controller-manager-arg 'bind-address=0.0.0.0' Bind on all addresses to enable metrics scraping from an external node --kube-proxy-arg 'metrics-bind-address=0.0.0.0' Bind on all addresses to enable metrics scraping from an external node --kube-scheduler-arg 'bind-address=0.0.0.0' Bind on all addresses to enable metrics scraping from an external node --kubelet-arg 'config=/etc/rancher/k3s/kubelet.config' Specify the location of the kubelet config file (the one we generated in the previous step) --kube-controller-manager-arg 'terminated-pod-gc-threshold=3' This setting limits to 3 the number of terminated pods that can exist before the terminated pod garbage collector starts deleting terminated pods. See Pod Garbage collection Copy the kubeconfig files # To be able to connect to the cluster via the kubectl CLI, we need to copy the kubeconfig file in the default directory where the kubectl expects it:\nmkdir ~/.kube cp /etc/rancher/k3s/k3s.yaml ~/.kube/config Verify master node installation # If everything is configured correctly, from within the node we can check the status of the nodes as shown below:\nkubectl get nodes NAME STATUS ROLES AGE VERSION pi-node-01 Ready control-plane,master 20s v1.29.5+k3s1 To troubleshoot the installation you can look at the logs of the k3s service with journalctl -u k3s or journalctl -xeu k3s.service MetalLB Installation # We will install MetalLB as our load balancer controller to enable external access to cluster services. In a cloud scenario, the managed Kubernetes offering comes with a load balancer that gives you the ability to expose services of type LoadBalancer using a public IP (On Azure for example you can use a public Standard Load Balancer).\nK3s comes with a built-in load balancer called serviceLB, but this only exposes services on the node addresses, with something like MetalLB we can instead use a service of type LoadBalancer and get a specific IP for that service.\nWithout MetalLB if you create a service of type LoadBalancer, the external IP will be stuck in \u0026lt;pending\u0026gt; state when looking at it via the kubectl get services -n namespace.\nIn our case, we need to expose the Traefik Ingress Controller using an IP address of the internal home network and MetalLB allows us to achieve this.\nMetalLB can be configured in two different modes:\nLayer 2 mode (where a single node gets all the traffic for a given service IP and then kube-proxy redirects to the service\u0026rsquo;s pods) BGP mode (where each node establishes a BGP peering session with the network router and uses the peering session to advertise the IPs of external cluster services) Both approaches have their pros and cons, in the layer 2 case, a single node can become a bottleneck while using BGP, if a node goes down, all active connections to the service will be terminated. Since there\u0026rsquo;s no clear winner here, I\u0026rsquo;m opting for using the layer 2 approach.\nYou can look at the limitation for layer 2 mode or the BGP mode on the MetalLB documentation Logically we need to reserve some IP in the DHCP configuration so that there won\u0026rsquo;t be multiple appliances with the same IP on the network. You should be able to configure your router to reserve some IP addresses, and then you can use those IP addresses in a Metallb AddressPool.\nInstall Metallb via kubectl apply\nkubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.3/config/manifests/metallb-native.yaml Create a file called metallb.yml and place the following content there:\n--- apiVersion: metallb.io/v1beta1 kind: IPAddressPool metadata: name: k3s-lb-pool namespace: metallb-system spec: addresses: ## Replace this with your IP address reserved range. ## This should be on the same network as your nodes! ## This address range should be blocked on your router DHCP config - 192.168.2.210-192.168.2.230 --- apiVersion: metallb.io/v1beta1 kind: L2Advertisement metadata: name: k3s-lb-pool namespace: metallb-system Configuring the WiFI interface (Optional) # If you connect the Raspberry PI to the network via ethernet, skip this step.\nIf you connect the Raspberry PI to the network via WiFi, you need to also change the configuration of the WiFi interface to make sure MetalLB works properly, you can see this in the product documentation.\nYou can configure the interface (most likely called wlan0) with the following command: sudo ifconfig \u0026lt;device\u0026gt; promisc\nBear in mind that this configuration doesn\u0026rsquo;t survive the node restart Make WiFi interface configuration persistent (Optional) # If you connect the Raspberry PI to the network via ethernet, skip this step.\nIf you want to make the configuration persistent, we need to implement a little workaround using a Linux service that starts after the network service comes online, and executes our command ifconfig wlan0 promisc\nHere below you can see the code for such a service:\nsudo bash -c \u0026#39;cat \u0026gt; /etc/systemd/system/bridge-promisc.service\u0026#39; \u0026lt;\u0026lt;EOS [Unit] Description=Makes interfaces run in promiscuous mode at boot After=network-online.target [Service] Type=oneshot ExecStart=/usr/sbin/ifconfig wlan0 promisc TimeoutStartSec=0 RemainAfterExit=yes [Install] WantedBy=default.target EOS sudo systemctl enable bridge-promisc Verify MetalLB installation # To ensure the successful installation of MetalLB we can deploy a temporary service (for example an nginx image) and make sure it successfully gets assigned an external IP address.\nkubectl create namespace test-metallb kubectl create deployment nginx --image=nginx -n test-metallb kubectl expose deployment nginx --type=LoadBalancer --name=nginx --port=80 --protocol=TCP -n test-metallb After the deployment succeeds, we need to check if the newly created service gets an external IP address via:\nkubectl get service -n test-metallb NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE nginx LoadBalancer 10.43.247.187 192.168.2.210 80:30129/TCP 13s After navigating to the exposed IP address in the browser, we can now safely remove this test namespace via:\nkubectl delete namespace test-metallb Traefik installation # I picked Traefik as my Kubernetes Ingress Controller. This comes built into the K3s bundle but I decided to install it manually to target the latest version available (3.10 at the time of writing) hence I disabled it while installing K3s so, here we are, installing it manually.\nWe can use Traefik on Kubernetes in different ways:\nUsing standard Kubernetes Ingress (May require several annotations for non-straightforward configurations) Using Traefik IngressRoute (Custom CRD) Using the newer Kubernetes Gateway API (Support of the Gateway API is not yet complete at the time of writing, July 2024) I decided to use the custom CRD approach waiting for the GA support of the Gateway API (a new and improved networking specification that is the successor of the Ingress) because of the little configuration required and it also resonates well with me.\nAnyway let\u0026rsquo;s see how to install and configure Traefik:\nAdd Traefik Helm repositories \u0026amp; update them\nhelm repo add traefik https://traefik.github.io/charts helm repo update Create a values file called traefikvalues.yml where we specify the helm chart configuration values with the following content:\ndeployment: enabled: true replicas: 2 ports: web: redirectTo: port: websecure websecure: http3: enabled: true advertisedPort: 4443 tls: enabled: true ingressRoute: dashboard: enabled: false providers: kubernetesCRD: enabled: true allowExternalNameServices: true kubernetesIngress: enabled: true allowExternalNameServices: true publishedService: enabled: false rbac: enabled: true service: enabled: true type: LoadBalancer Run the following command to install Traefik:\nhelm install --namespace=traefik traefik traefik/traefik --values=traefikvalues.yml --create-namespace Verify Traefik installation # Verify Traefik is installed and gets an external IP address\nkubectl get svc -n traefik NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE traefik LoadBalancer 10.43.109.247 192.168.2.210 80:31288/TCP,443:32133/TCP,443:32133/UDP 30s Configure kubectl access on your machine # So far we always accessed the cluster from within the Raspberry PI node, so it\u0026rsquo;s now time to configure our machine to access the cluster via kubectl, to do so we need to do two things:\nCopy the kubeconfig file from the Raspberry PI to our machine and put it in a specific location, we can do so with scp as follows:\nmkdir ~/.kube scp user@hostname:/home/user/.kube/config ~/.kube/config replacing user with the user you configured on the Raspberry PI and hostname with the hostname set on the Raspberry PI. To me, the actual command looks like:\nmkdir ~/.kube scp pi-adm@pi-node-01.local:/home/pi-adm/.kube/config ~/.kube/config Change the server address in the kubeconfig file we just copied, with the actual IP address of the cluster master node, in my case, it is 192.168.2.201\nVerify kubectl can access the cluster # Having done this, we should be able to successfully connect to the cluster. We can verify everything works correctly by executing any kubectl command, for example, kubectl get nodes\nConclusion # At this point we have a basic K3s cluster up \u0026amp; running, we\u0026rsquo;re in a good place to start adding additional nodes to the cluster and implementing the features mentioned at the beginning of the post.\nIf you enjoyed reading this far, stay tuned for the upcoming one on configuring the additional nodes.\nHero Image generated by Bing Copilot\n","date":"1 July 2024","externalUrl":null,"permalink":"/posts/k3s-raspberry-pi/","section":"Posts","summary":"Motivation # I recently bought a few Raspberry PI 5 SBCs to play around with Kubernetes at home and, without noticing, I started spending a lot of my free time with it.","title":"Install K3s on a Raspberry PI - Master node","type":"posts"},{"content":"","date":"20 June 2024","externalUrl":null,"permalink":"/tags/aspire/","section":"Tags","summary":"","title":"Aspire","type":"tags"},{"content":"","date":"20 June 2024","externalUrl":null,"permalink":"/tags/dotnet/","section":"Tags","summary":"","title":"Dotnet","type":"tags"},{"content":"","date":"20 June 2024","externalUrl":null,"permalink":"/tags/otel/","section":"Tags","summary":"","title":"Otel","type":"tags"},{"content":"It\u0026rsquo;s common to evolve HTTP APIs, and while it\u0026rsquo;s very easy to expose new and improved versions of a given functionality, not so much to safely obsolete and eventually remove an API.\nHave you ever deprecated endpoints and wanted to clean them up after some time? Have you ever deleted obsolete endpoints only to discover, after the deployment that some forgotten service was still using those endpoints? Have you ever needed to track the usage of those obsolete endpoints to plot a nice roadmap toward safe deletion?\nIf those questions resonate with you, please follow along, I will show you how to use OpenTelemetry to track usage metrics and Aspire to visualize those metrics. As we all know, APIs tend to evolve and managing API versioning is a tricky business. More often than not we need to live with multiple versions of an API just because we are not sure if you can delete the older version of the API and you choose the \u0026ldquo;better safe than sorry\u0026rdquo; way of dealing with the problem.\nMarking endpoints as obsolete # In ASP.NET Core there\u0026rsquo;s no first-class support for obsoleting endpoints. To do so we can add some metadata to endpoints we want to obsolete and emit some metric every time an endpoint with our newly added metadata executes.\nTo add metadata to endpoints we use C# attributess. You can implement your custom attribute or, preferably, use the built-in [ObsoleteAttribute] that will mark the endpoint as deprecated and will also reflect in the Swagger UI as shown below (See the grey color and the strikethrough name):\nSwagger UI obsolete endpoints Please note that if you use WithOpenApi() on a minimal API, it doesn\u0026rsquo;t show the endpoint as obsolete in the UI, refer to the documentation to correctly setup OpenApi in Minimal API For controllers, you can add the [Obsolete] attribute to either a specific controller action or the entire controller, as shown below:\n[Tags(\u0026#34;Controller\u0026#34;)] [Route(\u0026#34;api/[controller]\u0026#34;)] public class WeatherController : ControllerBase { [HttpGet] [Obsolete] public IActionResult GetWeather() { return Ok(WeatherGenerator.Generate()); } } Adding the attribute at the controller level marks all the controller actions (HTTP APIs) as obsolete while adding to the action marks a single action.\nIf you\u0026rsquo;re using Minimal API instead, you can achieve the same effect using the following code\napp.MapGet(\u0026#34;/weatherforecast\u0026#34;, [Obsolete]() =\u0026gt; WeatherGenerator.Generate()) .WithTags(\u0026#34;MinimalApi\u0026#34;); Minimal API is a simplified approach for building HTTP APIs in ASP.NET Core. For more details, refer to the official documentation\nAdding the [Obsolete] attribute though, is only adding some metadata to the endpoint that will reflect in the OpenApi definition and the Swagger UI, so we need to manually emit some custom telemetry ourselves and follow along to discover how to do it.\nIntercepting endpoint invocations # Once endpoints are marked as obsolete, we need to emit custom telemetry every time our endpoints are invoked. In the MVC world (i.e. when we build our API using controllers) we can implement a filter.\nFilters in MVC are a very powerful way of executing custom code in various stages of the HTTP request pipeline.\nImage courtesy of https://learn.microsoft.com/en-us/aspnet/core/mvc/controllers/filters?view=aspnetcore-8.0\nAs you can see from the image above, the best option is to implement an ActionFilter that runs just before and after our controller action. The code is quite straightforward, we check if our action (the method in the controller that implements the HTTP API) has the obsolete attribute and we emit some telemetry as shown below:\npublic class ObsoleteActionFilter : IAsyncActionFilter { public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next) { var obsoleteAttribute = context.ActionDescriptor.EndpointMetadata.OfType\u0026lt;ObsoleteAttribute\u0026gt;().FirstOrDefault(); if (obsoleteAttribute is not null) { // Emit custom telemetry await next(); } else { await next(); } } } For Minimal API we have to implement something similar, but we can\u0026rsquo;t reuse the same code, we have to instead craft a filter specifically for Minimal API like the following:\npublic class ObsoleteEndpointFilter : IEndpointFilter { public async ValueTask\u0026lt;object?\u0026gt; InvokeAsync(EndpointFilterInvocationContext context, EndpointFilterDelegate next) { var endpoint = context.HttpContext.GetEndpoint(); if (endpoint is not null) { var obsolete = endpoint.Metadata.OfType\u0026lt;ObsoleteAttribute\u0026gt;().FirstOrDefault(); if (obsolete is not null) { // Emit custom telemetry return await next(context); } } return await next(context); } } Emitting custom telemetry using an ASP.NET Core filter # Now that the skeleton of our filters is done, we have to emit custom telemetry to signal that an obsolete endpoint has been invoked.\nOpenTelemetry allows us to emit metric signals, in dotnet to emit custom telemetry we need to create a Meter and from it an instrument. In our case, the Counter\u0026lt;T\u0026gt; is the most appropriate instrument to record endpoint invocations.\nShowing how to best use OpenTelemetry is outside of the scope of this article, but if you\u0026rsquo;re interested there\u0026rsquo;s a great and very pragmatic YoutTube video on how to do telemetry in dotnet by Martin Thwaites that can get you up to speed quickly. Please note that the Meter class needs to be a singleton and you should configure OpenTelemetry to listen to the specific meter using the same name to get telemetry emitted. Don\u0026rsquo;t worry if this sounds a bit convoluted now, especially if you\u0026rsquo;re not so familiar with how OpenTelemetry works in dotnet. Martin does an excellent job in getting you up to speed quickly, moreover you can also find all the source code for this article in my GitHub repository ilmax/obsolete-endpoints Sample code for the obsolete endpoint blog post C# 0 0 So without further ado, here\u0026rsquo;s the OpentTelementry code:\n// Service level configuration public static class DiagnosticConfig { private const string ServiceName = \u0026#34;ObsoleteEndpointsService\u0026#34;; public static readonly Meter Meter = new(ServiceName); public static readonly Counter\u0026lt;long\u0026gt; ObsoleteEndpointCounter = Meter.CreateCounter\u0026lt;long\u0026gt;(\u0026#34;ObsoleteInvocationCount\u0026#34;); } public static class DiagnosticNames { public const string Url = nameof(Url); public const string DisplayName = nameof(DisplayName); public const string ObsoleteEndpoint = nameof(ObsoleteEndpoint); } // Action Filter (MVC) public class ObsoleteActionFilter : IAsyncActionFilter { public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next) { var obsoleteAttribute = context.ActionDescriptor.EndpointMetadata.OfType\u0026lt;ObsoleteAttribute\u0026gt;().FirstOrDefault(); if (obsoleteAttribute is not null) { // Enrich current span var activity = context.HttpContext.Features.Get\u0026lt;IHttpActivityFeature\u0026gt;()?.Activity; activity.EnrichWithActionContext(context); // Emit custom metric DiagnosticConfig.ObsoleteEndpointCounter.Add(1, new KeyValuePair\u0026lt;string, object?\u0026gt;(DiagnosticNames.DisplayName, context.ActionDescriptor.DisplayName)); await next(); } else { await next(); } } } // Endpoint Filter (Minimal API) public class ObsoleteEndpointFilter : IEndpointFilter { public async ValueTask\u0026lt;object?\u0026gt; InvokeAsync(EndpointFilterInvocationContext context, EndpointFilterDelegate next) { var endpoint = context.HttpContext.GetEndpoint(); if (endpoint is not null) { var obsoleteAttribute = endpoint.Metadata.OfType\u0026lt;ObsoleteAttribute\u0026gt;().FirstOrDefault(); if (obsoleteAttribute is not null) { // Enrich current span var activity = context.HttpContext.Features.Get\u0026lt;IHttpActivityFeature\u0026gt;()?.Activity; activity.EnrichWithEndpoint(endpoint, context.HttpContext); // Emit custom metric DiagnosticConfig.ObsoleteEndpointCounter.Add(1, new KeyValuePair\u0026lt;string, object?\u0026gt;(DiagnosticNames.DisplayName, endpoint.DisplayName)); return await next(context); } } return await next(context); } } A special thank you to Martin Thwaites for reviewing and suggesting how to improve the OTel emitting code.\nRegistering the filter # Now that we created the filter(s), we need to make sure ASP.NET Core executes our filters during the HTTP Require pipeline, we achieve this by registering the filter(s). MVC and Minimal API have two different ways of registering a filter, in MVC you can do it in several ways, but if you want to apply the filter globally (so that it runs for every HTTP request), you can do the following:\nbuilder.Services.AddControllers(opt =\u0026gt; { opt.Filters.Add\u0026lt;ObsoleteActionFilter\u0026gt;(); }); Whilst in Minimal API there\u0026rsquo;s no easy way to register a global endpoint filter so in my case I\u0026rsquo;m adding it to the single endpoint in this way:\napp.MapGet(\u0026#34;/weatherforecast\u0026#34;, [Obsolete]() =\u0026gt; WeatherGenerator.Generate()) .AddEndpointFilter\u0026lt;ObsoleteEndpointFilter\u0026gt;() // \u0026lt;-- Filter added here .WithTags(\u0026#34;MinimalApi\u0026#34;); there are some clever tricks you can do to register a filter globally, Khalid Abuhakmeh has written a nice post about it, you if you\u0026rsquo;re interested you can find more here\nVisualize the telemetry in the Aspire Dashboard # Our custom metrics telemetry gets exported to the Aspire Dashboard via the OLTP protocol and then shown as follows: Obsolete metrics As you can see I\u0026rsquo;m not adding many additional tags here, I\u0026rsquo;m just adding the display name that ASP.NET Core computes for the action/endpoint. This should be enough information to identify the called endpoint, but maybe you need some more information about the caller, to accomplish this I decided to also emit a custom span that I then enrich with the ActionExecutingContext/EndpointFilterInvocationContext with the following code:\npublic static class ActivityExtensions { public static void EnrichWithEndpoint(this Activity? activity, Endpoint endpoint, HttpContext httpContext) { activity?.SetTag(DiagnosticNames.Url, httpContext.Request.GetDisplayUrl()); activity?.SetTag(DiagnosticNames.DisplayName, endpoint.DisplayName); activity?.SetTag(DiagnosticNames.ObsoleteEndpoint, true); } public static void EnrichWithActionContext(this Activity? activity, ActionExecutingContext context) { activity?.SetTag(DiagnosticNames.Url, context.HttpContext.Request.GetDisplayUrl()); activity?.SetTag(DiagnosticNames.DisplayName, context.ActionDescriptor.DisplayName); activity?.SetTag(DiagnosticNames.ObsoleteEndpoint, true); } } This allows you to add all additional information your analysis will require.\nPlease be aware that\u0026rsquo;s quite easy to discose sensitive data in your APM of choice when adding for example the full URI, so beware of what tags you\u0026rsquo;re adding to the span. This is how the span will show in Aspire (Please note the addition of the ObsoleteEndpoint and DisplayUrl values): Obsolete trace Aspire, as of now (June 2024) is mostly a development time tool that allows you to quickly coordinate and run a distributed application.\nThe Aspire Dashboard is a standalone service that can potentially be deployed in production but, as of now, it only provides in-memory storage of telemetry and there\u0026rsquo;s no option to plug in a persistent storage mechanism.\nIn a production environment, you should probably rely on an industry-standard like Prometheus \u0026amp; Grafana to collect and visualize your metrics.\nReferences # https://www.youtube.com/watch?v=WzZI_IT6gYo\u0026amp;ab_channel=NDCConferences https://khalidabuhakmeh.com/global-endpoint-filters-with-aspnet-core-minimal-apis https://opentelemetry.io/docs/getting-started/dev/ https://learn.microsoft.com/en-us/dotnet/aspire/get-started/aspire-overview Conclusions # In this post, we went through several steps, from implementing controller/endpoint filters to emitting custom telemetry, we looked at how the telemetry will be visualized in the Aspire Dashboard. Those custom telemetry will allow us to inspect which and how often our deprecated API are being used which in turn allows us to make an informed decision and minimize the risk of involuntarily breaking clients.\nI hope you found this article helpful, that\u0026rsquo;s all for today till the next time!\n","date":"20 June 2024","externalUrl":null,"permalink":"/posts/obsolete-endpoints/","section":"Posts","summary":"It\u0026rsquo;s common to evolve HTTP APIs, and while it\u0026rsquo;s very easy to expose new and improved versions of a given functionality, not so much to safely obsolete and eventually remove an API.","title":"Telemetry-Driven API Evolution: Removing Obsolete Endpoints in ASP.NET Core","type":"posts"},{"content":"If you\u0026rsquo;re working with the Microsoft identity platform, you\u0026rsquo;re probably familiar with the concept of application Scopes or Roles. Scopes or Roles are used to either expose a permission in your application or to grant a permission (defined in another application) to it, e.g. grant Microsoft Graph permissions to read the user profile.\nWhen you\u0026rsquo;re granting permissions to an application, you need to understand what type of permission to grant: it can be a delegated (scope) permission or an app-only (role) one. If this part is confusing to you, I\u0026rsquo;ve found this page quite useful, especially the following paragraph:\nDelegated permissions, also called scopes, allow the application to act on behalf of the signed-in user. Application permissions, also called app roles, allow the app to access data on its own, without a signed-in user.\nOn top of understanding the differences between scope and roles, you also need to know the ID of the permission that you are interested in e.g. You want to grant GroupMember.Read.All to your application so you can fetch the members of a given group.\nThe issue I found working with these IDS is that I\u0026rsquo;m not able to find a comprehensive list of those, alongside their name and description so I decided to list them in this blog post, mostly to simplify my life when working with it.\nActually while writing this article, I found this page where the same permissions are listed, but I still find the following tables handier since they contains all the data I need.\nBesides that, I also wanted to share a tiny az cli command that you can use to fetch all the defined scopes and roles.\naz ad sp show --id 00000003-0000-0000-c000-000000000000 --query \u0026#34;{roles: appRoles, scopes: oauth2PermissionScopes}\u0026#34; The snippet above displays all the roles and scope defined for the Microsoft Graph application, the 00000003-0000-0000-c000-000000000000 is the globally unique ID of the Microsoft Graph Service principal in the Azure Active directory.\nPro tip! If you add -o jsonc at the end of an az cli command, you will get a nice colorized json output. You can find all the output modifiers for az cli in the documentation\nWell-known scopes # Here below you can find the list of all the well-known scopes defined by Microsoft Graph\nDescription Id Type Value Allows the app to read access reviews, reviewers, decisions and settings that the signed-in user has access to in the organization. ebfcd32b-babb-40f4-a14b-42706e83bd28 Admin AccessReview.Read.All Allows the app to read, update, delete and perform actions on access reviews, reviewers, decisions and settings that the signed-in user has access to in the organization. e4aa47b9-9a69-4109-82ed-36ec70d85ff1 Admin AccessReview.ReadWrite.All Allows the app to read, update, delete and perform actions on access reviews, reviewers, decisions and settings for group and app memberships that the signed-in user has access to in the organization. 5af8c3f5-baca-439a-97b0-ea58a435e269 Admin AccessReview.ReadWrite.Membership Allows an app to read all acronyms that the signed-in user can access. 9084c10f-a2d6-4713-8732-348def50fe02 User Acronym.Read.All Allows the app to read administrative units and administrative unit membership on behalf of the signed-in user. 3361d15d-be43-4de6-b441-3c746d05163d Admin AdministrativeUnit.Read.All Allows the app to create, read, update, and delete administrative units and manage administrative unit membership on behalf of the signed-in user. 7b8a2d34-6b3f-4542-a343-54651608ad81 Admin AdministrativeUnit.ReadWrite.All Allows the app to read terms of use agreements on behalf of the signed-in user. af2819c9-df71-4dd3-ade7-4d7c9dc653b7 Admin Agreement.Read.All Allows the app to read and write terms of use agreements on behalf of the signed-in user. ef4b5d93-3104-4664-9053-a5c49ab44218 Admin Agreement.ReadWrite.All Allows the app to read terms of use acceptance statuses on behalf of the signed-in user. 0b7643bb-5336-476f-80b5-18fbfbc91806 Admin AgreementAcceptance.Read Allows the app to read terms of use acceptance statuses on behalf of the signed-in user. a66a5341-e66e-4897-9d52-c2df58c2bfb9 Admin AgreementAcceptance.Read.All Allows the app to read the signed-in user\u0026rsquo;s activity statistics, such as how much time the user has spent on emails, in meetings, or in chat sessions. e03cf23f-8056-446a-8994-7d93dfc8b50e User Analytics.Read Allows the app to read the API connectors used in user authentication flows, on behalf of the signed-in user. 1b6ff35f-31df-4332-8571-d31ea5a4893f Admin APIConnectors.Read.All Allows the app to read, create and manage the API connectors used in user authentication flows, on behalf of the signed-in user. c67b52c5-7c69-48b6-9d48-7b3af3ded914 Admin APIConnectors.ReadWrite.All Allows the app to read the apps in the app catalogs. 88e58d74-d3df-44f3-ad47-e89edf4472e4 User AppCatalog.Read.All Allows the app to create, read, update, and delete apps in the app catalogs. 1ca167d5-1655-44a1-8adf-1414072e1ef9 Admin AppCatalog.ReadWrite.All Allows the app to submit application packages to the catalog and cancel submissions that are pending review on behalf of the signed-in user. 3db89e36-7fa6-4012-b281-85f3d9d9fd2e User AppCatalog.Submit Allows the app to read applications and service principals on behalf of the signed-in user. c79f8feb-a9db-4090-85f9-90d820caa0eb Admin Application.Read.All Allows the app to create, read, update and delete applications and service principals on behalf of the signed-in user. Does not allow management of consent grants. bdfbf15f-ee85-4955-8675-146e8e5296b5 Admin Application.ReadWrite.All Allows the app to manage permission grants for application permissions to any API (including Microsoft Graph) and application assignments for any app, on behalf of the signed-in user. 84bccea3-f856-4a8a-967b-dbe0a3d53a64 Admin AppRoleAssignment.ReadWrite.All Allows the app to read attack simulation and training data for an organization for the signed-in user. 104a7a4b-ca76-4677-b7e7-2f4bc482f381 Admin AttackSimulation.Read.All Allows the app to read, create, and update attack simulation and training data for an organization for the signed-in user. 27608d7c-2c66-4cad-a657-951d575f5a60 User AttackSimulation.ReadWrite.All Allows the app to read and query your audit log activities, on behalf of the signed-in user. e4c9e354-4dc5-45b8-9e7c-e1393b0b1a20 Admin AuditLog.Read.All Allows the app to read all authentication context information in your organization on behalf of the signed-in user. 57b030f1-8c35-469c-b0d9-e4a077debe70 Admin AuthenticationContext.Read.All Allows the app to read and update all authentication context information in your organization on behalf of the signed-in user. ba6d575a-1344-4516-b777-1404f5593057 Admin AuthenticationContext.ReadWrite.All Allows the app to read and write the billing configuration on all applications on behalf of the signed-in user. 2bf6d319-dfca-4c22-9879-f88dcfaee6be Admin BillingConfiguration.ReadWrite.All Allows the app to read BitLocker keys on behalf of the signed-in user, for their owned devices. Allows read of the recovery key. b27a61ec-b99c-4d6a-b126-c4375d08ae30 Admin BitlockerKey.Read.All Allows the app to read basic BitLocker key properties on behalf of the signed-in user, for their owned devices. Does not allow read of the recovery key itself. 5a107bfc-4f00-4e1a-b67e-66451267bc68 Admin BitlockerKey.ReadBasic.All Allows an app to read, write and manage bookings appointments, businesses, customers, services, and staff on behalf of the signed-in user. 7f36b48e-542f-4d3b-9bcb-8406f0ab9fdb User Bookings.Manage.All Allows an app to read bookings appointments, businesses, customers, services, and staff on behalf of the signed-in user. 33b1df99-4b29-4548-9339-7a7b83eaeebc User Bookings.Read.All Allows an app to read and write bookings appointments, businesses, customers, services, and staff on behalf of the signed-in user. Does not allow create, delete and publish of booking businesses. 948eb538-f19d-4ec5-9ccc-f059e1ea4c72 User Bookings.ReadWrite.All Allows an app to read and write bookings appointments and customers, and additionally allows read businesses information, services, and staff on behalf of the signed-in user. 02a5a114-36a6-46ff-a102-954d89d9ab02 User BookingsAppointment.ReadWrite.All Allows an app to read all bookmarks that the signed-in user can access. 98b17b35-f3b1-4849-a85f-9f13733002f0 User Bookmark.Read.All Allows an app to read the browser site lists configured for your organization, on behalf of the signed-in user. fb9be2b7-a7fc-4182-aec1-eda4597c43d5 User BrowserSiteLists.Read.All Allows an app to read and write the browser site lists configured for your organization, on behalf of the signed-in user. 83b34c85-95bf-497b-a04e-b58eca9d49d0 User BrowserSiteLists.ReadWrite.All Allows the app to read the configurations of your organization\u0026rsquo;s business scenarios, on behalf of the signed-in user. d16480b2-e469-4118-846b-d3d177327bee Admin BusinessScenarioConfig.Read.All Allows the app to read the configurations of business scenarios it owns, on behalf of the signed-in user. c47e7b6e-d6f1-4be9-9ffd-1e00f3e32892 Admin BusinessScenarioConfig.Read.OwnedBy Allows the app to read and write the configurations of your organization\u0026rsquo;s business scenarios, on behalf of the signed-in user. 755e785b-b658-446f-bb22-5a46abd029ea Admin BusinessScenarioConfig.ReadWrite.All Allows the app to create new business scenarios and fully manage the configurations of scenarios it owns, on behalf of the signed-in user. b3b7fcff-b4d4-4230-bf6f-90bd91285395 Admin BusinessScenarioConfig.ReadWrite.OwnedBy Allows the app to read all data associated with the business scenarios it owns. Data access will be attributed to the signed-in user. 25b265c4-5d34-4e44-952d-b567f6d3b96d Admin BusinessScenarioData.Read.OwnedBy Allows the app to fully manage all data associated with the business scenarios it owns. Data access and changes will be attributed to the signed-in user. 19932d57-2952-4c60-8634-3655c79fc527 Admin BusinessScenarioData.ReadWrite.OwnedBy Allows the app to read events in user calendars . 465a38f9-76ea-45b9-9f34-9e8b0d4b0b42 User Calendars.Read Allows the app to read events in all calendars that the user can access, including delegate and shared calendars. 2b9c4092-424d-4249-948d-b43879977640 User Calendars.Read.Shared Allows the app to read events in user calendars, except for properties such as body, attachments, and extensions. 662d75ba-a364-42ad-adee-f5f880ea4878 Admin Calendars.ReadBasic Allows the app to create, read, update, and delete events in user calendars. 1ec239c2-d7c9-4623-a91a-a9775856bb36 User Calendars.ReadWrite Allows the app to create, read, update and delete events in all calendars in the organization user has permissions to access. This includes delegate and shared calendars. 12466101-c9b8-439a-8589-dd09ee67e8e9 User Calendars.ReadWrite.Shared Create channels in any team, on behalf of the signed-in user. 101147cf-4178-4455-9d58-02b5c164e759 Admin Channel.Create Delete channels in any team, on behalf of the signed-in user. cc83893a-e232-4723-b5af-bd0b01bcfe65 Admin Channel.Delete.All Read channel names and channel descriptions, on behalf of the signed-in user. 9d8982ae-4365-4f57-95e9-d6032a4c0b87 User Channel.ReadBasic.All Read the members of channels, on behalf of the signed-in user. 2eadaff8-0bce-4198-a6b9-2cfc35a30075 Admin ChannelMember.Read.All Add and remove members from channels, on behalf of the signed-in user. Also allows changing a member\u0026rsquo;s role, for example from owner to non-owner. 0c3e411a-ce45-4cd1-8f30-f99a3efa7b11 Admin ChannelMember.ReadWrite.All Allows an app to edit channel messages in Microsoft Teams, on behalf of the signed-in user. 2b61aa8a-6d36-4b2f-ac7b-f29867937c53 User ChannelMessage.Edit Allows an app to read a channel\u0026rsquo;s messages in Microsoft Teams, on behalf of the signed-in user. 767156cb-16ae-4d10-8f8b-41b657c8c8c8 Admin ChannelMessage.Read.All Allows the app to read and write channel messages, on behalf of the signed-in user. This doesn\u0026rsquo;t allow the app to edit the policyViolation of a channel message. 5922d31f-46c8-4404-9eaf-2117e390a8a4 Admin ChannelMessage.ReadWrite Allows an app to send channel messages in Microsoft Teams, on behalf of the signed-in user. ebf0f66e-9fb1-49e4-a278-222f76911cf4 User ChannelMessage.Send Read all channel names, channel descriptions, and channel settings, on behalf of the signed-in user. 233e0cf1-dd62-48bc-b65b-b38fe87fcf8e Admin ChannelSettings.Read.All Read and write the names, descriptions, and settings of all channels, on behalf of the signed-in user. d649fb7c-72b4-4eec-b2b4-b15acf79e378 Admin ChannelSettings.ReadWrite.All Allows the app to create chats on behalf of the signed-in user. 38826093-1258-4dea-98f0-00003be2b8d0 User Chat.Create Allows an app to read 1 on 1 or group chats threads, on behalf of the signed-in user. f501c180-9344-439a-bca0-6cbf209fd270 User Chat.Read Allows an app to read the members and descriptions of one-to-one and group chat threads, on behalf of the signed-in user. 9547fcb5-d03f-419d-9948-5928bbf71b0f User Chat.ReadBasic Allows an app to read and write 1 on 1 or group chats threads, on behalf of the signed-in user. 9ff7295e-131b-4d94-90e1-69fde507ac11 User Chat.ReadWrite Read the members of chats, on behalf of the signed-in user. c5a9e2b1-faf6-41d4-8875-d381aa549b24 Admin ChatMember.Read Add and remove members from chats, on behalf of the signed-in user. dea13482-7ea6-488f-8b98-eb5bbecf033d Admin ChatMember.ReadWrite Allows an app to read one-to-one and group chat messages, on behalf of the signed-in user. cdcdac3a-fd45-410d-83ef-554db620e5c7 User ChatMessage.Read Allows an app to send one-to-one and group chat messages in Microsoft Teams, on behalf of the signed-in user. 116b7235-7cc6-461e-b163-8e55691d839e User ChatMessage.Send Allows the app to read the properties of Cloud PCs on behalf of the signed-in user. 5252ec4e-fd40-4d92-8c68-89dd1d3c6110 User CloudPC.Read.All Allows the app to read and write the properties of Cloud PCs on behalf of the signed-in user. 9d77138f-f0e2-47ba-ab33-cd246c8b79d1 Admin CloudPC.ReadWrite.All Allows the app to read consent requests and approvals on behalf of the signed-in user. f3bfad56-966e-4590-a536-82ecf548ac1e Admin ConsentRequest.Read.All Allows the app to read app consent requests and approvals, and deny or approve those requests on behalf of the signed-in user. 497d9dfa-3bd1-481a-baab-90895e54568c Admin ConsentRequest.ReadWrite.All Allows the app to read user contacts. ff74d97f-43af-4b68-9f2a-b77ee6968c5d User Contacts.Read Allows the app to read contacts a user has permissions to access, including their own and shared contacts. 242b9d9e-ed24-4d09-9a52-f43769beb9d4 User Contacts.Read.Shared Allows the app to create, read, update, and delete user contacts. d56682ec-c09e-4743-aaf4-1a3aac4caa21 User Contacts.ReadWrite Allows the app to create, read, update, and delete contacts a user has permissions to, including their own and shared contacts. afb6c84b-06be-49af-80bb-8f3f77004eab User Contacts.ReadWrite.Shared Allows the application to obtain basic tenant information about another target tenant within the Azure AD ecosystem on behalf of the signed-in user. 81594d25-e88e-49cf-ac8c-fecbff49f994 Admin CrossTenantInformation.ReadBasic.All Allows the application to list and query user profile information associated with the current tenant on behalf of the signed-in user. It also permits the application to export external user data (e.g. customer content or system-generated logs), associated with the current tenant on behalf of the signed-in user. cb1ba48f-d22b-4325-a07f-74135a62ee41 Admin CrossTenantUserProfileSharing.Read Allows the application to list and query any shared user profile information associated with the current tenant on behalf of the signed-in user. It also permits the application to export external user data (e.g. customer content or system-generated logs), for any user associated with the current tenant on behalf of the signed-in user. 759dcd16-3c90-463c-937e-abf89f991c18 Admin CrossTenantUserProfileSharing.Read.All Allows the application to list and query user profile information associated with the current tenant on behalf of the signed-in user. It also permits the application to export and remove external user data (e.g. customer content or system-generated logs), associated with the current tenant on behalf of the signed-in user. eed0129d-dc60-4f30-8641-daf337a39ffd Admin CrossTenantUserProfileSharing.ReadWrite Allows the application to list and query any shared user profile information associated with the current tenant on behalf of the signed-in user. It also permits the application to export and remove external user data (e.g. customer content or system-generated logs), for any user associated with the current tenant on behalf of the signed-in user. 64dfa325-cbf8-48e3-938d-51224a0cac01 Admin CrossTenantUserProfileSharing.ReadWrite.All Allows the app to read your organization\u0026rsquo;s custom authentication extensions on behalf of the signed-in user. b2052569-c98c-4f36-a5fb-43e5c111e6d0 Admin CustomAuthenticationExtension.Read.All Allows the app to read or write your organization\u0026rsquo;s custom authentication extensions on behalf of the signed-in user. 8dfcf82f-15d0-43b3-bc78-a958a13a5792 Admin CustomAuthenticationExtension.ReadWrite.All Allows the app to read custom security attribute assignments for all principals in the tenant on behalf of a signed in user. b46ffa80-fe3d-4822-9a1a-c200932d54d0 Admin CustomSecAttributeAssignment.Read.All Allows the app to read and write custom security attribute assignments for all principals in the tenant on behalf of a signed in user. ca46335e-8453-47cd-a001-8459884efeae Admin CustomSecAttributeAssignment.ReadWrite.All Allows the app to read custom security attribute definitions for the tenant on behalf of a signed in user. ce026878-a0ff-4745-a728-d4fedd086c07 Admin CustomSecAttributeDefinition.Read.All Allows the app to read and write custom security attribute definitions for the tenant on behalf of a signed in user. 8b0160d4-5743-482b-bb27-efc0a485ca4a Admin CustomSecAttributeDefinition.ReadWrite.All Allow the app to read the data loss prevention policies applicable to the signed-in user for protecting organizational data, on behalf of the signed-in user. d8e6b9ca-e874-47e3-8f52-222dc683f5ee Admin DataLossPrevention.Read Allows the app to read details of delegated admin relationships with customers like access details (that includes roles) and the duration as well as specific role assignments to security groups on behalf of the signed-in user. 0c0064ea-477b-4130-82a5-4c2cc4ff68aa Admin DelegatedAdminRelationship.Read.All Allows the app to manage (create-update-terminate) Delegated Admin relationships with customers as well as role assignments to security groups for active Delegated Admin relationships on behalf of the signed-in user. 885f682f-a990-4bad-a642-36736a74b0c7 Admin DelegatedAdminRelationship.ReadWrite.All Allows the app to manage permission grants for delegated permissions exposed by any API (including Microsoft Graph), on behalf of the signed in user. 41ce6ca6-6826-4807-84f1-1c82854f7ee5 Admin DelegatedPermissionGrant.ReadWrite.All Allows the app to launch another app or communicate with another app on a user\u0026rsquo;s device on behalf of the signed-in user. bac3b9c2-b516-4ef4-bd3b-c2ef73d8d804 User Device.Command Allows the app to read a user\u0026rsquo;s list of devices on behalf of the signed-in user. 11d4cd79-5ba5-460f-803f-e22c8ab85ccd User Device.Read Allows the app to read your organization\u0026rsquo;s devices\u0026rsquo; configuration information on behalf of the signed-in user. 951183d1-1a61-466f-a6d1-1fde911bfd95 Admin Device.Read.All Allows the app to read device local credential properties including passwords, on behalf of the signed-in user. 280b3b69-0437-44b1-bc20-3b2fca1ee3e9 Admin DeviceLocalCredential.Read.All Allows the app to read device local credential properties excluding passwords, on behalf of the signed-in user. 9917900e-410b-4d15-846e-42a357488545 Admin DeviceLocalCredential.ReadBasic.All Allows the app to read the properties, group assignments and status of apps, app configurations and app protection policies managed by Microsoft Intune. 4edf5f54-4666-44af-9de9-0144fb4b6e8c Admin DeviceManagementApps.Read.All Allows the app to read and write the properties, group assignments and status of apps, app configurations and app protection policies managed by Microsoft Intune. 7b3f05d5-f68c-4b8d-8c59-a2ecd12f24af Admin DeviceManagementApps.ReadWrite.All Allows the app to read properties of Microsoft Intune-managed device configuration and device compliance policies and their assignment to groups. f1493658-876a-4c87-8fa7-edb559b3476a Admin DeviceManagementConfiguration.Read.All Allows the app to read and write properties of Microsoft Intune-managed device configuration and device compliance policies and their assignment to groups. 0883f392-0a7a-443d-8c76-16a6d39c7b63 Admin DeviceManagementConfiguration.ReadWrite.All Allows the app to perform remote high impact actions such as wiping the device or resetting the passcode on devices managed by Microsoft Intune. 3404d2bf-2b13-457e-a330-c24615765193 Admin DeviceManagementManagedDevices.PrivilegedOperations.All Allows the app to read the properties of devices managed by Microsoft Intune. 314874da-47d6-4978-88dc-cf0d37f0bb82 Admin DeviceManagementManagedDevices.Read.All Allows the app to read and write the properties of devices managed by Microsoft Intune. Does not allow high impact operations such as remote wipe and password reset on the devices owner. 44642bfe-8385-4adc-8fc6-fe3cb2c375c3 Admin DeviceManagementManagedDevices.ReadWrite.All Allows the app to read the properties relating to the Microsoft Intune Role-Based Access Control (RBAC) settings. 49f0cc30-024c-4dfd-ab3e-82e137ee5431 Admin DeviceManagementRBAC.Read.All Allows the app to read and write the properties relating to the Microsoft Intune Role-Based Access Control (RBAC) settings. 0c5e8a55-87a6-4556-93ab-adc52c4d862d Admin DeviceManagementRBAC.ReadWrite.All Allows the app to read Microsoft Intune service properties including device enrollment and third party service connection configuration. 8696daa5-bce5-4b2e-83f9-51b6defc4e1e Admin DeviceManagementServiceConfig.Read.All Allows the app to read and write Microsoft Intune service properties including device enrollment and third party service connection configuration. 662ed50a-ac44-4eef-ad86-62eed9be2a29 Admin DeviceManagementServiceConfig.ReadWrite.All Allows the app to have the same access to information in the directory as the signed-in user. 0e263e50-5827-48a4-b97c-d940288653c7 Admin Directory.AccessAsUser.All Allows the app to read data in your organization\u0026rsquo;s directory, such as users, groups and apps. 06da0dbc-49e2-44d2-8312-53f166ab848a Admin Directory.Read.All Allows the app to read and write data in your organization\u0026rsquo;s directory, such as users, and groups. It does not allow the app to delete users or groups, or reset user passwords. c5366453-9fb0-48a5-a156-24f0c49a4b84 Admin Directory.ReadWrite.All Allows the app to manage restricted resources based on the other permissions granted to the app, on behalf of the signed-in user. cba5390f-ed6a-4b7f-b657-0efc2210ed20 Admin Directory.Write.Restricted Allows the app to read Azure AD recommendations, on behalf of the signed-in user. 34d3bd24-f6a6-468c-b67c-0c365c1d6410 Admin DirectoryRecommendations.Read.All Allows the app to read and update Azure AD recommendations, on behalf of the signed-in user. f37235e8-90a0-4189-93e2-e55b53867ccd Admin DirectoryRecommendations.ReadWrite.All Allows the app to read all domain properties on behalf of the signed-in user. 2f9ee017-59c1-4f1d-9472-bd5529a7b311 Admin Domain.Read.All Allows the app to read and write all domain properties on behalf of the signed-in user. Also allows the app to add, verify and remove domains. 0b5d694c-a244-4bde-86e6-eb5cd07730fe Admin Domain.ReadWrite.All Allows the app to have the same access to mailboxes as the signed-in user via Exchange ActiveSync. ff91d191-45a0-43fd-b837-bd682c4a0b0f User EAS.AccessAsUser.All Allows the app to read eDiscovery objects such as cases, custodians, review sets and other related objects on behalf of the signed-in user. 99201db3-7652-4d5a-809a-bdb94f85fe3c Admin eDiscovery.Read.All Allows the app to read and write eDiscovery objects such as cases, custodians, review sets and other related objects on behalf of the signed-in user. acb8f680-0834-4146-b69e-4ab1b39745ad Admin eDiscovery.ReadWrite.All Read the state and settings of all Microsoft education apps on behalf of the user. 8523895c-6081-45bf-8a5d-f062a2f12c9f Admin EduAdministration.Read Manage the state and settings of all Microsoft education apps on behalf of the user. 63589852-04e3-46b4-bae9-15d5b1050748 Admin EduAdministration.ReadWrite Allows the app to read assignments and their grades on behalf of the user. 091460c9-9c4a-49b2-81ef-1f3d852acce2 Admin EduAssignments.Read Allows the app to read assignments without grades on behalf of the user. c0b0103b-c053-4b2e-9973-9f3a544ec9b8 Admin EduAssignments.ReadBasic Allows the app to read and write assignments and their grades on behalf of the user. 2f233e90-164b-4501-8bce-31af2559a2d3 Admin EduAssignments.ReadWrite Allows the app to read and write assignments without grades on behalf of the user. 2ef770a1-622a-47c4-93ee-28d6adbed3a0 Admin EduAssignments.ReadWriteBasic Allows the app to read the structure of schools and classes in an organization\u0026rsquo;s roster and education-specific information about users to be read on behalf of the user. a4389601-22d9-4096-ac18-36a927199112 Admin EduRoster.Read Allows the app to read a limited subset of the properties from the structure of schools and classes in an organization\u0026rsquo;s roster and a limited subset of properties about users to be read on behalf of the user.Includes name, status, education role, email address and photo. 5d186531-d1bf-4f07-8cea-7c42119e1bd9 Admin EduRoster.ReadBasic Allows the app to read and write the structure of schools and classes in an organization\u0026rsquo;s roster and education-specific information about users to be read and written on behalf of the user. 359e19a6-e3fa-4d7f-bcab-d28ec592b51e Admin EduRoster.ReadWrite Allows the app to read your users\u0026rsquo; primary email address 64a6cdd6-aab1-4aaf-94b8-3cc8405e90d0 User email Allows the app to read access packages and related entitlement management resources on behalf of the signed-in user. 5449aa12-1393-4ea2-a7c7-d0e06c1a56b2 Admin EntitlementManagement.Read.All Allows the app to request access to and management of access packages and related entitlement management resources on behalf of the signed-in user. ae7a573d-81d7-432b-ad44-4ed5c9d89038 Admin EntitlementManagement.ReadWrite.All Allows the app to manage self-service entitlement management resources on behalf of the signed-in user. This includes operations such as requesting access and approving access of others. e9fdcbbb-8807-410f-b9ec-8d5468c7c2ac User EntitlementMgmt-SubjectAccess.ReadWrite Allows the app to read your organization\u0026rsquo;s authentication event listeners on behalf of the signed-in user. f7dd3bed-5eec-48da-bc73-1c0ef50bc9a1 Admin EventListener.Read.All Allows the app to read or write your organization\u0026rsquo;s authentication event listeners on behalf of the signed-in user. d11625a6-fe21-4fc6-8d3d-063eba5525ad Admin EventListener.ReadWrite.All Allows the app to have the same access to mailboxes as the signed-in user via Exchange Web Services. 9769c687-087d-48ac-9cb3-c37dde652038 User EWS.AccessAsUser.All Allows the app to read all external connections on behalf of a signed-in user. The signed-in user must be an administrator. a38267a5-26b6-4d76-9493-935b7599116b Admin ExternalConnection.Read.All Allows the app to read and write all external connections on behalf of a signed-in user. The signed-in user must be an administrator. bbbbd9b3-3566-4931-ac37-2b2180d9e334 Admin ExternalConnection.ReadWrite.All Allows the app to read and write settings of external connections on behalf of a signed-in user. The signed-in user must be an administrator. The app can only read and write settings of connections that it is authorized to. 4082ad95-c812-4f02-be92-780c4c4f1830 Admin ExternalConnection.ReadWrite.OwnedBy Allow the app to read external datasets and content, on behalf of the signed-in user. 922f9392-b1b7-483c-a4be-0089be7704fb Admin ExternalItem.Read.All Allows the app to read and write all external items on behalf of a signed-in user. The signed-in user must be an administrator. b02c54f8-eb48-4c50-a9f0-a149e5a2012f Admin ExternalItem.ReadWrite.All Allows the app to read and write external items on behalf of a signed-in user. The signed-in user must be an administrator. The app can only read external items of the connection that it is authorized to. 4367b9d7-cee7-4995-853c-a0bdfe95c1f9 Admin ExternalItem.ReadWrite.OwnedBy Allows the app to read your family information, members and their basic profile. 3a1e4806-a744-4c70-80fc-223bf8582c46 User Family.Read Allows the app to read the signed-in user\u0026rsquo;s files. 10465720-29dd-4523-a11a-6a75c743c9d9 User Files.Read Allows the app to read all files the signed-in user can access. df85f4d6-205c-4ac5-a5ea-6bf408dba283 User Files.Read.All (Preview) Allows the app to read files that the user selects. The app has access for several hours after the user selects a file. 5447fe39-cb82-4c1a-b977-520e67e724eb User Files.Read.Selected Allows the app to read, create, update and delete the signed-in user\u0026rsquo;s files. 5c28f0bf-8a70-41f1-8ab2-9032436ddb65 User Files.ReadWrite Allows the app to read, create, update and delete all files the signed-in user can access. 863451e7-0667-486c-a5d6-d135439485f0 User Files.ReadWrite.All (Preview) Allows the app to read, create, update and delete files in the application\u0026rsquo;s folder. 8019c312-3263-48e6-825e-2b833497195b User Files.ReadWrite.AppFolder (Preview) Allows the app to read and write files that the user selects. The app has access for several hours after the user selects a file. 17dde5bd-8c17-420f-a486-969730c1b827 User Files.ReadWrite.Selected Allows the app to read and write financials data on behalf of the signed-in user. f534bf13-55d4-45a9-8f3c-c92fe64d6131 User Financials.ReadWrite.All Allows the app to list groups, and to read their properties and all group memberships on behalf of the signed-in user. Also allows the app to read calendar, conversations, files, and other group content for all groups the signed-in user can access. 5f8c59db-677d-491f-a6b8-5f174b11ec1d Admin Group.Read.All Allows the app to create groups and read all group properties and memberships on behalf of the signed-in user. Additionally allows group owners to manage their groups and allows group members to update group content. 4e46008b-f24c-477d-8fff-7bb4ec7aafe0 Admin Group.ReadWrite.All Allows the app to list groups, read basic group properties and read membership of all groups the signed-in user has access to. bc024368-1153-4739-b217-4326f2e966d0 Admin GroupMember.Read.All Allows the app to list groups, read basic properties, read and update the membership of the groups the signed-in user has access to. Group properties and owners cannot be updated and groups cannot be deleted. f81125ac-d3b7-4573-a3b2-7099cc39df9e Admin GroupMember.ReadWrite.All Allows the app to read your organizations identity (authentication) providers properties on behalf of the user. 43781733-b5a7-4d1b-98f4-e8edff23e1a9 Admin IdentityProvider.Read.All Allows the app to read and write your organizations identity (authentication) providers properties on behalf of the user. f13ce604-1677-429f-90bd-8a10b9f01325 Admin IdentityProvider.ReadWrite.All Allows the app to read identity risk event information for all users in your organization on behalf of the signed-in user. 8f6a01e7-0391-4ee5-aa22-a3af122cef27 Admin IdentityRiskEvent.Read.All Allows the app to read and update identity risk event information for all users in your organization on behalf of the signed-in user.Update operations include confirming risk event detections. 9e4862a5-b68f-479e-848a-4e07e25c9916 Admin IdentityRiskEvent.ReadWrite.All Allows the app to read all identity risky service principal information for your organization, on behalf of the signed-in user. ea5c4ab0-5a73-4f35-8272-5d5337884e5d Admin IdentityRiskyServicePrincipal.Read.All Allows the app to read and update identity risky service principal information for all service principals in your organization, on behalf of the signed-in user. Update operations include dismissing risky service principals. bb6f654c-d7fd-4ae3-85c3-fc380934f515 Admin IdentityRiskyServicePrincipal.ReadWrite.All Allows the app to read identity risky user information for all users in your organization on behalf of the signed-in user. d04bb851-cb7c-4146-97c7-ca3e71baf56c Admin IdentityRiskyUser.Read.All Allows the app to read and update identity risky user information for all users in your organization on behalf of the signed-in user.Update operations include dismissing risky users. e0a7cdbb-08b0-4697-8264-0069786e9674 Admin IdentityRiskyUser.ReadWrite.All Allows the app to read your organization\u0026rsquo;s user flows, on behalf of the signed-in user. 2903d63d-4611-4d43-99ce-a33f3f52e343 Admin IdentityUserFlow.Read.All Allows the app to read or write your organization\u0026rsquo;s user flows, on behalf of the signed-in user. 281892cc-4dbf-4e3a-b6cc-b21029bb4e82 Admin IdentityUserFlow.ReadWrite.All Allows the app to have the same access to mailboxes as the signed-in user via IMAP protocol. 652390e4-393a-48de-9484-05f9b1212954 User IMAP.AccessAsUser.All Allows the app to read data connectors on behalf of the signed-in user. d19c0de5-7ecb-4aba-b090-da35ebcd5425 Admin IndustryData-DataConnector.Read.All Allows the app to read and write data connectors on behalf of the signed-in user. 5ce933ac-3997-4280-aed0-cc072e5c062a Admin IndustryData-DataConnector.ReadWrite.All Allows the app to upload data files to a data connector on behalf of the signed-in user. fc47391d-ab2c-410f-9059-5600f7af660d Admin IndustryData-DataConnector.Upload Allows the app to read inbound data flows on behalf of the signed-in user. cb0774da-a605-42af-959c-32f438fb38f4 Admin IndustryData-InboundFlow.Read.All Allows the app to read and write inbound data flows on behalf of the signed-in user. 97044676-2cec-40ee-bd70-38df444c9e70 Admin IndustryData-InboundFlow.ReadWrite.All Allows the app to read reference definitions on behalf of the signed-in user. a3f96ffe-cb84-40a8-ac85-582d7ef97c2a Admin IndustryData-ReferenceDefinition.Read.All Allows the app to read current and previous IndustryData runs on behalf of the signed-in user. 92685235-50c4-4702-b2c8-36043db6fa79 Admin IndustryData-Run.Read.All Allows the app to read source system definitions on behalf of the signed-in user. 49b7016c-89ae-41e7-bd6f-b7170c5490bf Admin IndustryData-SourceSystem.Read.All Allows the app to read and write source system definitions on behalf of the signed-in user. 9599f005-05d6-4ea7-b1b1-4929768af5d0 Admin IndustryData-SourceSystem.ReadWrite.All Allows the app to read time period definitions on behalf of the signed-in user. c9d51f28-8ccd-42b2-a836-fd8fe9ebf2ae Admin IndustryData-TimePeriod.Read.All Allows the app to read and write time period definitions on behalf of the signed-in user. b6d56528-3032-4f9d-830f-5a24a25e6661 Admin IndustryData-TimePeriod.ReadWrite.All Allows the app to read basic Industry Data service and resource information on behalf of the signed-in user. 60382b96-1f5e-46ea-a544-0407e489e588 User IndustryData.ReadBasic.All Allows the app to read the configurations applicable to the signed-in user for protecting organizational data, on behalf of the signed-in user. 12f4bffb-b598-413c-984b-db99728f8b54 Admin InformationProtectionConfig.Read Allows an app to read information protection sensitivity labels and label policy settings, on behalf of the signed-in user. 4ad84827-5578-4e18-ad7a-86530b12f884 User InformationProtectionPolicy.Read Allows the app to read learning content in the organization\u0026rsquo;s directory, on behalf of the signed-in user. ea4c1fd9-6a9f-4432-8e5d-86e06cc0da77 Admin LearningContent.Read.All Allowstheapptomanage learningcontentintheorganization\u0026rsquo;sdirectory, on behalf of the signed-in user. 53cec1c4-a65f-4981-9dc1-ad75dbf1c077 Admin LearningContent.ReadWrite.All Allows the app to read data for the learning provider in the organization\u0026rsquo;s directory, on behalf of the signed-in user. dd8ce36f-9245-45ea-a99e-8ac398c22861 Admin LearningProvider.Read Allows the app to create, update, read, and delete data for the learning provider in the organization\u0026rsquo;s directory, on behalf of the signed-in user. 40c2eb57-abaf-49f5-9331-e90fd01f7130 Admin LearningProvider.ReadWrite Allows an app to manage license assignments for users and groups, on behalf of the signed-in user. f55016cc-149c-447e-8f21-7cf3ec1d6350 Admin LicenseAssignment.ReadWrite.All Allows the app to list and read all workflows, tasks and related lifecycle workflows resources on behalf of the signed-in user. 9bcb9916-765a-42af-bf77-02282e26b01a Admin LifecycleWorkflows.Read.All Allows the app to create, update, list, read and delete all workflows, tasks and related lifecycle workflows resources on behalf of the signed-in user. 84b9d731-7db8-4454-8c90-fd9e95350179 Admin LifecycleWorkflows.ReadWrite.All Allows the app to read the signed-in user\u0026rsquo;s mailbox. 570282fd-fa5c-430d-a7fd-fc8dc98a9dca User Mail.Read Allows the app to read mail a user can access, including their own and shared mail. 7b9103a5-4610-446b-9670-80643382c1fa User Mail.Read.Shared Allows the app to read email in the signed-in user\u0026rsquo;s mailbox except body, previewBody, attachments and any extended properties. a4b8392a-d8d1-4954-a029-8e668a39a170 User Mail.ReadBasic Allows the app to read mail the signed-in user can access, including their own and shared mail, except for body, bodyPreview, uniqueBody, attachments, extensions, and any extended properties. b11fa0e7-fdb7-4dc9-b1f1-59facd463480 User Mail.ReadBasic.Shared Allows the app to create, read, update, and delete email in user mailboxes. Does not include permission to send mail. 024d486e-b451-40bb-833d-3e66d98c5c73 User Mail.ReadWrite Allows the app to create, read, update, and delete mail a user has permission to access, including their own and shared mail. Does not include permission to send mail. 5df07973-7d5d-46ed-9847-1271055cbd51 User Mail.ReadWrite.Shared Allows the app to send mail as users in the organization. e383f46e-2787-4529-855e-0e479a3ffac0 User Mail.Send Allows the app to send mail as the signed-in user, including sending on-behalf of others. a367ab51-6b49-43bf-a716-a1fb06d2a174 User Mail.Send.Shared Allows the app to the read user\u0026rsquo;s mailbox settings. Does not include permission to send mail. 87f447af-9fa4-4c32-9dfa-4a57a73d18ce User MailboxSettings.Read Allows the app to create, read, update, and delete user\u0026rsquo;s mailbox settings. Does not include permission to send mail. 818c620a-27a9-40bd-a6a5-d96f7d610b4b User MailboxSettings.ReadWrite Allows the app to read all managed tenant information on behalf of the signed-in user. dc34164e-6c4a-41a0-be89-3ae2fbad7cd3 Admin ManagedTenants.Read.All Allows the app to read and write all managed tenant information on behalf of the signed-in user. b31fa710-c9b3-4d9e-8f5e-8036eecddab9 Admin ManagedTenants.ReadWrite.All Allows the app to read the memberships of hidden groups and administrative units on behalf of the signed-in user, for those hidden groups and administrative units that the signed-in user has access to. f6a3db3e-f7e8-4ed2-a414-557c8c9830be Admin Member.Read.Hidden Allows the app to read your organization\u0026rsquo;s branches for network access on behalf of the signed-in user. 4051c7fc-b429-4804-8d80-8f1f8c24a6f7 User NetworkAccessBranch.Read.All Allows the app to read and write your organization\u0026rsquo;s branches for network access on behalf of the signed-in user. b8a36cc2-b810-461a-baa4-a7281e50bd5c Admin NetworkAccessBranch.ReadWrite.All Allows the app to read your organization\u0026rsquo;s security and routing network access policies on behalf of the signed-in user. ba22922b-752c-446f-89d7-a2d92398fceb User NetworkAccessPolicy.Read.All Allows the app to read and write your organization\u0026rsquo;s security and routing network access policies on behalf of the signed-in user. b1fbad0f-ef6e-42ed-8676-bca7fa3e7291 Admin NetworkAccessPolicy.ReadWrite.All Allows the app to read the titles of OneNote notebooks and sections and to create new pages, notebooks, and sections on behalf of the signed-in user. 9d822255-d64d-4b7a-afdb-833b9a97ed02 User Notes.Create Allows the app to read OneNote notebooks on behalf of the signed-in user. 371361e4-b9e2-4a3f-8315-2a301a3b0a3d User Notes.Read Allows the app to read OneNote notebooks that the signed-in user has access to in the organization. dfabfca6-ee36-4db2-8208-7a28381419b3 User Notes.Read.All Allows the app to read, share, and modify OneNote notebooks on behalf of the signed-in user. 615e26af-c38a-4150-ae3e-c3b0d4cb1d6a User Notes.ReadWrite Allows the app to read, share, and modify OneNote notebooks that the signed-in user has access to in the organization. 64ac0503-b4fa-45d9-b544-71a463f05da0 User Notes.ReadWrite.All This is deprecated! Do not use! This permission no longer has any effect. You can safely consent to it. No additional privileges will be granted to the app. ed68249d-017c-4df5-9113-e684c7f8760b User Notes.ReadWrite.CreatedByApp Allows the app to deliver its notifications on behalf of signed-in users. Also allows the app to read, update, and delete the user\u0026rsquo;s notification items for this app. 89497502-6e42-46a2-8cb2-427fd3df970a User Notifications.ReadWrite.CreatedByApp Allows the app to see and update the data you gave it access to, even when users are not currently using the app. This does not give the app any additional permissions. 7427e0e9-2fba-42fe-b0c0-848c9e6a8182 User offline_access Allows the app to read online meeting artifacts on behalf of the signed-in user. 110e5abb-a10c-4b59-8b55-9b4daa4ef743 User OnlineMeetingArtifact.Read.All Allows the app to read all recordings of online meetings, on behalf of the signed-in user. 190c2bb6-1fdd-4fec-9aa2-7d571b5e1fe3 Admin OnlineMeetingRecording.Read.All Allows the app to read online meeting details on behalf of the signed-in user. 9be106e1-f4e3-4df5-bdff-e4bc531cbe43 User OnlineMeetings.Read Allows the app to read and create online meetings on behalf of the signed-in user. a65f2972-a4f8-4f5e-afd7-69ccb046d5dc User OnlineMeetings.ReadWrite Allows the app to read all transcripts of online meetings, on behalf of the signed-in user. 30b87d18-ebb1-45db-97f8-82ccb1f0190c Admin OnlineMeetingTranscript.Read.All Allows the app to read all on-premises directory synchronization information for the organization, on behalf of the signed-in user. f6609722-4100-44eb-b747-e6ca0536989d Admin OnPremDirectorySynchronization.Read.All Allows the app to read and write all on-premises directory synchronization information for the organization, on behalf of the signed-in user. c2d95988-7604-4ba1-aaed-38a5f82a51c7 Admin OnPremDirectorySynchronization.ReadWrite.All Allows the app to manage hybrid identity service configuration by creating, viewing, updating and deleting on-premises published resources, on-premises agents and agent groups, on behalf of the signed-in user. 8c4d5184-71c2-4bf8-bb9d-bc3378c9ad42 Admin OnPremisesPublishingProfiles.ReadWrite.All Allows users to sign in to the app with their work or school accounts and allows the app to see basic user profile information. 37f7f235-527c-4136-accd-4a02d197296e User openid Allows the app to read the organization and related resources, on behalf of the signed-in user.Related resources include things like subscribed skus and tenant branding information. 4908d5b9-3fb2-4b1e-9336-1888b7937185 Admin Organization.Read.All Allows the app to read and write the organization and related resources, on behalf of the signed-in user.Related resources include things like subscribed skus and tenant branding information. 46ca0847-7e6b-426e-9775-ea810a948356 Admin Organization.ReadWrite.All Allows the app to read all organizational contacts on behalf of the signed-in user. These contacts are managed by the organization and are different from a user\u0026rsquo;s personal contacts. 08432d1b-5911-483c-86df-7980af5cdee0 Admin OrgContact.Read.All Allows the app to read a ranked list of relevant people of the signed-in user. The list includes local contacts, contacts from social networking, your organization\u0026rsquo;s directory, and people from recent communications (such as email and Skype). ba47897c-39ec-4d83-8086-ee8256fa737d User People.Read Allows the app to read a scored list of relevant people of the signed-in user or other users in the signed-in user\u0026rsquo;s organization. The list can include local contacts, contacts from social networking, your organization\u0026rsquo;s directory, and people from recent communications (such as email and Skype). b89f9189-71a5-4e70-b041-9887f0bc7e4a Admin People.Read.All Allows the app to read your company\u0026rsquo;s places (conference rooms and room lists) for calendar events and other applications, on behalf of the signed-in user. cb8f45a0-5c2e-4ea1-b803-84b870a7d7ec Admin Place.Read.All Allows the app to manage organization places (conference rooms and room lists) for calendar events and other applications, on behalf of the signed-in user. 4c06a06a-098a-4063-868e-5dfee3827264 Admin Place.ReadWrite.All Allows the app to read your organization\u0026rsquo;s policies on behalf of the signed-in user. 572fea84-0151-49b2-9301-11cb16974376 Admin Policy.Read.All Allows the app to read your organization\u0026rsquo;s conditional access policies on behalf of the signed-in user. 633e0fce-8c58-4cfb-9495-12bbd5a24f7c User Policy.Read.ConditionalAccess Allows the app to read policies related to consent and permission grants for applications, on behalf of the signed-in user. 414de6ea-2d92-462f-b120-6e2a809a6d01 Admin Policy.Read.PermissionGrant Allows the app to read and write your organization\u0026rsquo;s directory access review default policy on behalf of the signed-in user. 4f5bc9c8-ea54-4772-973a-9ca119cb0409 Admin Policy.ReadWrite.AccessReview Allows the app to read and write your organization\u0026rsquo;s application configuration policies on behalf of the signed-in user. This includes policies such as activityBasedTimeoutPolicy, claimsMappingPolicy, homeRealmDiscoveryPolicy, tokenIssuancePolicy and tokenLifetimePolicy. b27add92-efb2-4f16-84f5-8108ba77985c Admin Policy.ReadWrite.ApplicationConfiguration Allows the app to read and write the authentication flow policies, on behalf of the signed-in user. edb72de9-4252-4d03-a925-451deef99db7 Admin Policy.ReadWrite.AuthenticationFlows Allows the app to read and write the authentication method policies, on behalf of the signed-in user. 7e823077-d88e-468f-a337-e18f1f0e6c7c Admin Policy.ReadWrite.AuthenticationMethod Allows the app to read and write your organization\u0026rsquo;s authorization policy on behalf of the signed-in user. For example, authorization policies can control some of the permissions that the out-of-the-box user role has by default. edd3c878-b384-41fd-95ad-e7407dd775be Admin Policy.ReadWrite.Authorization Allows the app to read and write your organization\u0026rsquo;s conditional access policies on behalf of the signed-in user. ad902697-1014-4ef5-81ef-2b4301988e8c Admin Policy.ReadWrite.ConditionalAccess Allows the app to read and write your organization\u0026rsquo;s consent requests policy on behalf of the signed-in user. 4d135e65-66b8-41a8-9f8b-081452c91774 Admin Policy.ReadWrite.ConsentRequest Allows the app to read and write your organization\u0026rsquo;s cross tenant access policies on behalf of the signed-in user. 014b43d0-6ed4-4fc6-84dc-4b6f7bae7d85 Admin Policy.ReadWrite.CrossTenantAccess Allows the app to read and write your organization\u0026rsquo;s device configuration policies on behalf of the signed-in user. For example, device registration policy can limit initial provisioning controls using quota restrictions, additional authentication and authorization checks. 40b534c3-9552-4550-901b-23879c90bcf9 Admin Policy.ReadWrite.DeviceConfiguration Allows the application to read and update the organization\u0026rsquo;s external identities policy on behalf of the signed-in user. For example, external identities policy controls if users invited to access resources in your organization via B2B collaboration or B2B direct connect are allowed to self-service leave. b5219784-1215-45b5-b3f1-88fe1081f9c0 Admin Policy.ReadWrite.ExternalIdentities Allows the app to read and write your organization\u0026rsquo;s feature rollout policies on behalf of the signed-in user. Includes abilities to assign and remove users and groups to rollout of a specific feature. 92a38652-f13b-4875-bc77-6e1dbb63e1b2 Admin Policy.ReadWrite.FeatureRollout Allows the app to read and write your organization\u0026rsquo;s mobility management policies on behalf of the signed-in user. For example, a mobility management policy can set the enrollment scope for a given mobility management application. a8ead177-1889-4546-9387-f25e658e2a79 Admin Policy.ReadWrite.MobilityManagement Allows the app to manage policies related to consent and permission grants for applications, on behalf of the signed-in user. 2672f8bb-fd5e-42e0-85e1-ec764dd2614e Admin Policy.ReadWrite.PermissionGrant Allows the app to read and write your organization\u0026rsquo;s security defaults policy on behalf of the signed-in user. 0b2a744c-2abf-4f1e-ad7e-17a087e2be99 Admin Policy.ReadWrite.SecurityDefaults Allows the app to read and write your organization\u0026rsquo;s trust framework policies on behalf of the signed-in user. cefba324-1a70-4a6e-9c1d-fd670b7ae392 Admin Policy.ReadWrite.TrustFramework Allows the app to have the same access to mailboxes as the signed-in user via POP protocol. d7b7f2d9-0f45-4ea1-9d42-e50810c06991 User POP.AccessAsUser.All Allows the app to read presence information on behalf of the signed-in user. Presence information includes activity, availability, status note, calendar out-of-office message, timezone and location. 76bc735e-aecd-4a1d-8b4c-2b915deabb79 User Presence.Read Allows the app to read presence information of all users in the directory on behalf of the signed-in user. Presence information includes activity, availability, status note, calendar out-of-office message, timezone and location. 9c7a330d-35b3-4aa1-963d-cb2b9f927841 User Presence.Read.All Allows the app to read the presence information and write activity and availability on behalf of the signed-in user. Presence information includes activity, availability, status note, calendar out-of-office message, timezone and location. 8d3c54a7-cf58-4773-bf81-c0cd6ad522bb User Presence.ReadWrite Allows the application to read print connectors on behalf of the signed-in user. d69c2d6d-4f72-4f99-a6b9-663e32f8cf68 Admin PrintConnector.Read.All Allows the application to read and write print connectors on behalf of the signed-in user. 79ef9967-7d59-4213-9c64-4b10687637d8 Admin PrintConnector.ReadWrite.All Allows the application to create (register) printers on behalf of the signed-in user. 90c30bed-6fd1-4279-bf39-714069619721 Admin Printer.Create Allows the application to create (register), read, update, and delete (unregister) printers on behalf of the signed-in user. 93dae4bd-43a1-4a23-9a1a-92957e1d9121 Admin Printer.FullControl.All Allows the application to read printers on behalf of the signed-in user. 3a736c8a-018e-460a-b60c-863b2683e8bf Admin Printer.Read.All Allows the application to read and update printers on behalf of the signed-in user.Does not allow creating (registering) or deleting (unregistering) printers. 89f66824-725f-4b8f-928e-e1c5258dc565 Admin Printer.ReadWrite.All Allows the application to read printer shares on behalf of the signed-in user. ed11134d-2f3f-440d-a2e1-411efada2502 User PrinterShare.Read.All Allows the application to read basic information about printer shares on behalf of the signed-in user. Does not allow reading access control information. 5fa075e9-b951-4165-947b-c63396ff0a37 User PrinterShare.ReadBasic.All Allows the application to read and update printer shares on behalf of the signed-in user. 06ceea37-85e2-40d7-bec3-91337a46038f Admin PrinterShare.ReadWrite.All Allows the application to create print jobs on behalf of the signed-in user and upload document content to print jobs that the signed-in user created. 21f0d9c0-9f13-48b3-94e0-b6b231c7d320 User PrintJob.Create Allows the application to read the metadata and document content of print jobs that the signed-in user created. 248f5528-65c0-4c88-8326-876c7236df5e User PrintJob.Read Allows the application to read the metadata and document content of print jobs on behalf of the signed-in user. afdd6933-a0d8-40f7-bd1a-b5d778e8624b Admin PrintJob.Read.All Allows the application to read the metadata of print jobs that the signed-in user created. Does not allow access to print job document content. 6a71a747-280f-4670-9ca0-a9cbf882b274 User PrintJob.ReadBasic Allows the application to read the metadata of print jobs on behalf of the signed-in user.Does not allow access to print job document content. 04ce8d60-72ce-4867-85cf-6d82f36922f3 Admin PrintJob.ReadBasic.All Allows the application to read and update the metadata and document content of print jobs that the signed-in user created. b81dd597-8abb-4b3f-a07a-820b0316ed04 User PrintJob.ReadWrite Allows the application to read and update the metadata and document content of print jobs on behalf of the signed-in user. 036b9544-e8c5-46ef-900a-0646cc42b271 Admin PrintJob.ReadWrite.All Allows the application to read and update the metadata of print jobs that the signed-in user created. Does not allow access to print job document content. 6f2d22f2-1cb6-412c-a17c-3336817eaa82 User PrintJob.ReadWriteBasic Allows the application to read and update the metadata of print jobs on behalf of the signed-in user.Does not allow access to print job document content. 3a0db2f6-0d2a-4c19-971b-49109b19ad3d Admin PrintJob.ReadWriteBasic.All Allows the application to read tenant-wide print settings on behalf of the signed-in user. 490f32fd-d90f-4dd7-a601-ff6cdc1a3f6c Admin PrintSettings.Read.All Allows the application to read and write tenant-wide print settings on behalf of the signed-in user. 9ccc526a-c51c-4e5c-a1fd-74726ef50b8f Admin PrintSettings.ReadWrite.All Allows the app to read time-based assignment and just-in-time elevation (including scheduled elevation) of Azure AD built-in and custom administrative roles, on behalf of the signed-in user. b3a539c9-59cb-4ad5-825a-041ddbdc2bdb Admin PrivilegedAccess.Read.AzureAD Allows the app to read time-based assignment and just-in-time elevation (including scheduled elevation) of Azure AD groups, on behalf of the signed-in user. d329c81c-20ad-4772-abf9-3f6fdb7e5988 Admin PrivilegedAccess.Read.AzureADGroup Allows the app to read time-based assignment and just-in-time elevation of Azure resources (like your subscriptions, resource groups, storage, compute) on behalf of the signed-in user. 1d89d70c-dcac-4248-b214-903c457af83a Admin PrivilegedAccess.Read.AzureResources Allows the app to request and manage just in time elevation (including scheduled elevation) of users to Azure AD built-in administrative roles, on behalf of signed-in users. 3c3c74f5-cdaa-4a97-b7e0-4e788bfcfb37 Admin PrivilegedAccess.ReadWrite.AzureAD Allows the app to request and manage time-based assignment and just-in-time elevation (including scheduled elevation) of Azure AD groups, on behalf of the signed-in user. 32531c59-1f32-461f-b8df-6f8a3b89f73b Admin PrivilegedAccess.ReadWrite.AzureADGroup Allows the app to request and manage time-based assignment and just-in-time elevation of user privileges to manage Azure resources (like subscriptions, resource groups, storage, compute) on behalf of the signed-in users. a84a9652-ffd3-496e-a991-22ba5529156a Admin PrivilegedAccess.ReadWrite.AzureResources Allows the app to see your users\u0026rsquo; basic profile (e.g., name, picture, user name, email address) 14dad69e-099b-42c9-810b-d002981feec1 User profile Allows the app to read programs and program controls that the signed-in user has access to in the organization. c492a2e1-2f8f-4caa-b076-99bbf6e40fe4 Admin ProgramControl.Read.All Allows the app to read, update, delete and perform actions on programs and program controls that the signed-in user has access to in the organization. 50fd364f-9d93-4ae1-b170-300e87cccf84 Admin ProgramControl.ReadWrite.All Allows an app to read all question and answer sets that the signed-in user can access. f73fa04f-b9a5-4df9-8843-993ce928925e User QnA.Read.All Allows the application to read any data from Records Management, such as configuration, labels, and policies on behalf of the signed-in user. 07f995eb-fc67-4522-ad66-2b8ca8ea3efd Admin RecordsManagement.Read.All Allow the application to create, update and delete any data from Records Management, such as configuration, labels, and policies on behalf of the signed-in user. f2833d75-a4e6-40ab-86d4-6dfe73c97605 Admin RecordsManagement.ReadWrite.All Allows an app to read all service usage reports on behalf of the signed-in user. Services that provide usage reports include Office 365 and Azure Active Directory. 02e97553-ed7b-43d0-ab3c-f8bace0d040c Admin Reports.Read.All Allows the app to read admin report settings, such as whether to display concealed information in reports, on behalf of the signed-in user 84fac5f4-33a9-4100-aa38-a20c6d29e5e7 Admin ReportSettings.Read.All Allows the app to read and update admin report settings, such as whether to display concealed information in reports, on behalf of the signed-in user. b955410e-7715-4a88-a940-dfd551018df3 Admin ReportSettings.ReadWrite.All Allows the app to read the active role-based access control (RBAC) assignments for your company\u0026rsquo;s directory, on behalf of the signed-in user. This includes reading directory role templates, and directory roles. 344a729c-0285-42c6-9014-f12b9b8d6129 Admin RoleAssignmentSchedule.Read.Directory Allows the app to read and manage the active role-based access control (RBAC) assignments for your company\u0026rsquo;s directory, on behalf of the signed-in user. This includes managing active directory role membership, and reading directory role templates, directory roles and active memberships. 8c026be3-8e26-4774-9372-8d5d6f21daff Admin RoleAssignmentSchedule.ReadWrite.Directory Allows the app to read the eligible role-based access control (RBAC) assignments for your company\u0026rsquo;s directory, on behalf of the signed-in user. This includes reading directory role templates, and directory roles. eb0788c2-6d4e-4658-8c9e-c0fb8053f03d Admin RoleEligibilitySchedule.Read.Directory Allows the app to read and manage the eligible role-based access control (RBAC) assignments for your company\u0026rsquo;s directory, on behalf of the signed-in user. This includes managing eligible directory role membership, and reading directory role templates, directory roles and eligible memberships. 62ade113-f8e0-4bf9-a6ba-5acb31db32fd Admin RoleEligibilitySchedule.ReadWrite.Directory Allows the app to read the role-based access control (RBAC) settings for all RBAC providers, on behalf of the signed-in user. This includes reading role definitions and role assignments. 48fec646-b2ba-4019-8681-8eb31435aded Admin RoleManagement.Read.All Allows the app to read the Cloud PC role-based access control (RBAC) settings, on behalf of the signed-in user. This includes reading Cloud PC role definitions and role assignments. 9619b88a-8a25-48a7-9571-d23be0337a79 Admin RoleManagement.Read.CloudPC Allows the app to read the role-based access control (RBAC) settings for your company\u0026rsquo;s directory, on behalf of the signed-in user. This includes reading directory role templates, directory roles and memberships. 741c54c3-0c1e-44a1-818b-3f97ab4e8c83 Admin RoleManagement.Read.Directory Allows the app to read and manage the Cloud PC role-based access control (RBAC) settings, on behalf of the signed-in user. This includes reading and managing Cloud PC role definitions and role assignments. 501d06f8-07b8-4f18-b5c6-c191a4af7a82 Admin RoleManagement.ReadWrite.CloudPC Allows the app to read and manage the role-based access control (RBAC) settings for your company\u0026rsquo;s directory, on behalf of the signed-in user. This includes instantiating directory roles and managing directory role membership, and reading directory role templates, directory roles and memberships. d01b97e9-cbc0-49fe-810a-750afd5527a3 Admin RoleManagement.ReadWrite.Directory Allows the app to read the role-based access control (RBAC) alerts for your company\u0026rsquo;s directory, on behalf of the signed-in user. This includes reading alert statuses, alert definitions, alert configurations and incidents that lead to an alert. cce71173-f76d-446e-97ff-efb2d82e11b1 Admin RoleManagementAlert.Read.Directory Allows the app to read and manage the role-based access control (RBAC) alerts for your company\u0026rsquo;s directory, on behalf of the signed-in user. This includes managing alert settings, initiating alert scans, dimissing alerts, remediating alert incidents, and reading alert statuses, alert definitions, alert configurations and incidents that lead to an alert. 435644c6-a5b1-40bf-8f52-fe8e5b53e19c Admin RoleManagementAlert.ReadWrite.Directory Allows the app to read policies for privileged role-based access control (RBAC) assignments of your company\u0026rsquo;s directory, on behalf of the signed-in user. 3de2cdbe-0ff5-47d5-bdee-7f45b4749ead Admin RoleManagementPolicy.Read.Directory Allows the app to read, update, and delete policies for privileged role-based access control (RBAC) assignments of your company\u0026rsquo;s directory, on behalf of the signed-in user. 1ff1be21-34eb-448c-9ac9-ce1f506b2a68 Admin RoleManagementPolicy.ReadWrite.Directory Allows the app to read schedule, schedule groups, shifts and associated entities in the Teams or Shifts application on behalf of the signed-in user. fccf6dd8-5706-49fa-811f-69e2e1b585d0 Admin Schedule.Read.All Allows the app to manage schedule, schedule groups, shifts and associated entities in the Teams or Shifts application on behalf of the signed-in user. 63f27281-c9d9-4f29-94dd-6942f7f1feb0 Admin Schedule.ReadWrite.All Allows the app to read search configuration, on behalf of the signed-in user. 7d307522-aa38-4cd0-bd60-90c6f0ac50bd Admin SearchConfiguration.Read.All Allows the app to read and write search configuration, on behalf of the signed-in user. b1a7d408-cab0-47d2-a2a5-a74a3733600d Admin SearchConfiguration.ReadWrite.All Allows the app to read security actions, on behalf of the signed-in user. 1638cddf-07a4-4de2-8645-69c96cacad73 Admin SecurityActions.Read.All Allows the app to read or update security actions, on behalf of the signed-in user. dc38509c-b87d-4da0-bd92-6bec988bac4a Admin SecurityActions.ReadWrite.All Allows the app to read all security alerts, on behalf of the signed-in user. bc257fb8-46b4-4b15-8713-01e91bfbe4ea Admin SecurityAlert.Read.All Allows the app to read and write to all security alerts, on behalf of the signed-in user. 471f2a7f-2a42-4d45-a2bf-594d0838070d Admin SecurityAlert.ReadWrite.All Read email metadata and security detection details on behalf of the signed in user. 53e6783e-b127-4a35-ab3a-6a52d80a9077 Admin SecurityAnalyzedMessage.Read.All Read email metadata, security detection details, and execute remediation actions like deleting an email, on behalf of the signed in user. 48eb8c83-6e58-46e7-a6d3-8805822f5940 Admin SecurityAnalyzedMessage.ReadWrite.All Allows the app to read your organizations security events on behalf of the signed-in user. 64733abd-851e-478a-bffb-e47a14b18235 Admin SecurityEvents.Read.All Allows the app to read your organizations security events on behalf of the signed-in user. Also allows the app to update editable properties in security events on behalf of the signed-in user. 6aedf524-7e1c-45a7-bd76-ded8cab8d0fc Admin SecurityEvents.ReadWrite.All Allows the app to read security incidents, on behalf of the signed-in user. b9abcc4f-94fc-4457-9141-d20ce80ec952 Admin SecurityIncident.Read.All Allows the app to read and write security incidents, on behalf of the signed-in user. 128ca929-1a19-45e6-a3b8-435ec44a36ba Admin SecurityIncident.ReadWrite.All Allows the app to read your tenant\u0026rsquo;s service health information on behalf of the signed-in user. Health information may include service issues or service health overviews. 55896846-df78-47a7-aa94-8d3d4442ca7f Admin ServiceHealth.Read.All Allows the app to read your tenant\u0026rsquo;s service announcement messages on behalf of the signed-in user. Messages may include information about new or changed features. eda39fa6-f8cf-4c3c-a909-432c683e4c9b Admin ServiceMessage.Read.All Allows the app to update service announcement messages\u0026rsquo; user status on behalf of the signed-in user. The message status can be marked as read, archive, or favorite. 636e1b0b-1cc2-4b1c-9aa9-4eeed9b9761b Admin ServiceMessageViewpoint.Write Allows the app to read service principal endpoints 9f9ce928-e038-4e3b-8faf-7b59049a8ddc Admin ServicePrincipalEndpoint.Read.All Allows the app to update service principal endpoints 7297d82c-9546-4aed-91df-3d4f0a9b3ff0 Admin ServicePrincipalEndpoint.ReadWrite.All Allows the application to read the tenant-level settings in SharePoint and OneDrive on behalf of the signed-in user. 2ef70e10-5bfd-4ede-a5f6-67720500b258 Admin SharePointTenantSettings.Read.All Allows the application to read and change the tenant-level settings of SharePoint and OneDrive on behalf of the signed-in user. aa07f155-3612-49b8-a147-6c590df35536 Admin SharePointTenantSettings.ReadWrite.All Allows the app to read all the short notes a sign-in user has access to. 50f66e47-eb56-45b7-aaa2-75057d9afe08 User ShortNotes.Read Allows the app to read, create, edit, and delete short notes of a signed-in user. 328438b7-4c01-4c07-a840-e625a749bb89 User ShortNotes.ReadWrite Allows the application to have full control of all site collections on behalf of the signed-in user. 5a54b8b3-347c-476d-8f8e-42d5c7424d29 Admin Sites.FullControl.All Allows the application to create or delete document libraries and lists in all site collections on behalf of the signed-in user. 65e50fdc-43b7-4915-933e-e8138f11f40a User Sites.Manage.All Allows the application to read documents and list items in all site collections on behalf of the signed-in user 205e70e5-aba6-4c52-a976-6d2d46c48043 User Sites.Read.All Allows the application to edit or delete documents and list items in all site collections on behalf of the signed-in user. 89fe6a52-be36-487e-b7d8-d061c450a026 User Sites.ReadWrite.All Allows the app to be able to send emails from the users mailbox using the SMTP AUTH client submission protocol. 258f6531-6087-4cc4-bb90-092c5fb3ed3f User SMTP.Send Allows the app to read subject rights requests on behalf of the signed-in user 9c3af74c-fd0f-4db4-b17a-71939e2a9d77 Admin SubjectRightsRequest.Read.All Allows the app to read and write subject rights requests on behalf of the signed-in user 2b8fcc74-bce1-4ae3-a0e8-60c53739299d Admin SubjectRightsRequest.ReadWrite.All Allows the app to read all webhook subscriptions on behalf of the signed-in user. 5f88184c-80bb-4d52-9ff2-757288b2e9b7 Admin Subscription.Read.All Allows the app to read Azure AD synchronization information, on behalf of the signed-in user. 7aa02aeb-824f-4fbe-a3f7-611f751f5b55 Admin Synchronization.Read.All Allows the app to configure the Azure AD synchronization service, on behalf of the signed-in user. 7bb27fa3-ea8f-4d67-a916-87715b6188bd Admin Synchronization.ReadWrite.All Allows the app to read the signed-in users tasks and task lists, including any shared with the user. Doesn\u0026rsquo;t include permission to create, delete, or update anything. f45671fb-e0fe-4b4b-be20-3d3ce43f1bcb User Tasks.Read Allows the app to read tasks a user has permissions to access, including their own and shared tasks. 88d21fd4-8e5a-4c32-b5e2-4a1c95f34f72 User Tasks.Read.Shared Allows the app to create, read, update, and delete the signed-in user\u0026rsquo;s tasks and task lists, including any shared with the user. 2219042f-cab5-40cc-b0d2-16b1540b4c5f User Tasks.ReadWrite Allows the app to create, read, update, and delete tasks a user has permissions to, including their own and shared tasks. c5ddf11b-c114-4886-8558-8a4e557cd52b User Tasks.ReadWrite.Shared Allows the app to create teams on behalf of the signed-in user. 7825d5d6-6049-4ce7-bdf6-3b8d53f4bcd0 User Team.Create Read the names and descriptions of teams, on behalf of the signed-in user. 485be79e-c497-4b35-9400-0e3fa7f2a5d4 User Team.ReadBasic.All Read the members of teams, on behalf of the signed-in user. 2497278c-d82d-46a2-b1ce-39d4cdde5570 Admin TeamMember.Read.All Add and remove members from teams, on behalf of the signed-in user. Also allows changing a member\u0026rsquo;s role, for example from owner to non-owner. 4a06efd2-f825-4e34-813e-82a57b03d1ee Admin TeamMember.ReadWrite.All Add and remove members from all teams, on behalf of the signed-in user. Does not allow adding or removing a member with the owner role. Additionally, does not allow the app to elevate an existing member to the owner role. 2104a4db-3a2f-4ea0-9dba-143d457dc666 Admin TeamMember.ReadWriteNonOwnerRole.All Allows the app to read the signed-in user\u0026rsquo;s teamwork activity feed. 0e755559-83fb-4b44-91d0-4cc721b9323e User TeamsActivity.Read Allows the app to create new notifications in users\u0026rsquo; teamwork activity feeds on behalf of the signed in user. These notifications may not be discoverable or be held or governed by compliance policies. 7ab1d787-bae7-4d5d-8db6-37ea32df9186 User TeamsActivity.Send Allows the app to read the Teams apps that are installed in chats the signed-in user can access. Does not give the ability to read application-specific settings. bf3fbf03-f35f-4e93-963e-47e4d874c37a User TeamsAppInstallation.ReadForChat Allows the app to read the Teams apps that are installed in teams the signed-in user can access. Does not give the ability to read application-specific settings. 5248dcb1-f83b-4ec3-9f4d-a4428a961a72 Admin TeamsAppInstallation.ReadForTeam Allows the app to read the Teams apps that are installed for the signed-in user. Does not give the ability to read application-specific settings. c395395c-ff9a-4dba-bc1f-8372ba9dca84 User TeamsAppInstallation.ReadForUser Allows the app to read, install, upgrade, and uninstall Teams apps in chats the signed-in user can access. Gives the ability to manage permission grants for accessing those specific chats\u0026rsquo; data. e1408a66-8f82-451b-a2f3-3c3e38f7413f Admin TeamsAppInstallation.ReadWriteAndConsentForChat Allows the app to read, install, upgrade, and uninstall Teams apps in teams the signed-in user can access. Gives the ability to manage permission grants for accessing those specific teams\u0026rsquo; data. 946349d5-2a9d-4535-abc0-7beeacaedd1d Admin TeamsAppInstallation.ReadWriteAndConsentForTeam Allows a Teams app to read, install, upgrade, and uninstall itself in chats the signed-in user can access, and manage its permission grants for accessing those specific chats\u0026rsquo; data. a0e0e18b-8fb2-458f-8130-da2d7cab9c75 Admin TeamsAppInstallation.ReadWriteAndConsentSelfForChat Allows a Teams app to read, install, upgrade, and uninstall itself in teams the signed-in user can access, and manage its permission grants for accessing those specific teams\u0026rsquo; data. 4a6bbf29-a0e1-4a4d-a7d1-cef17f772975 Admin TeamsAppInstallation.ReadWriteAndConsentSelfForTeam Allows the app to read, install, upgrade, and uninstall Teams apps in chats the signed-in user can access. Does not give the ability to read application-specific settings. aa85bf13-d771-4d5d-a9e6-bca04ce44edf Admin TeamsAppInstallation.ReadWriteForChat Allows the app to read, install, upgrade, and uninstall Teams apps in teams the signed-in user can access. Does not give the ability to read application-specific settings. 2e25a044-2580-450d-8859-42eeb6e996c0 Admin TeamsAppInstallation.ReadWriteForTeam Allows the app to read, install, upgrade, and uninstall Teams apps installed for the signed-in user. Does not give the ability to read application-specific settings. 093f8818-d05f-49b8-95bc-9d2a73e9a43c Admin TeamsAppInstallation.ReadWriteForUser Allows a Teams app to read, install, upgrade, and uninstall itself in chats the signed-in user can access. 0ce33576-30e8-43b7-99e5-62f8569a4002 Admin TeamsAppInstallation.ReadWriteSelfForChat Allows a Teams app to read, install, upgrade, and uninstall itself to teams the signed-in user can access. 0f4595f7-64b1-4e13-81bc-11a249df07a9 Admin TeamsAppInstallation.ReadWriteSelfForTeam Allows a Teams app to read, install, upgrade, and uninstall itself for the signed-in user. 207e0cb1-3ce7-4922-b991-5a760c346ebc User TeamsAppInstallation.ReadWriteSelfForUser Read all teams\u0026rsquo; settings, on behalf of the signed-in user. 48638b3c-ad68-4383-8ac4-e6880ee6ca57 Admin TeamSettings.Read.All Read and change all teams\u0026rsquo; settings, on behalf of the signed-in user. 39d65650-9d3e-4223-80db-a335590d027e Admin TeamSettings.ReadWrite.All Allows the app to create tabs in any team in Microsoft Teams, on behalf of the signed-in user. This does not grant the ability to read, modify or delete tabs after they are created, or give access to the content inside the tabs. a9ff19c2-f369-4a95-9a25-ba9d460efc8e Admin TeamsTab.Create Read the names and settings of tabs inside any team in Microsoft Teams, on behalf of the signed-in user. This does not give access to the content inside the tabs. 59dacb05-e88d-4c13-a684-59f1afc8cc98 Admin TeamsTab.Read.All Read and write tabs in any team in Microsoft Teams, on behalf of the signed-in user. This does not give access to the content inside the tabs. b98bfd41-87c6-45cc-b104-e2de4f0dafb9 Admin TeamsTab.ReadWrite.All Allows a Teams app to read, install, upgrade, and uninstall all tabs in chats the signed-in user can access. ee928332-e9c2-4747-b4a0-f8c164b68de6 Admin TeamsTab.ReadWriteForChat Allows a Teams app to read, install, upgrade, and uninstall all tabs to teams the signed-in user can access. c975dd04-a06e-4fbb-9704-62daad77bb49 Admin TeamsTab.ReadWriteForTeam Allows a Teams app to read, install, upgrade, and uninstall all tabs for the signed-in user. c37c9b61-7762-4bff-a156-afc0005847a0 User TeamsTab.ReadWriteForUser Allows a Teams app to read, install, upgrade, and uninstall its own tabs in chats the signed-in user can access. 0c219d04-3abf-47f7-912d-5cca239e90e6 Admin TeamsTab.ReadWriteSelfForChat Allows a Teams app to read, install, upgrade, and uninstall its own tabs to teams the signed-in user can access. f266662f-120a-4314-b26a-99b08617c7ef Admin TeamsTab.ReadWriteSelfForTeam Allows a Teams app to read, install, upgrade, and uninstall its own tabs for the signed-in user. 395dfec1-a0b9-465f-a783-8250a430cb8c User TeamsTab.ReadWriteSelfForUser Allows the app to read the available Teams templates, on behalf of the signed-in user. cd87405c-5792-4f15-92f7-debc0db6d1d6 User TeamTemplates.Read Allows the app to read the Teams app settings on behalf of the signed-in user. 44e060c4-bbdc-4256-a0b9-dcc0396db368 User TeamworkAppSettings.Read.All Allows the app to read and write the Teams app settings on behalf of the signed-in user. 87c556f0-2bd9-4eed-bd74-5dd8af6eaf7e Admin TeamworkAppSettings.ReadWrite.All Allow the app to read the management data for Teams devices on behalf of the signed-in user. b659488b-9d28-4208-b2be-1c6652b3c970 Admin TeamworkDevice.Read.All Allow the app to read and write the management data for Teams devices on behalf of the signed-in user. ddd97ecb-5c31-43db-a235-0ee20e635c40 Admin TeamworkDevice.ReadWrite.All Allows the app to read tags in Teams, on behalf of the signed-in user. 57587d0b-8399-45be-b207-8050cec54575 Admin TeamworkTag.Read Allows the app to read and write tags in Teams, on behalf of the signed-in user. 539dabd7-b5b6-4117-b164-d60cd15a8671 Admin TeamworkTag.ReadWrite Allows the app to read the term store data that the signed-in user has access to. This includes all sets, groups and terms in the term store. 297f747b-0005-475b-8fef-c890f5152b38 Admin TermStore.Read.All Allows the app to read or modify data that the signed-in user has access to.This includes all sets, groups and terms in the term store. 6c37c71d-f50f-4bff-8fd3-8a41da390140 Admin TermStore.ReadWrite.All Allows an app to read your organization\u0026rsquo;s threat assessment requests on behalf of the signed-in user. Also allows the app to create new requests to assess threats received by your organization on behalf of the signed-in user. cac97e40-6730-457d-ad8d-4852fddab7ad Admin ThreatAssessment.ReadWrite.All Allows the app to run hunting queries, on behalf of the signed-in user. b152eca8-ea73-4a48-8c98-1a6742673d99 Admin ThreatHunting.Read.All Allows the app to read all the indicators for your organization, on behalf of the signed-in user. 9cc427b4-2004-41c5-aa22-757b755e9796 Admin ThreatIndicators.Read.All Allows the app to create threat indicators, and fully manage those threat indicators (read, update and delete), on behalf of the signed-in user. It cannot update any threat indicators it does not own. 91e7d36d-022a-490f-a748-f8e011357b42 Admin ThreatIndicators.ReadWrite.OwnedBy Allows the app to read the threat submissions and threat submission policies owned by the signed-in user. fd5353c6-26dd-449f-a565-c4e16b9fce78 User ThreatSubmission.Read Allows the app to read your organization\u0026rsquo;s threat submissions and threat submission policies on behalf of the signed-in user. 7083913a-4966-44b6-9886-c5822a5fd910 Admin ThreatSubmission.Read.All Allows the app to read the threat submissions and threat submission policies owned by the signed-in user. Also allows the app to create new threat submissions on behalf of the signed-in user. 68a3156e-46c9-443c-b85c-921397f082b5 User ThreatSubmission.ReadWrite Allows the app to read your organization\u0026rsquo;s threat submissions and threat submission policies on behalf of the signed-in user. Also allows the app to create new threat submissions on behalf of the signed-in user. 8458e264-4eb9-4922-abe9-768d58f13c7f Admin ThreatSubmission.ReadWrite.All Allows the app to read your organization\u0026rsquo;s threat submission policies on behalf of the signed-in user. Also allows the app to create new threat submission policies on behalf of the signed-in user. 059e5840-5353-4c68-b1da-666a033fc5e8 Admin ThreatSubmissionPolicy.ReadWrite.All Allows the app to read trust framework key set properties on behalf of the signed-in user. 7ad34336-f5b1-44ce-8682-31d7dfcd9ab9 Admin TrustFrameworkKeySet.Read.All Allows the app to read and write trust framework key set properties on behalf of the signed-in user. 39244520-1e7d-4b4a-aee0-57c65826e427 Admin TrustFrameworkKeySet.ReadWrite.All Allows the app to read basic unified group properties, memberships and owners of the group the signed-in guest is a member of. 73e75199-7c3e-41bb-9357-167164dbb415 Admin UnifiedGroupMember.Read.AsGuest Allows the app to read the lifecycle information like employeeLeaveDateTime of users in your organization, on behalf of the signed-in user. ed8d2a04-0374-41f1-aefe-da8ac87ccc87 Admin User-LifeCycleInfo.Read.All Allows the app to read and write the lifecycle information like employeeLeaveDateTime of users in your organization, on behalf of the signed-in user. 7ee7473e-bd4b-4c9f-987c-bd58481f5fa2 Admin User-LifeCycleInfo.ReadWrite.All Allows the app to enable and disable users\u0026rsquo; accounts, on behalf of the signed-in user. f92e74e7-2563-467f-9dd0-902688cb5863 Admin User.EnableDisableAccount.All Allows the app to export data (e.g. customer content or system-generated logs), associated with any user in your company, when the app is used by a privileged user (e.g. a Company Administrator). 405a51b5-8d8d-430b-9842-8be4b0e9f324 Admin User.Export.All Allows the app to invite guest users to the organization, on behalf of the signed-in user. 63dd7cd9-b489-4adf-a28c-ac38b9a0f962 Admin User.Invite.All Allows the app to read, update and delete identities that are associated with a user\u0026rsquo;s account that the signed-in user has access to. This controls the identities users can sign-in with. 637d7bec-b31e-4deb-acc9-24275642a2c9 Admin User.ManageIdentities.All Allows users to sign-in to the app, and allows the app to read the profile of signed-in users. It also allows the app to read basic company information of signed-in users. e1fe6dd8-ba31-4d61-89e7-88639da4683d User User.Read Allows the app to read the full set of profile properties, reports, and managers of other users in your organization, on behalf of the signed-in user. a154be20-db9c-4678-8ab7-66f6cc099a59 Admin User.Read.All Allows the app to read a basic set of profile properties of other users in your organization on behalf of the signed-in user. This includes display name, first and last name, email address and photo. b340eb25-3456-403f-be2f-af7a0d370277 User User.ReadBasic.All Allows the app to read your profile. It also allows the app to update your profile information on your behalf. b4e74841-8e56-480b-be8b-910348b18b4c User User.ReadWrite Allows the app to read and write the full set of profile properties, reports, and managers of other users in your organization, on behalf of the signed-in user. 204e0828-b5ca-4ad8-b9f3-f32a958e7cc4 Admin User.ReadWrite.All Allows the app to read and report the signed-in user\u0026rsquo;s activity in the app. 47607519-5fb1-47d9-99c7-da4b48f369b1 User UserActivity.ReadWrite.CreatedByApp Allows the app to read the signed-in user\u0026rsquo;s authentication methods, including phone numbers and Authenticator app settings. This does not allow the app to see secret information like the signed-in user\u0026rsquo;s passwords, or to sign-in or otherwise use the signed-in user\u0026rsquo;s authentication methods. 1f6b61c5-2f65-4135-9c9f-31c0f8d32b52 Admin UserAuthenticationMethod.Read Allows the app to read authentication methods of all users in your organization that the signed-in user has access to. Authentication methods include things like a users phone numbers and Authenticator app settings. This does not allow the app to see secret information like passwords, or to sign-in or otherwise use the authentication methods. aec28ec7-4d02-4e8c-b864-50163aea77eb Admin UserAuthenticationMethod.Read.All Allows the app to read and write the signed-in user\u0026rsquo;s authentication methods, including phone numbers and Authenticator app settings. This does not allow the app to see secret information like the signed-in user\u0026rsquo;s passwords, or to sign-in or otherwise use the signed-in user\u0026rsquo;s authentication methods. 48971fc1-70d7-4245-af77-0beb29b53ee2 Admin UserAuthenticationMethod.ReadWrite Allows the app to read and write authentication methods of all users in your organization that the signed-in user has access to. Authentication methods include things like a users phone numbers and Authenticator app settings. This does not allow the app to see secret information like passwords, or to sign-in or otherwise use the authentication methods. b7887744-6746-4312-813d-72daeaee7e2d Admin UserAuthenticationMethod.ReadWrite.All Allows the app to send, read, update and delete users notifications. 26e2f3e8-b2a1-47fc-9620-89bb5b042024 User UserNotification.ReadWrite.CreatedByApp Allows the app to report the signed-in user\u0026rsquo;s app activity information to Microsoft Timeline. 367492fc-594d-4972-a9b5-0d58c622c91c User UserTimelineActivity.Write.CreatedByApp Allows an application to read virtual appointments for the signed-in user. Only an organizer or participant user can read their virtual appointments. 27470298-d3b8-4b9c-aad4-6334312a3eac Admin VirtualAppointment.Read Allows an application to read and write virtual appointments for the signed-in user. Only an organizer or participant user can read and write their virtual appointments. 2ccc2926-a528-4b17-b8bb-860eed29d64c Admin VirtualAppointment.ReadWrite Allows the app to read and write all Windows update deployment settings for the organization on behalf of the signed-in user. 11776c0c-6138-4db3-a668-ee621bea2555 Admin WindowsUpdates.ReadWrite.All Allows the app to read workforce integrations, to synchronize data from Microsoft Teams Shifts, on behalf of the signed-in user. f1ccd5a7-6383-466a-8db8-1a656f7d06fa Admin WorkforceIntegration.Read.All Allows the app to manage workforce integrations, to synchronize data from Microsoft Teams Shifts, on behalf of the signed-in user. 08c4b377-0d23-4a8b-be2a-23c1c1d88545 Admin WorkforceIntegration.ReadWrite.All Well-known roles # Here below you can find the list of all the well-known roles defined by Microsoft Graph\nDescription Id Allowed Member Types Value Allows the app to read access reviews, reviewers, decisions and settings in the organization, without a signed-in user. d07a8cc0-3d51-4b77-b3b0-32704d1f69fa Application AccessReview.Read.All Allows the app to read, update, delete and perform actions on access reviews, reviewers, decisions and settings in the organization, without a signed-in user. ef5f7d5c-338f-44b0-86c3-351f46c8bb5f Application AccessReview.ReadWrite.All Allows the app to read, update, delete and perform actions on access reviews, reviewers, decisions and settings in the organization for group and app memberships, without a signed-in user. 18228521-a591-40f1-b215-5fad4488c117 Application AccessReview.ReadWrite.Membership Allows an app to read all acronyms without a signed-in user. 8c0aed2c-0c61-433d-b63c-6370ddc73248 Application Acronym.Read.All Allows the app to read administrative units and administrative unit membership without a signed-in user. 134fd756-38ce-4afd-ba33-e9623dbe66c2 Application AdministrativeUnit.Read.All Allows the app to create, read, update, and delete administrative units and manage administrative unit membership without a signed-in user. 5eb59dd3-1da2-4329-8733-9dabdc435916 Application AdministrativeUnit.ReadWrite.All Allows the app to read terms of use agreements, without a signed in user. 2f3e6f8c-093b-4c57-a58b-ba5ce494a169 Application Agreement.Read.All Allows the app to read and write terms of use agreements, without a signed in user. c9090d00-6101-42f0-a729-c41074260d47 Application Agreement.ReadWrite.All Allows the app to read terms of use acceptance statuses, without a signed in user. d8e4ec18-f6c0-4620-8122-c8b1f2bf400e Application AgreementAcceptance.Read.All Allows the app to read the API connectors used in user authentication flows, without a signed-in user. b86848a7-d5b1-41eb-a9b4-54a4e6306e97 Application APIConnectors.Read.All Allows the app to read, create and manage the API connectors used in user authentication flows, without a signed-in user. 1dfe531a-24a6-4f1b-80f4-7a0dc5a0a171 Application APIConnectors.ReadWrite.All Allows the app to read apps in the app catalogs without a signed-in user. e12dae10-5a57-4817-b79d-dfbec5348930 Application AppCatalog.Read.All Allows the app to create, read, update, and delete apps in the app catalogs without a signed-in user. dc149144-f292-421e-b185-5953f2e98d7f Application AppCatalog.ReadWrite.All Allows the app to read all applications and service principals without a signed-in user. 9a5d68dd-52b0-4cc2-bd40-abcf44ac3a30 Application Application.Read.All Allows the app to create, read, update and delete applications and service principals without a signed-in user. Does not allow management of consent grants. 1bfefb4e-e0b5-418b-a88f-73c46d2cc8e9 Application Application.ReadWrite.All Allows the app to create other applications, and fully manage those applications (read, update, update application secrets and delete), without a signed-in user. It cannot update any apps that it is not an owner of. 18a4783c-866b-4cc7-a460-3d5e5662c884 Application Application.ReadWrite.OwnedBy Allows the app to manage permission grants for application permissions to any API (including Microsoft Graph) and application assignments for any app, without a signed-in user. 06b708a9-e830-4db3-a914-8e69da51d44f Application AppRoleAssignment.ReadWrite.All Allows the app to read attack simulation and training data for an organization without a signed-in user. 93283d0a-6322-4fa8-966b-8c121624760d Application AttackSimulation.Read.All Allows the app to read, create, and update attack simulation and training data for an organization without a signed-in user. e125258e-8c8a-42a8-8f55-ab502afa52f3 Application AttackSimulation.ReadWrite.All Allows the app to read and query your audit log activities, without a signed-in user. b0afded3-3588-46d8-8b3d-9842eff778da Application AuditLog.Read.All Allows the app to read the authentication context information in your organization without a signed-in user. 381f742f-e1f8-4309-b4ab-e3d91ae4c5c1 Application AuthenticationContext.Read.All Allows the app to read and update the authentication context information in your organization without a signed-in user. a88eef72-fed0-4bf7-a2a9-f19df33f8b83 Application AuthenticationContext.ReadWrite.All Allows the app to read and write the billing configuration on all applications without a signed-in user. 9e8be751-7eee-4c09-bcfd-d64f6b087fd8 Application BillingConfiguration.ReadWrite.All Allows an app to read Bookings appointments, businesses, customers, services, and staff without a signed-in user. 6e98f277-b046-4193-a4f2-6bf6a78cd491 Application Bookings.Read.All Allows an app to read and write Bookings appointments and customers, and additionally allows reading businesses, services, and staff without a signed-in user. 9769393e-5a9f-4302-9e3d-7e018ecb64a7 Application BookingsAppointment.ReadWrite.All Allows an app to read all bookmarks without a signed-in user. be95e614-8ef3-49eb-8464-1c9503433b86 Application Bookmark.Read.All Allows an app to read all browser site lists configured for your organization, without a signed-in user. c5ee1f21-fc7f-4937-9af0-c91648ff9597 Application BrowserSiteLists.Read.All Allows an app to read and write all browser site lists configured for your organization, without a signed-in user. 8349ca94-3061-44d5-9bfb-33774ea5e4f9 Application BrowserSiteLists.ReadWrite.All Allows the app to read the configurations of business scenarios it owns, without a signed-in user. acc0fc4d-2cd6-4194-8700-1768d8423d86 Application BusinessScenarioConfig.Read.OwnedBy Allows the app to create new business scenarios and fully manage the configurations of scenarios it owns, without a signed-in user. bbea195a-4c47-4a4f-bff2-cba399e11698 Application BusinessScenarioConfig.ReadWrite.OwnedBy Allows the app to read the data associated with the business scenarios it owns, without a signed-in user. 6c0257fd-cffe-415b-8239-2d0d70fdaa9c Application BusinessScenarioData.Read.OwnedBy Allows the app to fully manage the data associated with the business scenarios it owns, without a signed-in user. f2d21f22-5d80-499e-91cc-0a8a4ce16f54 Application BusinessScenarioData.ReadWrite.OwnedBy Allows the app to read events of all calendars without a signed-in user. 798ee544-9d2d-430c-a058-570e29e34338 Application Calendars.Read Allows the app to read events of all calendars, except for properties such as body, attachments, and extensions, without a signed-in user. 8ba4a692-bc31-4128-9094-475872af8a53 Application Calendars.ReadBasic.All Allows the app to create, read, update, and delete events of all calendars without a signed-in user. ef54d2bf-783f-4e0f-bca1-3210c0444d99 Application Calendars.ReadWrite Allows the app to read all PSTN and direct routing call log data without a signed-in user. a2611786-80b3-417e-adaa-707d4261a5f0 Application CallRecord-PstnCalls.Read.All Allows the app to read call records for all calls and online meetings without a signed-in user. 45bbb07e-7321-4fd7-a8f6-3ff27e6a81c8 Application CallRecords.Read.All Allows the app to get direct access to media streams in a call, without a signed-in user. a7a681dc-756e-4909-b988-f160edc6655f Application Calls.AccessMedia.All Allows the app to place outbound calls to a single user and transfer calls to users in your organizations directory, without a signed-in user. 284383ee-7f6e-4e40-a2a8-e85dcb029101 Application Calls.Initiate.All Allows the app to place outbound calls to multiple users and add participants to meetings in your organization, without a signed-in user. 4c277553-8a09-487b-8023-29ee378d8324 Application Calls.InitiateGroupCall.All Allows the app to join group calls and scheduled meetings in your organization, without a signed-in user. The app will be joined with the privileges of a directory user to meetings in your organization. f6b49018-60ab-4f81-83bd-22caeabfed2d Application Calls.JoinGroupCall.All Allows the app to anonymously join group calls and scheduled meetings in your organization, without a signed-in user. The app will be joined as a guest to meetings in your organization. fd7ccf6b-3d28-418b-9701-cd10f5cd2fd4 Application Calls.JoinGroupCallAsGuest.All Create channels in any team, without a signed-in user. f3a65bd4-b703-46df-8f7e-0174fea562aa Application Channel.Create Delete channels in any team, without a signed-in user. 6a118a39-1227-45d4-af0c-ea7b40d210bc Application Channel.Delete.All Read all channel names and channel descriptions, without a signed-in user. 59a6b24b-4225-4393-8165-ebaec5f55d7a Application Channel.ReadBasic.All Read the members of all channels, without a signed-in user. 3b55498e-47ec-484f-8136-9013221c06a9 Application ChannelMember.Read.All Add and remove members from all channels, without a signed-in user. Also allows changing a member\u0026rsquo;s role, for example from owner to non-owner. 35930dcf-aceb-4bd1-b99a-8ffed403c974 Application ChannelMember.ReadWrite.All Allows the app to read all channel messages in Microsoft Teams 7b2449af-6ccd-4f4d-9f78-e550c193f0d1 Application ChannelMessage.Read.All Allows the app to update Microsoft Teams channel messages by patching a set of Data Loss Prevention (DLP) policy violation properties to handle the output of DLP processing. 4d02b0cc-d90b-441f-8d82-4fb55c34d6bb Application ChannelMessage.UpdatePolicyViolation.All Read all channel names, channel descriptions, and channel settings, without a signed-in user. c97b873f-f59f-49aa-8a0e-52b32d762124 Application ChannelSettings.Read.All Read and write the names, descriptions, and settings of all channels, without a signed-in user. 243cded2-bd16-4fd6-a953-ff8177894c3d Application ChannelSettings.ReadWrite.All Allows the app to create chats without a signed-in user. d9c48af6-9ad9-47ad-82c3-63757137b9af Application Chat.Create Allows the app to read all 1-to-1 or group chat messages in Microsoft Teams. 6b7d71aa-70aa-4810-a8d9-5d9fb2830017 Application Chat.Read.All Allows the app to read all one-to-one or group chat messages in Microsoft Teams for chats where the associated Teams application is installed, without a signed-in user. 1c1b4c8e-3cc7-4c58-8470-9b92c9d5848b Application Chat.Read.WhereInstalled Read names and members of all one-to-one and group chats in Microsoft Teams, without a signed-in user. b2e060da-3baf-4687-9611-f4ebc0f0cbde Application Chat.ReadBasic.All Allows the app to read names and members of all one-to-one and group chats in Microsoft Teams where the associated Teams application is installed, without a signed-in user. 818ba5bd-5b3e-4fe0-bbe6-aa4686669073 Application Chat.ReadBasic.WhereInstalled Allows an app to read and write all chat messages in Microsoft Teams, without a signed-in user. 294ce7c9-31ba-490a-ad7d-97a7d075e4ed Application Chat.ReadWrite.All Allows the app to read and write all chat messages in Microsoft Teams for chats where the associated Teams application is installed, without a signed-in user. ad73ce80-f3cd-40ce-b325-df12c33df713 Application Chat.ReadWrite.WhereInstalled Allows the app to update Microsoft Teams 1-to-1 or group chat messages by patching a set of Data Loss Prevention (DLP) policy violation properties to handle the output of DLP processing. 7e847308-e030-4183-9899-5235d7270f58 Application Chat.UpdatePolicyViolation.All Read the members of all chats, without a signed-in user. a3410be2-8e48-4f32-8454-c29a7465209d Application ChatMember.Read.All Allows the app to read the members of all chats where the associated Teams application is installed, without a signed-in user. 93e7c9e4-54c5-4a41-b796-f2a5adaacda7 Application ChatMember.Read.WhereInstalled Add and remove members from all chats, without a signed-in user. 57257249-34ce-4810-a8a2-a03adf0c5693 Application ChatMember.ReadWrite.All Allows the app to add and remove members from all chats where the associated Teams application is installed, without a signed-in user. e32c2cd9-0124-4e44-88fc-772cd98afbdb Application ChatMember.ReadWrite.WhereInstalled Allows the app to read all one-to-one and group chats messages in Microsoft Teams, without a signed-in user. b9bb2381-47a4-46cd-aafb-00cb12f68504 Application ChatMessage.Read.All Allows the app to read the properties of Cloud PCs, without a signed-in user. a9e09520-8ed4-4cde-838e-4fdea192c227 Application CloudPC.Read.All Allows the app to read and write the properties of Cloud PCs, without a signed-in user. 3b4349e1-8cf5-45a3-95b7-69d1751d3e6a Application CloudPC.ReadWrite.All Allows the app to read consent requests and approvals without a signed-in user. 1260ad83-98fb-4785-abbb-d6cc1806fd41 Application ConsentRequest.Read.All Allows the app to read app consent requests and approvals, and deny or approve those requests without a signed-in user. 9f1b81a7-0223-4428-bfa4-0bcb5535f27d Application ConsentRequest.ReadWrite.All Allows the app to read all contacts in all mailboxes without a signed-in user. 089fe4d0-434a-44c5-8827-41ba8a0b17f5 Application Contacts.Read Allows the app to create, read, update, and delete all contacts in all mailboxes without a signed-in user. 6918b873-d17a-4dc1-b314-35f528134491 Application Contacts.ReadWrite Allows the application to obtain basic tenant information about another target tenant within the Azure AD ecosystem without a signed-in user. cac88765-0581-4025-9725-5ebc13f729ee Application CrossTenantInformation.ReadBasic.All Allows the application to list and query any shared user profile information associated with the current tenant without a signed-in user. It also permits the application to export external user data (e.g. customer content or system-generated logs), for any user associated with the current tenant without a signed-in user. 8b919d44-6192-4f3d-8a3b-f86f8069ae3c Application CrossTenantUserProfileSharing.Read.All Allows the application to list and query any shared user profile information associated with the current tenant without a signed-in user. It also permits the application to export and remove external user data (e.g. customer content or system-generated logs), for any user associated with the current tenant without a signed-in user. 306785c5-c09b-4ba0-a4ee-023f3da165cb Application CrossTenantUserProfileSharing.ReadWrite.All Allows the app to read your organization\u0026rsquo;s custom authentication extensions without a signed-in user. 88bb2658-5d9e-454f-aacd-a3933e079526 Application CustomAuthenticationExtension.Read.All Allows the app to read or write your organization\u0026rsquo;s custom authentication extensions without a signed-in user. c2667967-7050-4e7e-b059-4cbbb3811d03 Application CustomAuthenticationExtension.ReadWrite.All Allows custom authentication extensions associated with the app to receive HTTP requests triggered by an authentication event. The request can include information about a user, client and resource service principals, and other information about the authentication. 214e810f-fda8-4fd7-a475-29461495eb00 Application CustomAuthenticationExtension.Receive.Payload Allows the app to read custom security attribute assignments for all principals in the tenant without a signed in user. 3b37c5a4-1226-493d-bec3-5d6c6b866f3f Application CustomSecAttributeAssignment.Read.All Allows the app to read and write custom security attribute assignments for all principals in the tenant without a signed in user. de89b5e4-5b8f-48eb-8925-29c2b33bd8bd Application CustomSecAttributeAssignment.ReadWrite.All Allows the app to read custom security attribute definitions for the tenant without a signed in user. b185aa14-d8d2-42c1-a685-0f5596613624 Application CustomSecAttributeDefinition.Read.All Allows the app to read and write custom security attribute definitions for the tenant without a signed in user. 12338004-21f4-4896-bf5e-b75dfaf1016d Application CustomSecAttributeDefinition.ReadWrite.All Allows the app to read all data loss prevention policies applicable to users for protecting organizational data, without a signed-in user. aee50e06-5c4f-4494-ab8d-2e65636a2949 Application DataLossPrevention.Read.All Allows the app to read details of delegated admin relationships with customers like access details (that includes roles) and the duration as well as specific role assignments to security groups without a signed-in user. f6e9e124-4586-492f-adc0-c6f96e4823fd Application DelegatedAdminRelationship.Read.All Allows the app to manage (create-update-terminate) Delegated Admin relationships with customers and role assignments to security groups for active Delegated Admin relationships without a signed-in user. cc13eba4-8cd8-44c6-b4d4-f93237adce58 Application DelegatedAdminRelationship.ReadWrite.All Allows the app to manage permission grants for delegated permissions exposed by any API (including Microsoft Graph), without a signed-in user. 8e8e4742-1d95-4f68-9d56-6ee75648c72a Application DelegatedPermissionGrant.ReadWrite.All Allows the app to read your organization\u0026rsquo;s devices\u0026rsquo; configuration information without a signed-in user. 7438b122-aefc-4978-80ed-43db9fcc7715 Application Device.Read.All Allows the app to read and write all device properties without a signed in user. Does not allow device creation, device deletion or update of device alternative security identifiers. 1138cb37-bd11-4084-a2b7-9f71582aeddb Application Device.ReadWrite.All Allows the app to read device local credential properties including passwords, without a signed-in user. 884b599e-4d48-43a5-ba94-15c414d00588 Application DeviceLocalCredential.Read.All Allows the app to read device local credential properties excluding passwords, without a signed-in user. db51be59-e728-414b-b800-e0f010df1a79 Application DeviceLocalCredential.ReadBasic.All Allows the app to read the properties, group assignments and status of apps, app configurations and app protection policies managed by Microsoft Intune, without a signed-in user. 7a6ee1e7-141e-4cec-ae74-d9db155731ff Application DeviceManagementApps.Read.All Allows the app to read and write the properties, group assignments and status of apps, app configurations and app protection policies managed by Microsoft Intune, without a signed-in user. 78145de6-330d-4800-a6ce-494ff2d33d07 Application DeviceManagementApps.ReadWrite.All Allows the app to read properties of Microsoft Intune-managed device configuration and device compliance policies and their assignment to groups, without a signed-in user. dc377aa6-52d8-4e23-b271-2a7ae04cedf3 Application DeviceManagementConfiguration.Read.All Allows the app to read and write properties of Microsoft Intune-managed device configuration and device compliance policies and their assignment to groups, without a signed-in user. 9241abd9-d0e6-425a-bd4f-47ba86e767a4 Application DeviceManagementConfiguration.ReadWrite.All Allows the app to perform remote high impact actions such as wiping the device or resetting the passcode on devices managed by Microsoft Intune, without a signed-in user. 5b07b0dd-2377-4e44-a38d-703f09a0dc3c Application DeviceManagementManagedDevices.PrivilegedOperations.All Allows the app to read the properties of devices managed by Microsoft Intune, without a signed-in user. 2f51be20-0bb4-4fed-bf7b-db946066c75e Application DeviceManagementManagedDevices.Read.All Allows the app to read and write the properties of devices managed by Microsoft Intune, without a signed-in user. Does not allow high impact operations such as remote wipe and password reset on the devices owner 243333ab-4d21-40cb-a475-36241daa0842 Application DeviceManagementManagedDevices.ReadWrite.All Allows the app to read the properties relating to the Microsoft Intune Role-Based Access Control (RBAC) settings, without a signed-in user. 58ca0d9a-1575-47e1-a3cb-007ef2e4583b Application DeviceManagementRBAC.Read.All Allows the app to read and write the properties relating to the Microsoft Intune Role-Based Access Control (RBAC) settings, without a signed-in user. e330c4f0-4170-414e-a55a-2f022ec2b57b Application DeviceManagementRBAC.ReadWrite.All Allows the app to read Microsoft Intune service properties including device enrollment and third party service connection configuration, without a signed-in user. 06a5fe6d-c49d-46a7-b082-56b1b14103c7 Application DeviceManagementServiceConfig.Read.All Allows the app to read and write Microsoft Intune service properties including device enrollment and third party service connection configuration, without a signed-in user. 5ac13192-7ace-4fcf-b828-1a26f28068ee Application DeviceManagementServiceConfig.ReadWrite.All Allows the app to read data in your organization\u0026rsquo;s directory, such as users, groups and apps, without a signed-in user. 7ab1d382-f21e-4acd-a863-ba3e13f7da61 Application Directory.Read.All Allows the app to read and write data in your organization\u0026rsquo;s directory, such as users, and groups, without a signed-in user. Does not allow user or group deletion. 19dbc75e-c2e2-444c-a770-ec69d8559fc7 Application Directory.ReadWrite.All Allows the app to manage restricted resources based on the other permissions granted to the app, without a signed-in user. f20584af-9290-4153-9280-ff8bb2c0ea7f Application Directory.Write.Restricted Allows the app to read all Azure AD recommendations, without a signed-in user. ae73097b-cb2a-4447-b064-5d80f6093921 Application DirectoryRecommendations.Read.All Allows the app to read and update all Azure AD recommendations, without a signed-in user. 0e9eea12-4f01-45f6-9b8d-3ea4c8144158 Application DirectoryRecommendations.ReadWrite.All Allows the app to read all domain properties without a signed-in user. dbb9058a-0e50-45d7-ae91-66909b5d4664 Application Domain.Read.All Allows the app to read and write all domain properties without a signed in user. Also allows the app to add, verify and remove domains. 7e05723c-0bb0-42da-be95-ae9f08a6e53c Application Domain.ReadWrite.All Allows the app to read eDiscovery objects such as cases, custodians, review sets and other related objects without a signed-in user. 50180013-6191-4d1e-a373-e590ff4e66af Application eDiscovery.Read.All Allows the app to read and write eDiscovery objects such as cases, custodians, review sets and other related objects without a signed-in user. b2620db1-3bf7-4c5b-9cb9-576d29eac736 Application eDiscovery.ReadWrite.All Read the state and settings of all Microsoft education apps. 7c9db06a-ec2d-4e7b-a592-5a1e30992566 Application EduAdministration.Read.All Manage the state and settings of all Microsoft education apps. 9bc431c3-b8bc-4a8d-a219-40f10f92eff6 Application EduAdministration.ReadWrite.All Allows the app to read allclass assignments with grades for all users without a signed-in user. 4c37e1b6-35a1-43bf-926a-6f30f2cdf585 Application EduAssignments.Read.All Allows the app to read allclass assignments without grades for all users without a signed-in user. 6e0a958b-b7fc-4348-b7c4-a6ab9fd3dd0e Application EduAssignments.ReadBasic.All Allows the app to create, read, update and delete allclass assignments with grades for all users without a signed-in user. 0d22204b-6cad-4dd0-8362-3e3f2ae699d9 Application EduAssignments.ReadWrite.All Allows the app to create, read, update and delete allclass assignments without grades for all users without a signed-in user. f431cc63-a2de-48c4-8054-a34bc093af84 Application EduAssignments.ReadWriteBasic.All Allows the app to read the structure of schools and classes in the organization\u0026rsquo;s roster and education-specific information about all users to be read. e0ac9e1b-cb65-4fc5-87c5-1a8bc181f648 Application EduRoster.Read.All Allows the app to read a limited subset of properties from both the structure of schools and classes in the organization\u0026rsquo;s roster and education-specific information about all users. Includes name, status, role, email address and photo. 0d412a8c-a06c-439f-b3ec-8abcf54d2f96 Application EduRoster.ReadBasic.All Allows the app to read and write the structure of schools and classes in the organization\u0026rsquo;s roster and education-specific information about all users to be read and written. d1808e82-ce13-47af-ae0d-f9b254e6d58a Application EduRoster.ReadWrite.All Allows the app to read access packages and related entitlement management resources without a signed-in user. c74fd47d-ed3c-45c3-9a9e-b8676de685d2 Application EntitlementManagement.Read.All Allows the app to read and write access packages and related entitlement management resources without a signed-in user. 9acd699f-1e81-4958-b001-93b1d2506e19 Application EntitlementManagement.ReadWrite.All Allows the app to read your organization\u0026rsquo;s authentication event listeners without a signed-in user. b7f6385c-6ce6-4639-a480-e23c42ed9784 Application EventListener.Read.All Allows the app to read or write your organization\u0026rsquo;s authentication event listeners without a signed-in user. 0edf5e9e-4ce8-468a-8432-d08631d18c43 Application EventListener.ReadWrite.All Allows the app to read all external connections without a signed-in user. 1914711b-a1cb-4793-b019-c2ce0ed21b8c Application ExternalConnection.Read.All Allows the app to read and write all external connections without a signed-in user. 34c37bc0-2b40-4d5e-85e1-2365cd256d79 Application ExternalConnection.ReadWrite.All Allows the app to read and write external connections without a signed-in user. The app can only read and write external connections that it is authorized to, or it can create new external connections. f431331c-49a6-499f-be1c-62af19c34a9d Application ExternalConnection.ReadWrite.OwnedBy Allows the app to read all external items without a signed-in user. 7a7cffad-37d2-4f48-afa4-c6ab129adcc2 Application ExternalItem.Read.All Allow the app to read or write items in all external datasets that the app is authorized to access 38c3d6ee-69ee-422f-b954-e17819665354 Application ExternalItem.ReadWrite.All Allows the app to read and write external items without a signed-in user. The app can only read external items of the connection that it is authorized to. 8116ae0f-55c2-452d-9944-d18420f5b2c8 Application ExternalItem.ReadWrite.OwnedBy Allows the app to read all files in all site collections without a signed in user. 01d4889c-1287-42c6-ac1f-5d1e02578ef6 Application Files.Read.All Allows the app to read, create, update and delete all files in all site collections without a signed in user. 75359482-378d-4052-8f01-80520e7db3cd Application Files.ReadWrite.All Allows the app to create groups without a signed-in user. bf7b1a76-6e77-406b-b258-bf5c7720e98f Application Group.Create Allows the app to read group properties and memberships, and readconversations for all groups, without a signed-in user. 5b567255-7703-4780-807c-7be8301ae99b Application Group.Read.All Allows the app to create groups, read all group properties and memberships, update group properties and memberships, and delete groups. Also allows the app to read and write conversations. All of these operations can be performed by the app without a signed-in user. 62a82d76-70ea-41e2-9197-370581804d09 Application Group.ReadWrite.All Allows the app to read memberships and basic group properties for all groups without a signed-in user. 98830695-27a2-44f7-8c18-0c3ebc9698f6 Application GroupMember.Read.All Allows the app to list groups, read basic properties, read and update the membership of the groups this app has access to without a signed-in user. Group properties and owners cannot be updated and groups cannot be deleted. dbaae8cf-10b5-4b86-a4a1-f871c94c6695 Application GroupMember.ReadWrite.All Allows the app to read your organizations identity (authentication) providers properties without a signed in user. e321f0bb-e7f7-481e-bb28-e3b0b32d4bd0 Application IdentityProvider.Read.All Allows the app to read and write your organizations identity (authentication) providers properties without a signed in user. 90db2b9a-d928-4d33-a4dd-8442ae3d41e4 Application IdentityProvider.ReadWrite.All Allows the app to read the identity risk event information for your organization without a signed in user. 6e472fd1-ad78-48da-a0f0-97ab2c6b769e Application IdentityRiskEvent.Read.All Allows the app to read and update identity risk detection information for your organization without a signed-in user. Update operations include confirming risk event detections. db06fb33-1953-4b7b-a2ac-f1e2c854f7ae Application IdentityRiskEvent.ReadWrite.All Allows the app to read all risky service principal information for your organization, without a signed-in user. 607c7344-0eed-41e5-823a-9695ebe1b7b0 Application IdentityRiskyServicePrincipal.Read.All Allows the app to read and update identity risky service principal for your organization, without a signed-in user. cb8d6980-6bcb-4507-afec-ed6de3a2d798 Application IdentityRiskyServicePrincipal.ReadWrite.All Allows the app to read the identity risky user information for your organization without a signed in user. dc5007c0-2d7d-4c42-879c-2dab87571379 Application IdentityRiskyUser.Read.All Allows the app to read and update identity risky user information for your organization without a signed-in user. Update operations include dismissing risky users. 656f6061-f9fe-4807-9708-6a2e0934df76 Application IdentityRiskyUser.ReadWrite.All Allows the app to read your organization\u0026rsquo;s user flows, without a signed-in user. 1b0c317f-dd31-4305-9932-259a8b6e8099 Application IdentityUserFlow.Read.All Allows the app to read or write your organization\u0026rsquo;s user flows, without a signed-in user. 65319a09-a2be-469d-8782-f6b07debf789 Application IdentityUserFlow.ReadWrite.All Allows the app to read data connectors without a signed-in user. 7ab52c2f-a2ee-4d98-9ebc-725e3934aae2 Application IndustryData-DataConnector.Read.All Allows the app to read and write data connectors without a signed-in user. eda0971c-482e-4345-b28f-69c309cb8a34 Application IndustryData-DataConnector.ReadWrite.All Allows the app to upload data files to a data connector without a signed-in user. 9334c44b-a7c6-4350-8036-6bf8e02b4c1f Application IndustryData-DataConnector.Upload Allows the app to read inbound data flows without a signed-in user. 305f6ba2-049a-4b1b-88bb-fe7e08758a00 Application IndustryData-InboundFlow.Read.All Allows the app to read and write inbound data flows without a signed-in user. e688c61f-d4c6-4d64-a197-3bcf6ba1d6ad Application IndustryData-InboundFlow.ReadWrite.All Allows the app to read reference definitions without a signed-in user. 6ee891c3-74a4-4148-8463-0c834375dfaf Application IndustryData-ReferenceDefinition.Read.All Allows the app to read current and previous IndustryData runs without a signed-in user. f6f5d10b-3024-4d1d-b674-aae4df4a1a73 Application IndustryData-Run.Read.All Allows the app to read source system definitions without a signed-in user. bc167a60-39fe-4865-8b44-78400fc6ed03 Application IndustryData-SourceSystem.Read.All Allows the app to read and write source system definitions without a signed-in user. 7d866958-e06e-4dd6-91c6-a086b3f5cfeb Application IndustryData-SourceSystem.ReadWrite.All Allows the app to read time period definitions without a signed-in user. 7c55c952-b095-4c23-a522-022bce4cc1e3 Application IndustryData-TimePeriod.Read.All Allows the app to read and write time period definitions without a signed-in user. 7afa7744-a782-4a32-b8c2-e3db637e8de7 Application IndustryData-TimePeriod.ReadWrite.All Allows the app to read basic service and resource information without a signed-in user. 4f5ac95f-62fd-472c-b60f-125d24ca0bc5 Application IndustryData.ReadBasic.All Allows the app to read all configurations applicable to users for protecting organizational data, without a signed-in user. 14f49b9f-4bf2-4d24-b80e-b27ec58409bd Application InformationProtectionConfig.Read.All Allows an app to sign digests for data without a signed-in user. cbe6c7e4-09aa-4b8d-b3c3-2dbb59af4b54 Application InformationProtectionContent.Sign.All Allows the app to create protected content without a signed-in user. 287bd98c-e865-4e8c-bade-1a85523195b9 Application InformationProtectionContent.Write.All Allows an app to read published sensitivity labels and label policy settings for the entire organization or a specific user, without a signed in user. 19da66cb-0fb0-4390-b071-ebc76a349482 Application InformationProtectionPolicy.Read.All Allows the app to read all learning content in the organization\u0026rsquo;s directory, without a signed-in user. 8740813e-d8aa-4204-860e-2a0f8f84dbc8 Application LearningContent.Read.All Allowstheapptomanage all learningcontentintheorganization\u0026rsquo;sdirectory, without a signed-in user. 444d6fcb-b738-41e5-b103-ac4f2a2628a3 Application LearningContent.ReadWrite.All Allows an app to manage license assignments for users and groups, without a signed-in user. 5facf0c1-8979-4e95-abcf-ff3d079771c0 Application LicenseAssignment.ReadWrite.All Allows the app to list and read all workflows, tasks and related lifecycle workflows resources without a signed-in user. 7c67316a-232a-4b84-be22-cea2c0906404 Application LifecycleWorkflows.Read.All Allows the app to create, update, list, read and delete all workflows, tasks and related lifecycle workflows resources without a signed-in user. 5c505cf4-8424-4b8e-aa14-ee06e3bb23e3 Application LifecycleWorkflows.ReadWrite.All Allows the app to read mail in all mailboxes without a signed-in user. 810c84a8-4a9e-49e6-bf7d-12d183f40d01 Application Mail.Read Allows the app to read basic mail properties in all mailboxes without a signed-in user. Includes all properties except body, previewBody, attachments and any extended properties. 6be147d2-ea4f-4b5a-a3fa-3eab6f3c140a Application Mail.ReadBasic Allows the app to read basic mail properties in all mailboxes without a signed-in user. Includes all properties except body, previewBody, attachments and any extended properties. 693c5e45-0940-467d-9b8a-1022fb9d42ef Application Mail.ReadBasic.All Allows the app to create, read, update, and delete mail in all mailboxes without a signed-in user. Does not include permission to send mail. e2a3a72e-5f79-4c64-b1b1-878b674786c9 Application Mail.ReadWrite Allows the app to send mail as any user without a signed-in user. b633e1c5-b582-4048-a93e-9f11b44c7e96 Application Mail.Send Allows the app to read user\u0026rsquo;s mailbox settings without a signed-in user. Does not include permission to send mail. 40f97065-369a-49f4-947c-6a255697ae91 Application MailboxSettings.Read Allows the app to create, read, update, and delete user\u0026rsquo;s mailbox settings without a signed-in user. Does not include permission to send mail. 6931bccd-447a-43d1-b442-00a195474933 Application MailboxSettings.ReadWrite Allows the app to read the memberships of hidden groups and administrative units without a signed-in user. 658aa5d8-239f-45c4-aa12-864f4fc7e490 Application Member.Read.Hidden Allows the app to read your organization\u0026rsquo;s network access braches, without a signed-in user. 39ae4a24-1ef0-49e8-9d63-2a66f5c39edd Application NetworkAccessBranch.Read.All Allows the app to read and write your organization\u0026rsquo;s network access braches, without a signed-in user. 8137102d-ec16-4191-aaf8-7aeda8026183 Application NetworkAccessBranch.ReadWrite.All Allows the app to read your organization\u0026rsquo;s network access policies, without a signed-in user. 8a3d36bf-cb46-4bcc-bec9-8d92829dab84 Application NetworkAccessPolicy.Read.All Allows the app to read and write your organization\u0026rsquo;s network access policies, without a signed-in user. f0c341be-8348-4989-8e43-660324294538 Application NetworkAccessPolicy.ReadWrite.All Allows the app to read all the OneNote notebooks in your organization, without a signed-in user. 3aeca27b-ee3a-4c2b-8ded-80376e2134a4 Application Notes.Read.All Allows the app to read all the OneNote notebooks in your organization, without a signed-in user. 0c458cef-11f3-48c2-a568-c66751c238c0 Application Notes.ReadWrite.All Allows the app to read online meeting artifacts in your organization, without a signed-in user. df01ed3b-eb61-4eca-9965-6b3d789751b2 Application OnlineMeetingArtifact.Read.All Allows the app to read all recordings of all online meetings, without a signed-in user. a4a08342-c95d-476b-b943-97e100569c8d Application OnlineMeetingRecording.Read.All Allows the app to read online meeting details in your organization, without a signed-in user. c1684f21-1984-47fa-9d61-2dc8c296bb70 Application OnlineMeetings.Read.All Allows the app to read and create online meetings as an application in your organization. b8bb2037-6e08-44ac-a4ea-4674e010e2a4 Application OnlineMeetings.ReadWrite.All Allows the app to read all transcripts of all online meetings, without a signed-in user. a4a80d8d-d283-4bd8-8504-555ec3870630 Application OnlineMeetingTranscript.Read.All Allows the app to create, view, update and delete on-premises published resources, on-premises agents and agent groups, as part of a hybrid identity configuration, without a signed in user. 0b57845e-aa49-4e6f-8109-ce654fffa618 Application OnPremisesPublishingProfiles.ReadWrite.All Allows the app to read the organization and related resources, without a signed-in user.Related resources include things like subscribed skus and tenant branding information. 498476ce-e0fe-48b0-b801-37ba7e2685c6 Application Organization.Read.All Allows the app to read and write the organization and related resources, without a signed-in user.Related resources include things like subscribed skus and tenant branding information. 292d869f-3427-49a8-9dab-8c70152b74e9 Application Organization.ReadWrite.All Allows the app to read all organizational contacts without a signed-in user. These contacts are managed by the organization and are different from a user\u0026rsquo;s personal contacts. e1a88a34-94c4-4418-be12-c87b00e26bea Application OrgContact.Read.All Allows the app to read any user\u0026rsquo;s scored list of relevant people, without a signed-in user. The list can include local contacts, contacts from social networking, your organization\u0026rsquo;s directory, and people from recent communications (such as email and Skype). b528084d-ad10-4598-8b93-929746b4d7d6 Application People.Read.All Allows the app to read company places (conference rooms and room lists) for calendar events and other applications, without a signed-in user. 913b9306-0ce1-42b8-9137-6a7df690a760 Application Place.Read.All Allows the app to read all your organization\u0026rsquo;s policies without a signed in user. 246dd0d5-5bd0-4def-940b-0421030a5b68 Application Policy.Read.All Allows the app to read your organization\u0026rsquo;s conditional access policies, without a signed-in user. 37730810-e9ba-4e46-b07e-8ca78d182097 Application Policy.Read.ConditionalAccess Allows the app to read policies related to consent and permission grants for applications, without a signed-in user. 9e640839-a198-48fb-8b9a-013fd6f6cbcd Application Policy.Read.PermissionGrant Allows the app to read and write your organization\u0026rsquo;s directory access review default policy without a signed-in user. 77c863fd-06c0-47ce-a7eb-49773e89d319 Application Policy.ReadWrite.AccessReview Allows the app to read and write your organization\u0026rsquo;s application configuration policies, without a signed-in user. This includes policies such as activityBasedTimeoutPolicy, claimsMappingPolicy, homeRealmDiscoveryPolicy, tokenIssuancePolicy and tokenLifetimePolicy. be74164b-cff1-491c-8741-e671cb536e13 Application Policy.ReadWrite.ApplicationConfiguration Allows the app to read and write all authentication flow policies for the tenant, without a signed-in user. 25f85f3c-f66c-4205-8cd5-de92dd7f0cec Application Policy.ReadWrite.AuthenticationFlows Allows the app to read and write all authentication method policies for the tenant, without a signed-in user. 29c18626-4985-4dcd-85c0-193eef327366 Application Policy.ReadWrite.AuthenticationMethod Allows the app to read and write your organization\u0026rsquo;s authorization policy without a signed in user. For example, authorization policies can control some of the permissions that the out-of-the-box user role has by default. fb221be6-99f2-473f-bd32-01c6a0e9ca3b Application Policy.ReadWrite.Authorization Allows the app to read and write your organization\u0026rsquo;s conditional access policies, without a signed-in user. 01c0a623-fc9b-48e9-b794-0756f8e8f067 Application Policy.ReadWrite.ConditionalAccess Allows the app to read and write your organization\u0026rsquo;s consent requests policy without a signed-in user. 999f8c63-0a38-4f1b-91fd-ed1947bdd1a9 Application Policy.ReadWrite.ConsentRequest Allows the app to read and write your organization\u0026rsquo;s cross tenant access policies without a signed-in user. 338163d7-f101-4c92-94ba-ca46fe52447c Application Policy.ReadWrite.CrossTenantAccess Allows the application to read and update the organization\u0026rsquo;s external identities policy without a signed-in user. For example, external identities policy controls if users invited to access resources in your organization via B2B collaboration or B2B direct connect are allowed to self-service leave. 03cc4f92-788e-4ede-b93f-199424d144a5 Application Policy.ReadWrite.ExternalIdentities Allows the app to read and write feature rollout policies without a signed-in user. Includes abilities to assign and remove users and groups to rollout of a specific feature. 2044e4f1-e56c-435b-925c-44cd8f6ba89a Application Policy.ReadWrite.FeatureRollout Allows the app to manage policies related to consent and permission grants for applications, without a signed-in user. a402ca1c-2696-4531-972d-6e5ee4aa11ea Application Policy.ReadWrite.PermissionGrant Allows the app to read and write your organization\u0026rsquo;s security defaults policy, without a signed-in user. 1c6e93a6-28e2-4cbb-9f64-1a46a821124d Application Policy.ReadWrite.SecurityDefaults Allows the app to read and write your organization\u0026rsquo;s trust framework policies without a signed in user. 79a677f7-b79d-40d0-a36a-3e6f8688dd7a Application Policy.ReadWrite.TrustFramework Allows the app to read all presence information and write activity and availability of all users in the directory without a signed-in user. Presence information includes activity, availability, status note, calendar out-of-office message, time zone and location. 83cded22-8297-4ff6-a7fa-e97e9545a259 Application Presence.ReadWrite.All Allows the application to read printers without a signed-in user. 9709bb33-4549-49d4-8ed9-a8f65e45bb0f Application Printer.Read.All Allows the application to read and update printers without a signed-in user. Does not allow creating (registering) or deleting (unregistering) printers. f5b3f73d-6247-44df-a74c-866173fddab0 Application Printer.ReadWrite.All Allows the application to perform advanced operations like redirecting a print job to another printer without a signed-in user. Also allows the application to read and update the metadata of print jobs. 58a52f47-9e36-4b17-9ebe-ce4ef7f3e6c8 Application PrintJob.Manage.All Allows the application to read the metadata and document content of print jobs without a signed-in user. ac6f956c-edea-44e4-bd06-64b1b4b9aec9 Application PrintJob.Read.All Allows the application to read the metadata of print jobs without a signed-in user.Does not allow access to print job document content. fbf67eee-e074-4ef7-b965-ab5ce1c1f689 Application PrintJob.ReadBasic.All Allows the application to read and update the metadata and document content of print jobs without a signed-in user. 5114b07b-2898-4de7-a541-53b0004e2e13 Application PrintJob.ReadWrite.All Allows the application to read and update the metadata of print jobs without a signed-in user.Does not allow access to print job document content. 57878358-37f4-4d3a-8c20-4816e0d457b1 Application PrintJob.ReadWriteBasic.All Allows the application to read tenant-wide print settings without a signed-in user. b5991872-94cf-4652-9765-29535087c6d8 Application PrintSettings.Read.All Allows the application to read and update print task definitions without a signed-in user. 456b71a7-0ee0-4588-9842-c123fcc8f664 Application PrintTaskDefinition.ReadWrite.All Allows the app to read time-based assignment and just-in-time elevation (including scheduled elevation) of Azure AD built-in and custom administrative roles in your organization, without a signed-in user. 4cdc2547-9148-4295-8d11-be0db1391d6b Application PrivilegedAccess.Read.AzureAD Allows the app to read time-based assignment and just-in-time elevation (including scheduled elevation) of Azure AD groups in your organization, without a signed-in user. 01e37dc9-c035-40bd-b438-b2879c4870a6 Application PrivilegedAccess.Read.AzureADGroup Allows the app to read time-based assignment and just-in-time elevation of user privileges to audit Azure resources in your organization, without a signed-in user. 5df6fe86-1be0-44eb-b916-7bd443a71236 Application PrivilegedAccess.Read.AzureResources Allows the app to request and manage time-based assignment and just-in-time elevation (including scheduled elevation) of Azure AD built-in and custom administrative roles in your organization, without a signed-in user. 854d9ab1-6657-4ec8-be45-823027bcd009 Application PrivilegedAccess.ReadWrite.AzureAD Allows the app to request and manage time-based assignment and just-in-time elevation (including scheduled elevation) of Azure AD groups in your organization, without a signed-in user. 2f6817f8-7b12-4f0f-bc18-eeaf60705a9e Application PrivilegedAccess.ReadWrite.AzureADGroup Allows the app to request and manage time-based assignment and just-in-time elevation of Azure resources (like your subscriptions, resource groups, storage, compute) in your organization, without a signed-in user. 6f9d5abc-2db6-400b-a267-7de22a40fb87 Application PrivilegedAccess.ReadWrite.AzureResources Allows the app to read programs and program controls in the organization, without a signed-in user. eedb7fdd-7539-4345-a38b-4839e4a84cbd Application ProgramControl.Read.All Allows the app to read, update, delete and perform actions on programs and program controls in the organization, without a signed-in user. 60a901ed-09f7-4aa5-a16e-7dd3d6f9de36 Application ProgramControl.ReadWrite.All Allows an app to read all question and answers, without a signed-in user. ee49e170-1dd1-4030-b44c-61ad6e98f743 Application QnA.Read.All Allows the application to read any data from Records Management, such as configuration, labels, and policies without the signed in user. ac3a2b8e-03a3-4da9-9ce0-cbe28bf1accd Application RecordsManagement.Read.All Allow the application to create, update and delete any data from Records Management, such as configuration, labels, and policies without the signed in user. eb158f57-df43-4751-8b21-b8932adb3d34 Application RecordsManagement.ReadWrite.All Allows an app to read all service usage reports without a signed-in user. Services that provide usage reports include Office 365 and Azure Active Directory. 230c1aed-a721-4c5d-9cb4-a90514e508ef Application Reports.Read.All Allows the app to read all admin report settings, such as whether to display concealed information in reports, without a signed-in user. ee353f83-55ef-4b78-82da-555bfa2b4b95 Application ReportSettings.Read.All Allows the app to read and update all admin report settings, such as whether to display concealed information in reports, without a signed-in user. 2a60023f-3219-47ad-baa4-40e17cd02a1d Application ReportSettings.ReadWrite.All Allows the app to read role-based access control (RBAC) settings for all RBAC providers without a signed-in user. This includes reading role definitions and role assignments. c7fbd983-d9aa-4fa7-84b8-17382c103bc4 Application RoleManagement.Read.All Allows the app to read the Cloud PC role-based access control (RBAC) settings, without a signed-in user. 031a549a-bb80-49b6-8032-2068448c6a3c Application RoleManagement.Read.CloudPC Allows the app to read the role-based access control (RBAC) settings for your company\u0026rsquo;s directory, without a signed-in user. This includes reading directory role templates, directory roles and memberships. 483bed4a-2ad3-4361-a73b-c83ccdbdc53c Application RoleManagement.Read.Directory Allows the app to read and manage the Cloud PC role-based access control (RBAC) settings, without a signed-in user. This includes reading and managing Cloud PC role definitions and memberships. 274d0592-d1b6-44bd-af1d-26d259bcb43a Application RoleManagement.ReadWrite.CloudPC Allows the app to read and manage the role-based access control (RBAC) settings for your company\u0026rsquo;s directory, without a signed-in user. This includes instantiating directory roles and managing directory role membership, and reading directory role templates, directory roles and memberships. 9e3f62cf-ca93-4989-b6ce-bf83c28f9fe8 Application RoleManagement.ReadWrite.Directory Allows the app to read all role-based access control (RBAC) alerts for your company\u0026rsquo;s directory, without a signed-in user. This includes reading alert statuses, alert definitions, alert configurations and incidents that lead to an alert. ef31918f-2d50-4755-8943-b8638c0a077e Application RoleManagementAlert.Read.Directory Allows the app to read and manage all role-based access control (RBAC) alerts for your company\u0026rsquo;s directory, without a signed-in user. This includes managing alert settings, initiating alert scans, dimissing alerts, remediating alert incidents, and reading alert statuses, alert definitions, alert configurations and incidents that lead to an alert. 11059518-d6a6-4851-98ed-509268489c4a Application RoleManagementAlert.ReadWrite.Directory Allows the app to read all schedules, schedule groups, shifts and associated entities in the Teams or Shifts application without a signed-in user. 7b2ebf90-d836-437f-b90d-7b62722c4456 Application Schedule.Read.All Allows the app to manage all schedules, schedule groups, shifts and associated entities in the Teams or Shifts application without a signed-in user. b7760610-0545-4e8a-9ec3-cce9e63db01c Application Schedule.ReadWrite.All Allows the app to read search configurations, without a signed-in user. ada977a5-b8b1-493b-9a91-66c206d76ecf Application SearchConfiguration.Read.All Allows the app to read and write search configurations, without a signed-in user. 0e778b85-fefa-466d-9eec-750569d92122 Application SearchConfiguration.ReadWrite.All Allows the app to read security actions, without a signed-in user. 5e0edab9-c148-49d0-b423-ac253e121825 Application SecurityActions.Read.All Allows the app to read or update security actions, without a signed-in user. f2bf083f-0179-402a-bedb-b2784de8a49b Application SecurityActions.ReadWrite.All Allows the app to read all security alerts, without a signed-in user. 472e4a4d-bb4a-4026-98d1-0b0d74cb74a5 Application SecurityAlert.Read.All Allows the app to read and write to all security alerts, without a signed-in user. ed4fca05-be46-441f-9803-1873825f8fdb Application SecurityAlert.ReadWrite.All Read email metadata and security detection details, without a signed-in user. b48f7ac2-044d-4281-b02f-75db744d6f5f Application SecurityAnalyzedMessage.Read.All Read email metadata and security detection details, and execute remediation actions like deleting an email, without a signed-in user. 04c55753-2244-4c25-87fc-704ab82a4f69 Application SecurityAnalyzedMessage.ReadWrite.All Allows the app to read your organizations security events without a signed-in user. bf394140-e372-4bf9-a898-299cfc7564e5 Application SecurityEvents.Read.All Allows the app to read your organizations security events without a signed-in user. Also allows the app to update editable properties in security events. d903a879-88e0-4c09-b0c9-82f6a1333f84 Application SecurityEvents.ReadWrite.All Allows the app to read all security incidents, without a signed-in user. 45cc0394-e837-488b-a098-1918f48d186c Application SecurityIncident.Read.All Allows the app to read and write to all security incidents, without a signed-in user. 34bf0e97-1971-4929-b999-9e2442d941d7 Application SecurityIncident.ReadWrite.All Allows the app to read your tenant\u0026rsquo;s service health information, without a signed-in user. Health information may include service issues or service health overviews. 79c261e0-fe76-4144-aad5-bdc68fbe4037 Application ServiceHealth.Read.All Allows the app to read your tenant\u0026rsquo;s service announcement messages, without a signed-in user. Messages may include information about new or changed features. 1b620472-6534-4fe6-9df2-4680e8aa28ec Application ServiceMessage.Read.All Allows the app to read service principal endpoints 5256681e-b7f6-40c0-8447-2d9db68797a0 Application ServicePrincipalEndpoint.Read.All Allows the app to update service principal endpoints 89c8469c-83ad-45f7-8ff2-6e3d4285709e Application ServicePrincipalEndpoint.ReadWrite.All Allows the application to read the tenant-level settings of SharePoint and OneDrive, without a signed-in user. 83d4163d-a2d8-4d3b-9695-4ae3ca98f888 Application SharePointTenantSettings.Read.All Allows the application to read and change the tenant-level settings of SharePoint and OneDrive, without a signed-in user. 19b94e34-907c-4f43-bde9-38b1909ed408 Application SharePointTenantSettings.ReadWrite.All Allows the app to read all the short notes without a signed-in user. 0c7d31ec-31ca-4f58-b6ec-9950b6b0de69 Application ShortNotes.Read.All Allows the app to read, create, edit, and delete all the short notes without a signed-in user. 842c284c-763d-4a97-838d-79787d129bab Application ShortNotes.ReadWrite.All Allows the app to have full control of all site collections without a signed in user. a82116e5-55eb-4c41-a434-62fe8a61c773 Application Sites.FullControl.All Allows the app to create or delete document libraries and lists in all site collections without a signed in user. 0c0bf378-bf22-4481-8f81-9e89a9b4960a Application Sites.Manage.All Allows the app to read documents and list items in all site collections without a signed in user. 332a536c-c7ef-4017-ab91-336970924f0d Application Sites.Read.All Allows the app to create, read, update, and delete documents and list items in all site collections without a signed in user. 9492366f-7969-46a4-8d15-ed1a20078fff Application Sites.ReadWrite.All Allow the application to access a subset of site collections without a signed in user.The specific site collections and the permissions granted will be configured in SharePoint Online. 883ea226-0bf2-4a8f-9f9d-92c9162a727d Application Sites.Selected Allowstheapptoreadsubjectrights requestswithout asigned-inuser. ee1460f0-368b-4153-870a-4e1ca7e72c42 Application SubjectRightsRequest.Read.All Allowstheapptoreadandwrite subjectrights requestswithout a signed in user. 8387eaa4-1a3c-41f5-b261-f888138e6041 Application SubjectRightsRequest.ReadWrite.All Allows the application to read Azure AD synchronization information, without a signed-in user. 5ba43d2f-fa88-4db2-bd1c-a67c5f0fb1ce Application Synchronization.Read.All Allows the application to configure the Azure AD synchronization service, without a signed-in user. 9b50c33d-700f-43b1-b2eb-87e89b703581 Application Synchronization.ReadWrite.All Allows the app to read all users tasks and task lists in your organization, without a signed-in user. f10e1f91-74ed-437f-a6fd-d6ae88e26c1f Application Tasks.Read.All Allows the app to create, read, update and delete all users tasks and task lists in your organization, without a signed-in user 44e666d1-d276-445b-a5fc-8815eeb81d55 Application Tasks.ReadWrite.All Allows the app to create teams without a signed-in user. 23fc2474-f741-46ce-8465-674744c5c361 Application Team.Create Get a list of all teams, without a signed-in user. 2280dda6-0bfd-44ee-a2f4-cb867cfc4c1e Application Team.ReadBasic.All Read the members of all teams, without a signed-in user. 660b7406-55f1-41ca-a0ed-0b035e182f3e Application TeamMember.Read.All Add and remove members from all teams, without a signed-in user. Also allows changing a team member\u0026rsquo;s role, for example from owner to non-owner. 0121dc95-1b9f-4aed-8bac-58c5ac466691 Application TeamMember.ReadWrite.All Add and remove members from all teams, without a signed-in user. Does not allow adding or removing a member with the owner role. Additionally, does not allow the app to elevate an existing member to the owner role. 4437522e-9a86-4a41-a7da-e380edd4a97d Application TeamMember.ReadWriteNonOwnerRole.All Allows the app to read all users\u0026rsquo; teamwork activity feed, without a signed-in user. 70dec828-f620-4914-aa83-a29117306807 Application TeamsActivity.Read.All Allows the app to create new notifications in users\u0026rsquo; teamwork activity feeds without a signed in user. These notifications may not be discoverable or be held or governed by compliance policies. a267235f-af13-44dc-8385-c1dc93023186 Application TeamsActivity.Send Allows the app to read the Teams apps that are installed in any chat, without a signed-in user. Does not give the ability to read application-specific settings. cc7e7635-2586-41d6-adaa-a8d3bcad5ee5 Application TeamsAppInstallation.ReadForChat.All Allows the app to read the Teams apps that are installed in any team, without a signed-in user. Does not give the ability to read application-specific settings. 1f615aea-6bf9-4b05-84bd-46388e138537 Application TeamsAppInstallation.ReadForTeam.All Allows the app to read the Teams apps that are installed for any user, without a signed-in user. Does not give the ability to read application-specific settings. 9ce09611-f4f7-4abd-a629-a05450422a97 Application TeamsAppInstallation.ReadForUser.All Allows the app to read, install, upgrade, and uninstall Teams apps in any chat, without a signed-in user. Gives the ability to manage permission grants for accessing those specific chats\u0026rsquo; data. 6e74eff9-4a21-45d6-bc03-3a20f61f8281 Application TeamsAppInstallation.ReadWriteAndConsentForChat.All Allows the app to read, install, upgrade, and uninstall Teams apps in any team, without a signed-in user. Gives the ability to manage permission grants for accessing those specific teams\u0026rsquo; data. b0c13be0-8e20-4bc5-8c55-963c23a39ce9 Application TeamsAppInstallation.ReadWriteAndConsentForTeam.All Allows a Teams app to read, install, upgrade, and uninstall itself for any chat, without a signed-in user, and manage its permission grants for accessing those specific chats\u0026rsquo; data. ba1ba90b-2d8f-487e-9f16-80728d85bb5c Application TeamsAppInstallation.ReadWriteAndConsentSelfForChat.All Allows a Teams app to read, install, upgrade, and uninstall itself for any team, without a signed-in user, and manage its permission grants for accessing those specific teams\u0026rsquo; data. 1e4be56c-312e-42b8-a2c9-009600d732c0 Application TeamsAppInstallation.ReadWriteAndConsentSelfForTeam.All Allows the app to read, install, upgrade, and uninstall Teams apps in any chat, without a signed-in user. Does not give the ability to read application-specific settings. 9e19bae1-2623-4c4f-ab6e-2664615ff9a0 Application TeamsAppInstallation.ReadWriteForChat.All Allows the app to read, install, upgrade, and uninstall Teams apps in any team, without a signed-in user. Does not give the ability to read application-specific settings. 5dad17ba-f6cc-4954-a5a2-a0dcc95154f0 Application TeamsAppInstallation.ReadWriteForTeam.All Allows the app to read, install, upgrade, and uninstall Teams apps for any user, without a signed-in user. Does not give the ability to read application-specific settings. 74ef0291-ca83-4d02-8c7e-d2391e6a444f Application TeamsAppInstallation.ReadWriteForUser.All Allows a Teams app to read, install, upgrade, and uninstall itself for any chat, without a signed-in user. 73a45059-f39c-4baf-9182-4954ac0e55cf Application TeamsAppInstallation.ReadWriteSelfForChat.All Allows a Teams app to read, install, upgrade, and uninstall itself in any team, without a signed-in user. 9f67436c-5415-4e7f-8ac1-3014a7132630 Application TeamsAppInstallation.ReadWriteSelfForTeam.All Allows a Teams app to read, install, upgrade, and uninstall itself to any user, without a signed-in user. 908de74d-f8b2-4d6b-a9ed-2a17b3b78179 Application TeamsAppInstallation.ReadWriteSelfForUser.All Read all team\u0026rsquo;s settings, without a signed-in user. 242607bd-1d2c-432c-82eb-bdb27baa23ab Application TeamSettings.Read.All Read and change all teams\u0026rsquo; settings, without a signed-in user. bdd80a03-d9bc-451d-b7c4-ce7c63fe3c8f Application TeamSettings.ReadWrite.All Allows the app to create tabs in any team in Microsoft Teams, without a signed-in user. This does not grant the ability to read, modify or delete tabs after they are created, or give access to the content inside the tabs. 49981c42-fd7b-4530-be03-e77b21aed25e Application TeamsTab.Create Read the names and settings of tabs inside any team in Microsoft Teams, without a signed-in user. This does not give access to the content inside the tabs. 46890524-499a-4bb2-ad64-1476b4f3e1cf Application TeamsTab.Read.All Read and write tabs in any team in Microsoft Teams, without a signed-in user. This does not give access to the content inside the tabs. a96d855f-016b-47d7-b51c-1218a98d791c Application TeamsTab.ReadWrite.All Allows a Teams app to read, install, upgrade, and uninstall all tabs for any chat, without a signed-in user. fd9ce730-a250-40dc-bd44-8dc8d20f39ea Application TeamsTab.ReadWriteForChat.All Allows a Teams app to read, install, upgrade, and uninstall all tabs in any team, without a signed-in user. 6163d4f4-fbf8-43da-a7b4-060fe85ed148 Application TeamsTab.ReadWriteForTeam.All Allows a Teams app to read, install, upgrade, and uninstall all tabs for any user, without a signed-in user. 425b4b59-d5af-45c8-832f-bb0b7402348a Application TeamsTab.ReadWriteForUser.All Allows a Teams app to read, install, upgrade, and uninstall its own tabs for any chat, without a signed-in user. 9f62e4a2-a2d6-4350-b28b-d244728c4f86 Application TeamsTab.ReadWriteSelfForChat.All Allows a Teams app to read, install, upgrade, and uninstall its own tabs in any team, without a signed-in user. 91c32b81-0ef0-453f-a5c7-4ce2e562f449 Application TeamsTab.ReadWriteSelfForTeam.All Allows a Teams app to read, install, upgrade, and uninstall its own tabs for any user, without a signed-in user. 3c42dec6-49e8-4a0a-b469-36cff0d9da93 Application TeamsTab.ReadWriteSelfForUser.All Allows the app to read all available Teams Templates, without a signed-user. 6323133e-1f6e-46d4-9372-ac33a0870636 Application TeamTemplates.Read.All Allows the app to create chat and channel messages, without a signed in user. The app specifies which user appears as the sender, and can backdate the message to appear as if it was sent long ago. The messages can be sent to any chat or channel in the organization. dfb0dd15-61de-45b2-be36-d6a69fba3c79 Application Teamwork.Migrate.All Allows the app to read the Teams app settings without a signed-in user. 475ebe88-f071-4bd7-af2b-642952bd4986 Application TeamworkAppSettings.Read.All Allows the app to read and write the Teams app settings without a signed-in user. ab5b445e-8f10-45f4-9c79-dd3f8062cc4e Application TeamworkAppSettings.ReadWrite.All Allow the app to read the management data for Teams devices, without a signed-in user. 0591bafd-7c1c-4c30-a2a5-2b9aacb1dfe8 Application TeamworkDevice.Read.All Allow the app to read and write the management data for Teams devices, without a signed-in user. 79c02f5b-bd4f-4713-bc2c-a8a4a66e127b Application TeamworkDevice.ReadWrite.All Allows the app to readtags in Teamswithout a signed-in user. b74fd6c4-4bde-488e-9695-eeb100e4907f Application TeamworkTag.Read.All Allows the app to read and write tags in Teams without a signed-in user. a3371ca5-911d-46d6-901c-42c8c7a937d8 Application TeamworkTag.ReadWrite.All Allows the app to read all term store data, without a signed-in user. This includes all sets, groups and terms in the term store. ea047cc2-df29-4f3e-83a3-205de61501ca Application TermStore.Read.All Allows the app to read, edit or write all term store data, without a signed-in user. This includes all sets, groups and terms in the term store. f12eb8d6-28e3-46e6-b2c0-b7e4dc69fc95 Application TermStore.ReadWrite.All Allows an app to read your organization\u0026rsquo;s threat assessment requests, without a signed-in user. f8f035bb-2cce-47fb-8bf5-7baf3ecbee48 Application ThreatAssessment.Read.All Allows the app to run hunting queries, without a signed-in user. dd98c7f5-2d42-42d3-a0e4-633161547251 Application ThreatHunting.Read.All Allows the app to read all the indicators for your organization, without a signed-in user. 197ee4e9-b993-4066-898f-d6aecc55125b Application ThreatIndicators.Read.All Allows the app to create threat indicators, and fully manage those threat indicators (read, update and delete), without a signed-in user. It cannot update any threat indicators it does not own. 21792b6c-c986-4ffc-85de-df9da54b52fa Application ThreatIndicators.ReadWrite.OwnedBy Allows the app to read your organization\u0026rsquo;s threat submissions and to view threat submission policies without a signed-in user. 86632667-cd15-4845-ad89-48a88e8412e1 Application ThreatSubmission.Read.All Allows the app to read your organization\u0026rsquo;s threat submissions and threat submission policies without a signed-in user. Also allows the app to create new threat submissions without a signed-in user. d72bdbf4-a59b-405c-8b04-5995895819ac Application ThreatSubmission.ReadWrite.All Allows the app to read your organization\u0026rsquo;s threat submission policies without a signed-in user. Also allows the app to create new threat submission polices without a signed-in user. 926a6798-b100-4a20-a22f-a4918f13951d Application ThreatSubmissionPolicy.ReadWrite.All Allows the app to read trust framework key set properties without a signed-in user. fff194f1-7dce-4428-8301-1badb5518201 Application TrustFrameworkKeySet.Read.All Allows the app to read and write trust framework key set properties without a signed-in user. 4a771c9a-1cf2-4609-b88e-3d3e02d539cd Application TrustFrameworkKeySet.ReadWrite.All Allows the app to read the lifecycle information like employeeLeaveDateTime of users in your organization, without a signed-in user. 8556a004-db57-4d7a-8b82-97a13428e96f Application User-LifeCycleInfo.Read.All Allows the app to read and write the lifecycle information like employeeLeaveDateTime of users in your organization, without a signed-in user. 925f1248-0f97-47b9-8ec8-538c54e01325 Application User-LifeCycleInfo.ReadWrite.All Allows the app to enable and disable users\u0026rsquo; accounts, without a signed-in user. 3011c876-62b7-4ada-afa2-506cbbecc68c Application User.EnableDisableAccount.All Allows the app to export data (e.g. customer content or system-generated logs), associated with any user in your company, when the app is used by a privileged user (e.g. a Company Administrator). 405a51b5-8d8d-430b-9842-8be4b0e9f324 Application User.Export.All Allows the app to invite guest users to the organization, without a signed-in user. 09850681-111b-4a89-9bed-3f2cae46d706 Application User.Invite.All Allows the app to read, update and delete identities that are associated with a user\u0026rsquo;s account, without a signed in user. This controls the identities users can sign-in with. c529cfca-c91b-489c-af2b-d92990b66ce6 Application User.ManageIdentities.All Allows the app to read user profiles without a signed in user. df021288-bdef-4463-88db-98f22de89214 Application User.Read.All Allows the app to read a basic set of profile properties of other users in your organization without a signed-in user. Includes display name, first and last name, email address, open extensions, and photo. 97235f07-e226-4f63-ace3-39588e11d3a1 Application User.ReadBasic.All Allows the app to read and update user profiles without a signed in user. 741f803b-c850-494e-b5df-cde7c675a1ca Application User.ReadWrite.All Allows the app to read authentication methods of all users in your organization, without a signed-in user. Authentication methods include things like a users phone numbers and Authenticator app settings. This does not allow the app to see secret information like passwords, or to sign-in or otherwise use the authentication methods. 38d9df27-64da-44fd-b7c5-a6fbac20248f Application UserAuthenticationMethod.Read.All Allows the application to read and write authentication methods of all users in your organization, without a signed-in user. Authentication methods include things like a users phone numbers and Authenticator app settings. This does not allow the app to see secret information like passwords, or to sign-in or otherwise use the authentication methods 50483e42-d915-4231-9639-7fdb7fd190e5 Application UserAuthenticationMethod.ReadWrite.All Allows the app to send, read, update and delete users notifications, without a signed-in user. 4e774092-a092-48d1-90bd-baad67c7eb47 Application UserNotification.ReadWrite.CreatedByApp Allows the app to read all users\u0026rsquo; shift schedule preferences without a signed-in user. de023814-96df-4f53-9376-1e2891ef5a18 Application UserShiftPreferences.Read.All Allows the app to manage all users\u0026rsquo; shift schedule preferences without a signed-in user. d1eec298-80f3-49b0-9efb-d90e224798ac Application UserShiftPreferences.ReadWrite.All Allows the application to read virtual appointments for all users, without a signed-in user. The app must also be authorized to access an individual users data by the online meetings application access policy. d4f67ec2-59b5-4bdc-b4af-d78f6f9c1954 Application VirtualAppointment.Read.All Allows the application to read and write virtual appointments for all users, without a signed-in user. The app must also be authorized to access an individual users data by the online meetings application access policy. bf46a256-f47d-448f-ab78-f226fff08d40 Application VirtualAppointment.ReadWrite.All Allows the app to read and write all Windows update deployment settings for the organization without a signed-in user. 7dd1be58-6e76-4401-bf8d-31d1e8180d5b Application WindowsUpdates.ReadWrite.All Allows the app to manage workforce integrations to synchronize data from Microsoft Teams Shifts, without a signed-in user. 202bf709-e8e6-478e-bcfd-5d63c50b68e3 Application WorkforceIntegration.ReadWrite.All Till the next time!\n","date":"9 February 2023","externalUrl":null,"permalink":"/posts/ms-graph-permissions-ids/","section":"Posts","summary":"If you\u0026rsquo;re working with the Microsoft identity platform, you\u0026rsquo;re probably familiar with the concept of application Scopes or Roles.","title":"Microsoft Graph Permissions Well-Known Ids","type":"posts"},{"content":"","date":"9 February 2023","externalUrl":null,"permalink":"/tags/ms-graph/","section":"Tags","summary":"","title":"Ms-Graph","type":"tags"},{"content":"I recently passed the AZ-104 certification exam, making it the third Microsoft certification under my belt so far. I started with AZ-900, then AZ-204 and recently AZ-104. I\u0026rsquo;m planning to get the AZ-305 and eventually the AZ-400 soon™.\nTo successfully prepare for any exam you need to come up with an effective study plan. In this article you can find the tips I use to get prepared to undergo the AZ-104 certification exam.\nI\u0026rsquo;m using Azure daily so I am familiar with many of the certifications objectives, but not all of them. Having a developer background, I never needed to configure Azure Active Directory for MFA, conditional access policies or Site-to-Site VPN connections for example.\nBelow you will find how I prepared as well as some tips I used, but keep in mind that you should tailor the study plan to fit your own way of learning. Different people learn in different ways and to be successful you need to figure out what works best for you.\nMy study agenda # I\u0026rsquo;m a full-time employee and I work 40 hours per week, so finding the time to study was not always easy, luckily for me though, here in The Netherlands the winter is quite depressing: It\u0026rsquo;s dark when I leave home for the office and it\u0026rsquo;s already dark when I come back. This somehow helped me stay at home during the evening so I could dedicate time to study and prepare for the certification.\nThe time I put into studying was around 1.5/2 hours every day and around 4 or 5 hours during the weekends. It took me more or less 1.5 months to prepare for the certification.\nMy weekly goal was to put in around 15 hours. I wasn\u0026rsquo;t studying every day to not get overwhelmed, so I took some free days to relax and blow some steam off.\nResources # Here\u0026rsquo;s a list of materials that I used to get prepared, in no particular order:\nAZ-104 Study guide # The Study guide is a great resource to check how familiar you are with a specific subject. From the study guide, I flagged the areas I was least familiar with and I started focusing on these first.\nJohn Savill\u0026rsquo;s AZ-104 Study cram # This study cram was super useful to understand concepts I wasn\u0026rsquo;t familiar with because John can explain concepts in a very easy-to-understand way. I used this one to kick-start my knowledge of Azure Active Directory configuration, VPN connections and to better understand how networking works in Azure.\nMicrosoft Learn # Contrary to many, I didn\u0026rsquo;t complete the AZ-104 learning path. I found the study path too high level and not very useful, what I did instead was to use the study path to dive deeper using the resources usually listed at the end of every chapter.\nIn my opinion the learning path does not prepare you enough for the exam. Test questions go into a greater detail than what the learning path covers so, I\u0026rsquo;d suggest to just skim over the learning path and rather focus more on the resources you find at the end of each learning path module.\nAzure free trial subscription # Activating a trial subscription allowed me to have hands-on experience with all the areas I wasn\u0026rsquo;t very familiar with e.g. Azure Active Directory. An Azure trial subscription is free, you have 170.00 € of budget that will last for 30 days. Even though you have to give your credit card details you won\u0026rsquo;t be billed. If you ran out of credits, all the services will be decommissioned unless you upgrade to a Pay-As-You-Go subscription as described in the Azure free account FAQ.\nFind a practice test # There\u0026rsquo;re plenty of practice tests out there, some better than others so you have to put in some research to find a good one, and then go for it. Price vary from around 20.00 € up to around 100.00 € but I think it\u0026rsquo;s worth the money.\nMake sure you\u0026rsquo;re not using dumps because it can invalidate all your certifications and prohibit you to take new ones ever again.\nMicrosoft sponsors the MeasureUp practice tests, so that will set you up for success.\nTips # Here\u0026rsquo;s a collection of tips that helped me get the certification.\nPlan the exam date as the first step # In order to not postpone taking the exam forever, I decided to plan the exam before starting to study. I did a bit of research to understand how much it takes to get ready for the exam, then gave me some more time and planned it. I ended up giving myself two months of time to prepare, this helped me to put the time in.\nPlanning it in advance still allows you to change the exam date up to 24 hours before the exam, so it\u0026rsquo;s not a strict deadline, but I found it helpful to have a due date to look at.\nAlternate your study routine # Mixing up your study routine can be beneficial as it helps to keep things interesting and can prevent boredom. Additionally, different study methods can appeal to different learning styles and can help to reinforce the material in different ways. For example, reading documentation may help to build a strong understanding of the theoretical concepts, while practice exams can help to build test-taking skills and identify areas where you need to improve. YouTube videos can be helpful in providing additional explanations and examples of the concepts that you are studying. So, switching up your routine can help to make the most of your study time and increase your chances of success.\nCarefully review wrong practice test answers # While taking the practice test, carefully review your answers, especially the wrong ones. This may uncover some gaps in your knowledge and will give you an indication of where you need to spend some time on.\nThis point was especially important for me because I personally learn a lot more from a wrong answer than a correct one. Every time I give the wrong answer in the practice test, I dig deeper in the documentation and it really helps me understand the subject better.\nWhenever I got the same question wrong multiple times, I wrote down the question and the correct answer in a small document that I used to go over and over almost daily.\nRetake the same practice test twice # I found it very helpful to re-take the same practice test twice, possibly in the same day. Retaking the test in the same day can help to reinforce the material that you have studied and identify areas where you may still have difficulty. This can be helpful in focusing your study efforts and pinpointing areas where you need to spend more time studying.\nGet hands-on experience # Hands on experience is very important. Having only theoretical knowledge derived from the documentation may not be enough for this exam so I advise you to spend some time on practicing what you\u0026rsquo;re learning with the free Azure account. This can be invaluable to get familiar with the az cli or PowerShell cmdlet. You can do so using the Azure Cloud Shell so you don\u0026rsquo;t even have to install anything on your PC.\nEnjoy the journey # The added value of a certification in my opinion is not the certification badge, but rather all the knowledge you accrue preparing for the actual exam.\nThe exam # The exam I went through had 49 questions and I had 1 h and 40 minutes to complete it. The exam started with a case study comprised of 6 questions. I found the level of difficulty of the exam reasonable, all the questions were clear and easy to understand. The time for me was enough, but if you find yourself running out of time you can skip the question you\u0026rsquo;re not sure of using the mark for review functionality, so you can go through them at the end, avoiding the risk of running out of time.\nPlease note that you can\u0026rsquo;t review questions from the case study at the end of the exam, you can review them at only at the end of the case study.\nSummary # In this article I wanted to share my approach to prepare for a certification exam together with some tricks I used to get ready in a reasonable amount of time and how to figure out what are the knowledge gaps I had.\nTo sum up, I wanna point out that this is what worked well for me. It\u0026rsquo;s not guaranteed that this approach works equally well for you, but you may use some of the approaches I described to get yourself ready for the certification.\nI hope you find this helpful, if you have any questions/suggestions don\u0026rsquo;t hesitate to leave a comment below. If you\u0026rsquo;re preparing for AZ-104 or any other certification, I wish you best of luck 🍀.\nTill the next time.\n","date":"29 January 2023","externalUrl":null,"permalink":"/posts/ace-the-az-104/","section":"Posts","summary":"I recently passed the AZ-104 certification exam, making it the third Microsoft certification under my belt so far.","title":"Ace the AZ-104 Microsoft Azure Administrator Certification Exam: Tips and Strategies","type":"posts"},{"content":"","date":"29 January 2023","externalUrl":null,"permalink":"/tags/certifications/","section":"Tags","summary":"","title":"Certifications","type":"tags"},{"content":"OpenID Connect (OIDC) integration between Azure Active Directory and GitHub allows your GitHub Actions workflows to securely access resources in Azure, without needing to store the Azure credentials in the GitHub action secrets.\nThis functionality has been available for quite a while, it was first announced on October 2021 and up until now, it has been on my \u0026ldquo;things to look into\u0026rdquo; list.\nRecently I\u0026rsquo;ve been working on a project to migrate Azure DevOps to GitHub so I decided that time has come to look into this functionality.\nHow a typical connection is configured # Usually, to connect to Azure as an application (i.e. when running a GitHub Action) you need to:\nCreate a Service Principal in Azure Active Directory Create a Service Principal Credential Grant to the Service Principal permissions on the subscription(s) Copy the secret created in step 3 on your GitHub secrets Authenticate the workflow using the secret created above Please note that the az ad sp create-for-rbac can simplify the process a bit since it can do steps from 1 to 3 in a single go, more info can be found in the documentation\nWhy should you use secret-less connections # Having secret-less connections is far better than using some form of a shared secret. Since you don\u0026rsquo;t have any secrets, you can\u0026rsquo;t leak any moreover shared secrets usually comes with a fixed validity. Ideally, you should rotate them often to limit the risk derived from a secret leak.\nAdditionally, in the case of automated infrastructure deployments, the Service Principal will have high privileges on your subscription(s) and/or possibly Azure Active Directory since it has to create resources, potentially assign RBAC role assignments (that require the Owner role) making the event of a secret leak even more dangerous.\nWith secret-less connections, on the other hand, even if the GitHub Actions secrets are leaked, an attacker can\u0026rsquo;t gain direct access to the Azure subscription.\nPlease note that even if you store the shared secret in GitHub secrets, it\u0026rsquo;s still fairly easy to get access to the original value, see this StackOverflow question for example.\nI\u0026rsquo;m sold, now how can I set it up? # To configure OpenID Connect Integrations between Azure Active Directory and GitHub you need to do a couple of things:\nCreate an App Registration in Azure Active Directory Create a Service Principal for the App Registration created above Add the Federated Credential in the App Registration Copy the configuration values CLIENT_ID, SUBSCRIPTION_ID and TENANT_ID in GitHub Configure your workflow permissions Grant to the Service Principal the desired permissions on your subscriptions(s) Use the action azure/login@v1 to login to Azure using token exchange For a step-by-step guide, refer to the GitHub documentation\nHow does it work? # It\u0026rsquo;s not the goal of this post to dig into the nitty-gritty details, so my explanation will be quite brief. Under the hood, this uses Azure Workload identities to exchange a token issued by GitHub with a token issued by Azure Active Directory.\nFor the token exchange to be successful, you need to establish a trust relationship between the GitHub token issue and the Azure Active Directory. This trust relationship boils down to configuring the Federated Credential (created in step 3) in Azure Active Directory filling in the content of two of the claims issued by GitHub to the workflow, more specifically you need to fill in:\nThe issuer (iss claim of the access token issued by GitHub) The subject (sub claim of the access token issued by GitHub) The audience (fixed value of api://AzureADTokenExchange) Here below you can find how GitHub explains it in their announcement post. OIDC Federation If you want to dig deeper, here\u0026rsquo;s the documentation.\nManual configuration # If you go to Azure Active Directory, after you created an App Registration, when you try to add Federated Credentials, the Azure Active Directory Portal helps you with filling in the required details for setting up GitHub Federated Credentials.\nThe screen looks like the following: GitHub Federated Credentials If you have to configure multiple repositories, the manual approach falls short so let\u0026rsquo;s have a look at how we can configure it with Terraform.\nTerraform configuration # Since Terraform has a provider-based approach, we can configure a GitHub repository (or many) and, at the same time, create the required setup in Azure Active Directory.\nLet\u0026rsquo;s see how is done:\n// Look-up GitHub Actions token issuer discover document data \u0026#34;http\u0026#34; \u0026#34;github_actions_oidc_discovery_document\u0026#34; { url = \u0026#34;https://token.actions.githubusercontent.com/.well-known/openid-configuration\u0026#34; request_headers = { Accept = \u0026#34;application/json\u0026#34; } lifecycle { postcondition { condition = contains([200], self.status_code) error_message = \u0026#34;Status code invalid\u0026#34; } } } locals { github_issuer = jsondecode(data.http.github_actions_oidc_discovery_document.response_body)[\u0026#34;issuer\u0026#34;] } // Create an Azure Active Directory Application representing GitHub Actions resource \u0026#34;azuread_application\u0026#34; \u0026#34;github_app_registration\u0026#34; { display_name = \u0026#34;GitHub-App-Registration\u0026#34; } // Create a Service Principal for the GitHub Actions App Registration resource \u0026#34;azuread_service_principal\u0026#34; \u0026#34;github_service_principal\u0026#34; { application_id = azuread_application.github_app_registration.application_id use_existing = true } // Create the Federated Credential for the App Registration resource \u0026#34;azuread_application_federated_identity_credential\u0026#34; \u0026#34;github_federated_credentials\u0026#34; { application_object_id = azuread_application.github_app_registration.object_id audiences = [\u0026#34;api://AzureADTokenExchange\u0026#34;] display_name = \u0026#34;GitHub-FederatedCredential\u0026#34; issuer = local.github_issuer // You need to decide how to configure this one accordingly to your use case subject = \u0026#34;repo:${var.organization}/${var.repository_name}:environment:${var.environemnt}\u0026#34; } // Look-up current subscription and tenant id data \u0026#34;azurerm_client_config\u0026#34; \u0026#34;current\u0026#34; {} // Create a GitHub repository resource \u0026#34;github_repository\u0026#34; \u0026#34;repository\u0026#34; { name = var.repository_name description = var.repository_description } // Optional resource \u0026#34;github_repository_environment\u0026#34; \u0026#34;environment\u0026#34; { environment = var.environemnt repository = github_repository.repository.name } // Can be just regular repository secret if you don\u0026#39;t use environments resource \u0026#34;github_actions_environment_secret\u0026#34; \u0026#34;client_id\u0026#34; { environment = github_repository_environment.environment.environment repository = github_repository.repository.name secret_name = \u0026#34;CLIENT_ID\u0026#34; plaintext_value = azuread_application.github_app_registration.application_id } // Can be just regular repository secret if you don\u0026#39;t use environments resource \u0026#34;github_actions_environment_secret\u0026#34; \u0026#34;subscription_id\u0026#34; { environment = github_repository_environment.environment.environment repository = github_repository.repository.name secret_name = \u0026#34;SUBSCRIPTION_ID\u0026#34; plaintext_value = data.azurerm_client_config.current.subscription_id } // Can be just regular repository secret if you don\u0026#39;t use environments resource \u0026#34;github_actions_environment_secret\u0026#34; \u0026#34;tenant_id\u0026#34; { environment = github_repository_environment.environment.environment repository = github_repository.repository.name secret_name = \u0026#34;TENANT_ID\u0026#34; plaintext_value = data.azurerm_client_config.current.tenant_id } //providet.tf terraform { required_providers { github = { source = \u0026#34;integrations/github\u0026#34; version = \u0026#34;~\u0026gt; 5.16.0\u0026#34; } azuread = { source = \u0026#34;hashicorp/azuread\u0026#34; version = \u0026#34;~\u0026gt; 2.32.0\u0026#34; } } backend \u0026#34;azurerm\u0026#34; { ... } } # Configure the GitHub Provider provider \u0026#34;github\u0026#34; { owner = var.organization } Please note that this Terraform configuration requires multiple providers and, to run the apply successfully, you need to be authenticated into both.\nQuirks # As you can see, the configuration is quite straightforward, but there\u0026rsquo;s a catch. Since you have to configure the subject (sub) claim in the Federated Credential with the same value of the sub claim that GitHub is issuing to your workflow and, by default, the repository name will be part of the claim value, this means you will have to create one App Registration, Federated Credential and Service Principal for each repository.\nThis may be fine if you have a limited number of repositories, but in my case, I had around 60 repositories that needs to be deployed. On top of that, I (like probably most of you) have several environments e.g. Development, Testing, Acceptance, and Production and since I don\u0026rsquo;t want the same Service Principal to have access to different subscriptions for security reasons, the number of App Registrations, Federated Credentials and Service Principal gets multiplied by a 4 factor (one for each environment) reaching a whopping 240.\nAs you can imagine this was not ideal so I decided to look at possible alternatives. What I wanted to achieve was creating 4 App Registrations, one for every environment, and use the same one across all the repositories.\nPlease note that In order to achieve this you need to use GitHub deployment environments. Environments, environment secrets, and environment protection rules are available in public repositories for all products. For access to environments, environment secrets, and deployment branches in private or internal repositories, you must use GitHub Pro, GitHub Team, or GitHub Enterprise. For access to other environment protection rules in private or internal repositories, you must use GitHub Enterprise, see documentation\nTo achieve what I described above, I needed a way to change the content of the subject claim issued by GitHub, luckily for us, this functionality is supported by GitHub using this api, even better, this functionality is also supported by the GitHub Terraform provider.\nAs far as I know, there\u0026rsquo;s no UI support to change the content of the access token issued by GitHub yet.\nConfigure the subject claim with Terraform # Here below you can see how to configure the subject claim for our use case:\nresource \u0026#34;github_actions_repository_oidc_subject_claim_customization_template\u0026#34; \u0026#34;sub_claim_template\u0026#34; { repository = github_repository.repository.name use_default = false include_claim_keys = [ \u0026#34;repository_owner\u0026#34;, \u0026#34;context\u0026#34;, ] } // Create the Federated Credential for the App Registration resource \u0026#34;azuread_application_federated_identity_credential\u0026#34; \u0026#34;github_federated_credentials\u0026#34; { application_object_id = azuread_application.github_app_registration.object_id audiences = [\u0026#34;api://AzureADTokenExchange\u0026#34;] display_name = \u0026#34;GitHub-FederatedCredential\u0026#34; issuer = local.github_issuer // You need to decide how to configure this one accordingly to your use case subject = \u0026#34;repository_owner:${var.organization}:environment:{var.environment}\u0026#34; } Please note that what you incude in the include_claim_keys depends on your specific scenario, this configuration allows me to add the organization and the environment in the subject claim so I can reuse the same Service Principal across all repositories for a given environment. Also bear in mind that however you configure the GitHub sub claim, MUST match what\u0026rsquo;s configured in the App Registration Federated Credential.\nThere\u0026rsquo;re more customizations possible and you can learn about these in the GitHub documentation.\nThe last change you need to implement, besides granting RBAC privileges to the Service Principal on your subscriptions(s), is to configure the workflow to use token exchange to authenticate into Azure, there are two parts to it:\nConfigure the required permissions in the workflow Configure the action azure/login@v1 to use the token exchange. Here\u0026rsquo;s an example of a workflow that will work with the configuration above:\nname: Azure Login with OIDC on: [push] permissions: id-token: write contents: read jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: \u0026#39;Az CLI login\u0026#39; uses: azure/login@v1 with: client-id: ${{ secrets.AZURE_CLIENT_ID }} tenant-id: ${{ secrets.AZURE_TENANT_ID }} subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} - name: \u0026#39;Run az commands\u0026#39; run: | az account show az group list Summary # As you can see, the configuration is quite straightforward and it allows you to get rid of secrets, improve your security posture and, as a bonus, forget about the expiring credentials issue.\nI hope you found this useful.\nTill the next time\n","date":"19 January 2023","externalUrl":null,"permalink":"/posts/github-azure-oidc/","section":"Posts","summary":"OpenID Connect (OIDC) integration between Azure Active Directory and GitHub allows your GitHub Actions workflows to securely access resources in Azure, without needing to store the Azure credentials in the GitHub action secrets.","title":"Goodbye secrets 👋, Hello token exchange: Connect Your GitHub Actions to Azure securely","type":"posts"},{"content":"This post describes my journey to import several hundred Azure resources in Terraform. Before digging into the what and the how let me give you a brief description of our environment\u0026rsquo;s infrastructure.\nIn my current company, we manage many Azure resources for each environment and we have a few of them (DEV, TEST, etc.). Every environment looks pretty much the same and it mostly differs by product SKUs, database sizes, etc.\nMy fellow team members and I are building a microservices solution, we have around 50 independent services deployed in Azure that require some specific resources (imagine a SQL database or a Storage container), and on top of that, we have all the service agnostic infrastructure.\nAll these resources aren\u0026rsquo;t created/updated in the same way, some use ARM templates, some use PowerShell scripts, some use Azure cli scripts and so on. This is mostly because we need to work around some tooling limitations e.g. you can\u0026rsquo;t create resources in Azure Active Directory using ARM templates.\nAll the aforementioned scripts are placed in a shared repository and every project references what it needs in its deployment pipeline.\nThis approach works, but it has several problems:\nWe use different technologies to deploy infrastructure and that makes it harder for newcomers to get up to speed quickly Deployments take longer than necessary It\u0026rsquo;s impossible to have a preview of the changes that are going to be applied at deployment time Re-deploying infrastructure may not fix all the configuration drift especially the PowerShell/az cli scripts I\u0026rsquo;m sure I missed several other points but these are the most painful ones.\nHence we decided to move to Terraform since it can address all the points above and, according to GitHub Octoverse 2022, HCL was the fastest growing language in 2021-2022.\nThe import challenge # If you start on a greenfield project everything is quite easy, but as you may know, if a resource has been created outside Terraform, it needs to be imported to be managed with Terraform in the future. Importing resources is not difficult, on the provider documentation site, at the bottom of the page of every resource, you can find the command to execute to import a given resource.\nMy problem was that I had hundreds of them, around 160 global resources, multiplied by all the various environments + between 5-10 resource service dependent multiplied by the number of services ~50 multiplied by the number of environments.\nAs you can imagine this adds up very quickly, especially because importing resources is a tedious task. To import a resource in Terraform you need a couple of things:\nCreate the resource in your configuration files The Terraform resource id The Azure resource id For example:\n|--------------Terraform resource id-------------------| |-----------------------------------------Azure resource id---------------------------------------------------------------| terraform import module.servicebus.azurerm_servicebus_namespace.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ServiceBus/namespaces/sbns1 To get the Terraform resource id, you may first need to come up with the final module structure because if you use modules, the module name would be part of the Terraform resource id (as can be seen above).\nFiguring out the Azure resource id can also be challenging for some nested resources, e.g. a cosmos role assignment requires some az cli gymnastics.\nThis seemed like a herculean effort so I started looking around hoping to find a tool that could help with a bulk import.\nAzure Terrafy - Aztfy # Aztfy is a tool developed by Microsoft that allows you to bulk import resources, it has some configuration so you can specify what to import, the names to import and so on. After spending some time with the tool, I quickly realized it may be a no-go. The problem I had with this tool is twofold:\nIt doesn\u0026rsquo;t generate reproducible Terraform configurations It doesn\u0026rsquo;t generate Terraform idiomatic code Let me expand on those:\nNot generating reproducible configurations means that after an import, when you run Terraform plan, you may still have changes that you need to fix manually, or worse, Terraform may fail due to validation problems. This limitation is documented in the project README and I could\u0026rsquo;ve lived with it.\nNot generating idiomatic code is a bit more problematic, since it requires manually changing most parts of the imported code to make use of variables or to reference a parent resource. This means that all the code that aztfy will output, needs to be adjusted/modified. Moreover, if you decide to reorganize the code and move resources in a different module (hence changing the Terraform resource id) after it has been imported, then you have to either start modifying the Terraform state manually, or you may need to import it all over again.\nGiven the above downsides, I decided to use it only marginally and instead start writing my configuration from scratch.\nMy approach # Before starting I came up with a set of principles to use as guidelines when writing HCL modules, which are:\nOne module for every different resource type used For every module that needs access to resources defined in other modules, read these resources with a data source All the module\u0026rsquo;s inputs are defined in a file called variables.tf All the permissions-related stuff (RBAC, AAD group membership) will go in a file called permission.tf All the networking configuration (Firewall rules, VNet, Private endpoints and so on) will go in a file called networking.tf All the module\u0026rsquo;s outputs will go in a file called output.tf These lower-level modules will be invoked by a higher-level module where most of the naming logic will be Lower-level modules can only be called by higher-level modules Several higher-level modules will be created: Environment specific with all the global resources Several service-specific ones, one for each type of service Client code can only reference higher-level modules Higher level modules should have the least number of secret possible Lower-level modules shouldn\u0026rsquo;t reference other lower-level modules Please note that these are principles I came up with and that make sense in my specific scenario, your mileage may vary\nDirectory structure # The principles stated above helped me come up with a directory structure that looks like the following:\n├── environments │ ├── acc │ ├── dev │ ├── prod │ └── tst ├── modules │ ├── private --\u0026gt; Lower-level modules │ │ ├── global │ │ │ ├── global_azure_service_1 e.g. Cosmos Db │ │ │ ├── global_azure_service_2 e.g. vNET │ │ │ ├── global_azure_service_3 e.g. App Service Plan │ │ └── service │ │ ├── service_specific_resource_1 e.g. App service │ │ ├── service_specific_resource_2 e.g. Cosmos container │ │ ├── service_specific_resource_3 e.g. Sql Database │ └── public --\u0026gt; Higher-level modules │ ├── environment │ └── webapp Import Script # After coming up with this list of principles, I started creating the Terraform module for each resource type, importing it in a local state, running Terraform plan to ensure there are no changes and repeating till I created all the modules.\nTo make the plan/import phase quick, I was applying the changes on a single lower-level module basis.\nSince I ended up importing the resources over and over and over again, I decided to write a small PowerShell script to help me speed up the process.\nThis script tries to address the two main paint points:\nDo not re-import a resource that\u0026rsquo;s already imported Simplify reuse across environments via PowerShell string interpolation, whenever Azure resource Ids are predictable. Please note that the last point depends on your resources naming conventions.\nThe script looks like this:\nTerraform init // Comment this out after the first execution # Get all the items from Terraform state and put it inside an array $stateItems = $(Terraform state list) function ImportIfNotExists { param ( [String]$resourceName, [String]$resourceId ) if ($resourceId -eq $null -or $resourceId -eq \u0026#34;\u0026#34;) { Write-Warning \u0026#34;Resource id for $resourceName is null\u0026#34; return } if ($stateItems -notcontains $resourceName.Replace(\u0026#34;\\\u0026#34;, \u0026#34;\u0026#34;)) { Write-Host \u0026#34;Importing $resourceName with id $resourceId\u0026#34; Terraform import \u0026#34;$resourceName\u0026#34; \u0026#34;$resourceId\u0026#34; if ($LASTEXITCODE -ne 0) { Write-Warning \u0026#34;Error importing $resourceName with id $resourceId\u0026#34; } else { Write-Host \u0026#34;$resourceName imported\u0026#34; } } else { Write-Host \u0026#34;$resourceName already exists\u0026#34; } } $env = \u0026#34;DEV\u0026#34; $subscriptionId = \u0026#34;your-subscription-id-here\u0026#34; $spokeResourceGroupName = \u0026#34;myrg-spoke-$env\u0026#34;.ToLower() $hubResourceGroupName = \u0026#34;myrg-hub-$env\u0026#34;.ToLower() $ErrorActionPreference = \u0026#34;Stop\u0026#34; ## Resource group import ImportIfNotExists \u0026#39;module.environment.azurerm_resource_group.spoke_rg\u0026#39; \u0026#34;/subscriptions/$subscriptionId/resourceGroups/$spokeResourceGroupName\u0026#34; ImportIfNotExists \u0026#39;module.environment.azurerm_resource_group.hub_rg\u0026#39; \u0026#34;/subscriptions/$subscriptionId/resourceGroups/$hubResourceGroupName\u0026#34; This script allows me to quickly import resources and iterate faster since it allows me to re-run the same over and over without worrying about re-importing a resource that\u0026rsquo;s already part of the state.\nAs stated above, you can make the script reusable for multiple environments with few modifications. Some Azure resource ids are a bit more complex to figure out hence I usually do a manual lookup and find-and-replace. Some of those resources include:\nCosmos Sql Role Definition (The Role id uses a guid so it\u0026rsquo;s different for every role definition) Cosmos Sql Role Assignment (same as above) RBAC role assignment Automation account job schedules AAD Groups AAD Groups membership Please note that your mileage may vary depending on the resources you use\nIf you want to, you can enhance the script to also look up these resources using the azure cli and a bit of JMESPath, for example, I\u0026rsquo;m doing this to look up AAD groups since in my case they follow a naming convention:\nImportIfNotExists \u0026#39;sample.azuread_group.your_group_name\u0026#39; $(az ad group show --group \u0026#34;{your-group-name-prefix}-$env\u0026#34; --query id --output tsv) Here below you can see an example where I\u0026rsquo;m employing JMESPath to further filter the result of az cli to look up the role assignment for a given role and group:\nImportIfNotExists \u0026#39;sample.azurerm_role_assignment.your_group_assingments\u0026#39; $(az role assignment list --scope {your-scope} --query \u0026#34;[?principalName==\u0026#39;{you-principal-name}\u0026#39; \u0026amp;\u0026amp; roleDefinitionName==\u0026#39;{your-role-name}\u0026#39;].id\u0026#34; -o tsv) where:\n{your-scope} is the resource you assigned the RBAC role assignment to (e.g. the resource group or a specific resource) {you-principal-name} is the user name, group name or managed identity name of the principal that will be granted the role {your-role-name} is the name of the RBAC roles you assigned (e.g. Contributor) This is quite powerful and allows you to make the script parametric enough to allow you to reuse it for all environments.\nIt\u0026rsquo;s also worth considering though that the import operation will be executed just once, so it may be quick to just do a find replace at times.\nQuirks # If you have declared resources that use for_each in HCL, the name of the resource may contain (based on what you\u0026rsquo;re foreach-ing) a string, e.g. imagine you\u0026rsquo;re creating several service bus topic using a for_each in the following way:\nresource \u0026#34;azurerm_servicebus_namespace\u0026#34; \u0026#34;example\u0026#34; { name = \u0026#34;tfex-servicebus-namespace\u0026#34; location = azurerm_resource_group.example.location resource_group_name = azurerm_resource_group.example.name sku = \u0026#34;Standard\u0026#34; } resource \u0026#34;azurerm_servicebus_topic\u0026#34; \u0026#34;topics\u0026#34; { name = each.value namespace_id = azurerm_servicebus_namespace.example.id for_each var.topics } Then the Terraform identifier will be something like the following:\nmodule.servicebus.azurerm_servicebus_topic.topics[\u0026#34;{topic-name}\u0026#34;]. To make Terraform and PowerShell play nicely together in the import script, you have to write the above this way:\nImportIfNotExists \u0026#39;module.servicebus.azurerm_servicebus_topic.topics[\\\u0026#34;{topic-name}\\\u0026#34;]\u0026#39; \u0026#34;{servicebus-resource-id}\u0026#34; To avoid the Terraform error: import requires you to specify two arguments.\nUseful resources # To import a resource you need to find its unique identifier in Azure and this is not always easily doable from the portal so I took advantage of the following tools to make my life simpler\naz cli resources.azure.com The first one will be familiar to everyone, it\u0026rsquo;s the azure command line tool and it\u0026rsquo;s a must-have, the second one is a bit less known in my opinion but still an excellent resource to look into the definition of the various resources.\nThis work took quite a bit of time but in the end, I was able to import all the resources in all the environments and come up with idiomatic HCL code.\nI hope you find this helpful!\nTill the next time.\n","date":"8 January 2023","externalUrl":null,"permalink":"/posts/import-many-terraform/","section":"Posts","summary":"This post describes my journey to import several hundred Azure resources in Terraform.","title":"Terraform Tips \u0026 Tricks: Managing Large-Scale Azure Resource Imports","type":"posts"},{"content":"Hello and welcome to my blog! My name is Massimiliano, and I am a software engineer and cloud architect with a passion for all things tech. I was born and raised in Italy, but I have had the opportunity to live and work in the Netherlands, where I currently reside.\nI have been working as a developer since 2008, and in that time, I have had the opportunity to work on a wide range of projects across various industries. As a developer, I am always on the lookout for new challenges and opportunities to learn and grow. I specialize in Azure, .NET, C#, and other cloud-based technologies, and I have a particular interest in Infrastructure as Code (IaC) and DevOps practices. I am also a firm believer in the importance of Cloud Native principles, and I enjoy working on projects that leverage the power of cloud computing to deliver high-performing, scalable solutions.\nIn addition to my professional experience, I am also proud to have earned several certifications that demonstrate my expertise in my field. These include an Azure certification and a Terraform certification, both of which I have worked hard to achieve and maintain.\nThank you for visiting my website. I hope you find the content here helpful and informative, and please don\u0026rsquo;t hesitate to reach out if you have any questions or just want to chat about tech.\nAzure certifications # AZ-104 Microsoft Certified: Azure Administrator Associate AZ-204 Microsoft Certified: Azure Developer Associate AZ-305 Microsoft Certified: Azure Solutions Architect Expert ","date":"7 January 2023","externalUrl":null,"permalink":"/about/","section":"Max's Tech Chronicles","summary":"Hello and welcome to my blog!","title":"About me","type":"page"},{"content":"","date":"17 November 2022","externalUrl":null,"permalink":"/tags/ddd/","section":"Tags","summary":"","title":"Ddd","type":"tags"},{"content":"Source code\nEF 7 has been released at dotnetconf and it brings a heap of new and exciting features. To read about all the new goodnes in this release you can go through the What\u0026rsquo;s new in EF Core 7 docs page.\nOne of the features I\u0026rsquo;m more excited about that hasn\u0026rsquo;t been properly advertised (hence this post), in my opinion, is support for what they call Value generation for DDD guarded types.\nThis neat new feature allow us to create custom types that wrap identifiers and supports value generation on the database side.\nYou could already do this in the past if you were providing a value yourself, but it was not supported to generate the value on the database.\nThe feature is also negatively advertised with a warning on the EF Core docs page saying that it adds complexity to the code so let\u0026rsquo;s find out what\u0026rsquo;s this about and what it allow us to do.\nWhat\u0026rsquo;s primitive obsessions? # If you\u0026rsquo;re a seasoned DDD practitioner you\u0026rsquo;re probably familiar with this concept and you can skip this section altogether, if that\u0026rsquo;s not the case keep reading.\nPrimitive obsession is a code smell and it\u0026rsquo;s been defined as follows on hackernoon:\nPrimitive Obsession is a code smell in which primitive data types are used excessively to represent your data models.\nWhat this means is that we fail to properly model some domain concepts and we instead use more permissive primitive data types.\nSometimes using a more permissive type is a tradeoff forced by the limitations of the tools we use in our applications.\nWith EF Core we were limited in how to model the entity primary key with the value to be generated by the database. If we wanted to use a sequence in the db to generate a monotonically increasing number for our entity id, we had to use an int as the primary key property type.\nAs an example let\u0026rsquo;s use the following model used in most of the EF Core samples:\npublic class Blog { public int Id { get; private set; } public string Name { get; set; } public List\u0026lt;Post\u0026gt; Posts { get; } = new(); } public class Post { public int Id { get; private set; } public string Title { get; set; } public string Content { get; set; } public DateTime PublishedOn { get; set; } } As you can see, both Blog and Post entities have an int primary key.\nThis allows one subtle mistake not to be caught by the compiler: We can erroneously use the Blog.Id value in places where we should use the Post.Id or viceversa because both types are int and satisfy the type system requirements even though they\u0026rsquo;re conceptually two completely different things. Using the same type to represent different things besides opting out of compiler help, also hinders readability.\nDDD typed id to the rescue # Now with EF Core 7 we can easily avoid this problem by defining two different types to represent the primary key of each entity and thanks to the C# feature record struct we can even get away with it with similar performance characteristics.\nLet\u0026rsquo;s see it in action in the new model:\npublic class Blog { private Blog(BlogId id, string name) { Id = id; Name = name; } public BlogId Id { get; private set; } public string Name { get; set; } public List\u0026lt;Post\u0026gt; Posts { get; private set; } = new(); public static Blog Create(string name) { if (name == null) { throw new ArgumentNullException(nameof(name)); } return new Blog(default, name); } } public record struct BlogId(int Value); public class Post { private Post(PostId id, string title, string content, DateTimeOffset publishedOn) { Id = id; Title = title; Content = content; PublishedOn = publishedOn; } public PostId Id { get; private set; } public string Title { get; set; } public string Content { get; set; } public DateTimeOffset PublishedOn { get; set; } public static Post Create(string title, string content) { if (title == null) { throw new ArgumentNullException(nameof(title)); } if (content == null) { throw new ArgumentNullException(nameof(content)); } return new Post(default, title, content, DateTimeOffset.UtcNow); } } public record struct PostId(int Value); In order for EF Core to understand how to map the two new types PostId and BlogId to the dB, we need to use value converters like the following:\npublic class BlogIdIdConverter : ValueConverter\u0026lt;BlogId, int\u0026gt; { public BlogIdIdConverter() : base(v =\u0026gt; v.Value, v =\u0026gt; new(v)) { } } public class PostIdIdConverter : ValueConverter\u0026lt;PostId, int\u0026gt; { public PostIdIdConverter() : base(v =\u0026gt; v.Value, v =\u0026gt; new(v)) { } } // register value converters, we can take advantage of the new model building conventions feature and register the value converters only once for our whole context protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder) { configurationBuilder.Properties\u0026lt;BlogId\u0026gt;().HaveConversion\u0026lt;BlogIdIdConverter\u0026gt;(); configurationBuilder.Properties\u0026lt;PostId\u0026gt;().HaveConversion\u0026lt;PostIdIdConverter\u0026gt;(); } // Last step is to configure the value generation for these entity keys in the OnModelCreating method modelBuilder.Entity\u0026lt;Blog\u0026gt;().Property(blog =\u0026gt; blog.Id).ValueGeneratedOnAdd(); modelBuilder.Entity\u0026lt;Post\u0026gt;().Property(post =\u0026gt; post.Id).ValueGeneratedOnAdd(); Implementing the entity ids this way allow use to fix the aforementioned problem since now the two types are different so we\u0026rsquo;re unable to pass a Blog.Id where we expect a Post.Id or vice versa. This may seem like a small feature, but if you search the web, there\u0026rsquo;re tons of articles that describe why this is useful (i.e. more expressive code, compile support, easier refactoring, etc).\nPut it all together # Let\u0026rsquo;s see how this works:\nvar blog = Blog.Create(\u0026#34;My First Blog!\u0026#34;); context.Add(blog); context.SaveChanges(); The code above produces the following Sql:\nSET IMPLICIT_TRANSACTIONS OFF; SET NOCOUNT ON; INSERT INTO [Blogs] ([Name]) OUTPUT INSERTED.[Id] VALUES (@p0); Note that since this is only inserting one value and the database already guarantees atomicity for a single insert, the statement is not wrapped into a transaction, one of the nice performance benefits that we will get for free just updating to EF Core 7.\nNow, add a few posts:\nblog.Posts.Add(Post.Create(\u0026#34;First post\u0026#34;, \u0026#34;EF Core is awesome\u0026#34;)); blog.Posts.Add(Post.Create(\u0026#34;Second post\u0026#34;, \u0026#34;Typed Ids are amazing\u0026#34;)); context.SaveChanges(); Produces the following SQL:\nSET IMPLICIT_TRANSACTIONS OFF; SET NOCOUNT ON; MERGE [Post] USING ( VALUES (@p0, @p1, @p2, @p3, 0), (@p4, @p5, @p6, @p7, 1)) AS i ([BlogId], [Content], [PublishedOn], [Title], _Position) ON 1=0 WHEN NOT MATCHED THEN INSERT ([BlogId], [Content], [PublishedOn], [Title]) VALUES (i.[BlogId], i.[Content], i.[PublishedOn], i.[Title]) OUTPUT INSERTED.[Id], i._Position; And now the reading part, reading a blog from the db:\nBlogId id = blog.Id; var blogFromDb = context.Blogs.SingleOrDefault(blog =\u0026gt; blog.Id == id); Produces the expected SQL:\nSELECT TOP(2) [b].[Id], [b].[Name] FROM [Blogs] AS [b] WHERE [b].[Id] = @__id_0 As you can see everything works smoothly as you\u0026rsquo;d expect and with a little more code, you also have some additional type safety that comes in handy, especially at refactoring time, and if you, by mistake, use a Post.Id where a Blog.Id is expected, you get a nice compiler error.\nCaveats # I implemented the BlogId and PostId using records to keep the code succinct, in real life you may want to add a bit more to it, like for example overriding ToString to only print value, and maybe add some validation to make sure you can\u0026rsquo;t create a negative value and so on, using a struct also has some similar performance characteristics of using an int.\nPlease also note that EF Core 7 has a few issues that will be resolved in the coming months so you may want to wait for some of these issues to be resolved before pushing it to prod.\nList of current issues/bugs in Entity Framework Core 7 that are considered for patching in a 7.0.x release - I suggest waiting for 7.0.1, due in January (afaik)#dotnet #efcore https://t.co/gjjnLxxvxs\n\u0026mdash; ErikEJ (@ErikEJ) November 17, 2022 I hope you enjoyed this article, till the next time!\n","date":"17 November 2022","externalUrl":null,"permalink":"/posts/efcore-7-typed-ids/","section":"Posts","summary":"Source code","title":"EF Core 7 is here - Welcome typed entity id 🍾","type":"posts"},{"content":"","date":"17 November 2022","externalUrl":null,"permalink":"/tags/ef-core/","section":"Tags","summary":"","title":"Ef-Core","type":"tags"},{"content":"","date":"17 November 2022","externalUrl":null,"permalink":"/tags/sql/","section":"Tags","summary":"","title":"Sql","type":"tags"},{"content":"Today I was converting some Azure webjobs to connect to Azure Service Bus using managed service identity (MSI).\nThe application is a simple C# Azure WebJob built using the Azure WebJob SDK that subscribe to a topic and process incoming message writing to a database.\nThese are the nuget packages used:\nMicrosoft.Azure.WebJobs v 3.0.33 Microsoft.Azure.WebJobs.Extensions.ServiceBus v 5.6.0 Please note that since Azure Functions are built on top of the WebJobs SDK, you may encounter the same issue there, I haven\u0026rsquo;t verified though. In order to grant the required permission, I created a security group and added the managed identity of the app service to the group, then I proceeded to grant this service group the Azure Service Bus Data Owner\nAccording to the description, this role should have full access to the whole Service Bus namespace, so imagine my surprise when I tried to run the application and got an error that looks like the following:\nUnauthorized access. \u0026#39;Listen\u0026#39; claim(s) are required to perform this operation. Resource: \u0026#39;sb://{namespace-name}.servicebus.windows.net/{topic-name}/subscriptions/{service-name}\u0026#39;. TrackingId:4e956a067b044b1089b5e327c0d08fd0_G9, SystemTracker:gateway7, Timestamp:2022-08-05T15:32:58 After several trial and error, this is what I found:\nIf you assign the permission Azure Service Bus Data Owner to a group and the managed identity of the application is part of the group, it won\u0026rsquo;t work, no matter which permission you grant ❌ If you assign the managed service identity the permission Azure Service Bus Data Owner it won\u0026rsquo;t work ❌ If you assign the permission Azure Service Bus Data Receiver to a group and the managed identity of the application is part of the group, it will work ✅ If you assign the managed service identity the permission Azure Service Bus Data Receiver, it will work ✅ Please note it may take up to 5 minutes for the permission changes to be applied, so you may still experience failures after applying them.\nThe only way to get it working was to assign the managed identity the Azure Service Bus Data Receiver role to either the service identity or the security group.\nThis seems either a bug in the Azure SDK or in the Service Bus itself, I\u0026rsquo;m not the only one that ran into this issue and here you can find additional information.\nTill the next time.\n","date":"9 August 2022","externalUrl":null,"permalink":"/posts/servicebus-manageed-identity-rbac/","section":"Posts","summary":"Today I was converting some Azure webjobs to connect to Azure Service Bus using managed service identity (MSI).","title":"Azure WebJobs, Service Bus and Managed Identity: Lesson learned","type":"posts"},{"content":"","date":"9 August 2022","externalUrl":null,"permalink":"/tags/managed-identity/","section":"Tags","summary":"","title":"Managed-Identity","type":"tags"},{"content":"The other day I was on a quest to lower a bit our Azure spending.\nIm my current company we have several environment that we use for different purposes, Development, Test, Acceptance and so on.\nAll these environments have slightly different tiers for various services and I was wondering how to lower App Service Plan tier outside business hours.\nApp Services have some built-in, albeit limited, capabilities to scale but this only involves scaling out.\nScaling out is the process of adding additional instances of our application to adapt to an increasing load. Scaling up is the process of running the application on a more performant hardware.\nSince there\u0026rsquo;s no built-in support to scale up \u0026amp; down in App Services, I had to come up with a custom solution.\nAfter a bit of research, I ended up creating an Azure automation account, two runbooks that execute on a schedule the scale down and scale up of our App Service Plan.\nIt turned out to be extremely simple to implement yet effective.\nDisclaimer: This is just one of the possible way to scale services up \u0026amp; down outside business hours, you can achieve the same with a scheduled github action or Azure DevOps pipeline than runs your IaC code with different Sku parameter values for example.\nHere\u0026rsquo;s what I\u0026rsquo;ve created:\nAzure automation account Azure Runbooks Azure automation schedule Azure automation account variables Azure automation account - Docs # This is the go to resource to automate processes in Azure, where you define the runbooks, the schedule and the variables.\nAzure Runbooks - Docs # This is where I defined what needs to happen when the schedule triggers the runbook and starts a job. There are several different types of runbooks, here I chose the powershell one.\nAzure automation schedule - Docs # This is where I defined when to execute our runbooks, I went with a weekly schedule to scale down resource in the evening and scale them back up early in the morning.\nAzure automation account variables - Docs # This is where I defined few variables used by the runbook. This step is optional since you can potentially hardcode everything in the runbook itself, but if you want to use the same runbook across different environment, you can define variables and read them in the runbook. I defined few variables, one for the resource group name, one for the app service plan name and the desired scale down sku and the one the needs to be used during business hours.\nIn order for the runbook to successfully change the App Service Plan, we also need to grant the identity - either managed identity or user assigned one - of the automation account enough grant on the App Service Plan. I went with managed identity.\nPutting it all together # After creating the variables, the schedules and the runbooks I linked the schedule to the runbook. I created two schedules called scale-down and scale-up, two runbooks named the same way and linked the schedule to the runbook. You link a runbook to a schedule in the overview page of the runbook itself.\nLast missing part is the code of the runbook itself, so here\u0026rsquo;s the shortest possible version of it (of course you can make it smarter based on your needs) used to scale down, the scale up version is exactly the same but read a different variable for the sku.\nTill the next one!\n","date":"25 July 2022","externalUrl":null,"permalink":"/posts/dynamically-scale-app-service-plans/","section":"Posts","summary":"The other day I was on a quest to lower a bit our Azure spending.","title":"Dynamically scale down AppService outside business hours to save 💰💰","type":"posts"},{"content":"","date":"24 June 2022","externalUrl":null,"permalink":"/tags/cloudnative/","section":"Tags","summary":"","title":"Cloudnative","type":"tags"},{"content":" Introduction # As you may know, Azure Container Apps went out of preview during Microsoft Build in late May this year. Azure Container Apps is a very interesting service that runs on top of Kubernetes adding some additional powerful capabilities in a simple and covinient way. Some of these capabilities are:\nBuilt in support for Keda autoscalers Built in support for Dapr components Ability to scale to zero There\u0026rsquo;s a lot more to it, you can dig deeper on the official Microsoft documentation here\nTL;DR; All the code described in this article is available on Github here I\u0026rsquo;m still working on improvements so main branch may be updated by the time you read this.\nRequirements # I would like to migrate several Azure App Services to Azure Container Apps, I have two different type of services, http api that write to a Service Bus queue/topic and web jobs that consume and process the messages, a pretty common setup these days.\nAzure Container Apps allows me to easily scale the web jobs based on the amount of messages present in the queue/topic and also makes it easy to scale to zero outside business hours.\nIn order to migrate from Azure App Service to Azure Container Apps I want to implement a zero downtime deployment for the http api services.\nProblem # Azure Container Apps has built in support for health probes, there are 3 types of health probes:\nLiveness Readiness Startup Given the built-in health probes support, I went under the assumption that, while using single revision mode, we could just deploy another revision and the control plane could take care of warming up and then swapping traffic to the new revision without downtime. To my surprise I figured out that\u0026rsquo;s not the case and if you\u0026rsquo;re reading this blog post, you might have noticed that too.\nI also double checked it on Discord with the Azure Container Apps team if I was missing something on my end, but they confirmed my findings.\nAfter doing a bit of research, I figured it out that I can implement my own workflow to implement zero downtime deployment. This is far from ideal but still better than a deployment process that causes downtime. Hopefully Azure Container Apps will implement built support for zero downtime deployment, but in the meantime the following approach is an acceptable workaround.\nSolution # In order to implement zero downtime deployment in (pseudo) single revisions mode (meaning using multiple revision mode with a single active revision at a time, serving all the traffic), we need to do the following steps:\nRedirect all the traffic to the latest revision by name (more on that later) Deploy a new revision Warm up the new revision Redirect the traffic to the newly deployed revision In this blog post I am using multiple revision mode because it happened to me that moving from single revision to multiple revision mode caused downtime - I\u0026rsquo;m currently investigating it and will update this post as soon as I found. The idea is to have the container app configured in multiple revision mode but only have one active revision at a time.\nRegarding step 1, Redirect all the traffic to the latest revision by name, has to do with the latest revision alias. I found that if the traffic is set to the latest revision, when deploying a new revision, the traffic get redirected to the new revision even while it\u0026rsquo;s still in the provisioning state, leading to possible timeouts and failures on the caller side.\nThe workflow above is a bit long but not particularly difficult, and we can easily implement it with the help of the Azure Cli containerapp extension.\nOut of all the steps above, point 3 (Warm up the new revision) is the most tricky since different services may have different health probe configurations. I really didn\u0026rsquo;t want to duplicate health probe configurations in the infrastructure and in the deployment pipeline but rather reuse what has been configured in the Container App Container instead.\nDynamically discovering and calling the health probe in bash is doable but I am a bit more proficient writing that code in a high level language so I decided to write a small C# application to do that.\nIn order to manage Azure resources, we can use the Azure Management SDK, this is a set of packages that allows you to manage Azure resources in your language of choice. You can find all the supported resources here.\nLuckily, Azure Container Apps already have an SDK available, although in beta at the moment of writing.\nSince I should be able to invoke this application from a Github Action, I decided to implementing a web application that exposes an api to make my life easy.\nEssentially all the steps described above but steps 4 are executed in a github action, while step 4 is executed by a web application invoked by cURL in the Github Actions.\nThe next point to solve is where should be this web application deployed, we have few options:\nHave it always available Make it available on demand If you deploy an internal Azure Container App Environment and the application is not exposed to the internet, point two may be a bit more complicated since you need to make sure the github action runner can reach the Azure Container App you want to warm up.\nI initially went with the first approach, having the application always available, but since I didn\u0026rsquo;t want to also add authentication to the mix (to make sure only verified clients can call the warmup endpoint), I later decided against it.\nIn order to make this application available on demand, I decided to use Github Actions service container. This post is getting already a bit too long so I won\u0026rsquo;t go into detail of what service container is, let\u0026rsquo;s just say that it allows you to run a container and made it available on the runner. If you wanna dig deeper, you can check the documentation here\nAfter sorting the Github Actions service container, last problem that I had to tackle was how to authenticate the application against Azure. Thanks to Azure.Identity package and the DefaultAzureCredential class, we can just set some environment variables and authenticate with a previously defined service principal.\nAzure management SDK authentication # In order to get the required credentials to authenticate, we need to create a service principal with the Reader role on the resource group that contains the Azure Container Apps. We can quickly create this with the az cli and the following command:\naz ad sp create-for-rbac -n \u0026#34;HealthProbeSp\u0026#34; --role Contributor --scopes /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupId} Remember to replace the subscription and resource group names\nAfter setting all this up, I was able to implement zero downtime deployment.\nHere\u0026rsquo;s an extract of the Github Action:\njobs: build: name: build ${{ matrix.services.appName }} runs-on: ubuntu-latest permissions: contents: read packages: read services: health-invoker: image: ghcr.io/${{ github.repository }}/health-invoker:main ports: - 5000:80 env: AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }} AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }} AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }} Azure__SubscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }} Azure__ResourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME }} # Clone repo, Build and push omitted for brevity - name: Deploy azure container app without downtime if: github.event_name != \u0026#39;pull_request\u0026#39; \u0026amp;\u0026amp; matrix.services.zeroDowntime == true run: | echo \u0026#34;Installing containerapp extension\u0026#34; az extension add --name containerapp --upgrade \u0026amp;\u0026gt; /dev/null echo \u0026#34;Get latest active revision name\u0026#34; latest_revision=$(az containerapp show -n ${{ matrix.services.appName }} -g ${{ secrets.RESOURCE_GROUP_NAME }} --query properties.latestRevisionName -o tsv) echo \u0026#34;Redirect traffic to active revision $latest_revision\u0026#34; az containerapp ingress traffic set -n ${{ matrix.services.appName }} -g ${{ secrets.RESOURCE_GROUP_NAME }} --revision-weight $latest_revision=100 \u0026amp;\u0026gt; /dev/null echo \u0026#34;Create new revision\u0026#34; az containerapp update -n ${{ matrix.services.appName }} -g ${{ secrets.RESOURCE_GROUP_NAME }} -i ${{ steps.image-tag.outputs.tag }} \u0026amp;\u0026gt; /dev/null new_revision=$(az containerapp show -n ${{ matrix.services.appName }} -g ${{ secrets.RESOURCE_GROUP_NAME }} --query properties.latestRevisionName -o tsv) echo \u0026#34;Warmup new revision at ${{ env.WARMUP_APP }}/warmup/${{ matrix.services.appName }}\u0026#34; health_response_status=$(curl -m 180 --write-out \u0026#34;%{http_code}\\n\u0026#34; -s ${{ env.WARMUP_APP }}/warmup/${{ matrix.services.appName }} --output backend.txt) if [ $health_response_status = \u0026#34;200\u0026#34; ]; then echo \u0026#34;Redirect traffic to new revision $new_revision\u0026#34; az containerapp ingress traffic set -n ${{ matrix.services.appName }} -g ${{ secrets.RESOURCE_GROUP_NAME }} --revision-weight $new_revision=100 $latest_revision=0 \u0026amp;\u0026gt; /dev/null echo \u0026#34;Deactivate revision $latest_revision\u0026#34; az containerapp revision deactivate -n ${{ matrix.services.appName }} -g ${{ secrets.RESOURCE_GROUP_NAME }} --revision $latest_revision \u0026amp;\u0026gt; /dev/null else echo \u0026#34;Warmup failed with status code $health_response_status\u0026#34; cat ./backend.txt echo \u0026#34;Redirect traffic to active revision $latest_revision\u0026#34; az containerapp ingress traffic set -n ${{ matrix.services.appName }} -g ${{ secrets.RESOURCE_GROUP_NAME }} --revision-weight $latest_revision=100 \u0026amp;\u0026gt; /dev/null if [ ! -z \u0026#34;$new_revision\u0026#34; ]; then echo \u0026#34;Deactivate revision $new_revision\u0026#34; az containerapp revision deactivate -n ${{ matrix.services.appName }} -g ${{ secrets.RESOURCE_GROUP_NAME }} --revision $new_revision \u0026amp;\u0026gt; /dev/null fi exit 1 fi Here\u0026rsquo;s the output of wrk while deploying a new revision:\nwrk -t12 -c400 -d30s https://xxxxxxxx.azurecontainerapps.io/api/echo/ping Running 30s test @ https://xxxxxxxx.azurecontainerapps.io/api/echo/ping 12 threads and 400 connections Thread Stats Avg Stdev Max +/- Stdev Latency 268.53ms 123.73ms 1.02s 68.90% Req/Sec 137.15 103.17 1.15k 66.59% 41604 requests in 30.10s, 8.89MB read Requests/sec: 1382.32 Transfer/sec: 302.38KB After deployment has been completed:\nwrk -t12 -c400 -d30s https://xxxxxxxx.azurecontainerapps.io/api/echo/ping Running 30s test @ https://xxxxxxxx.azurecontainerapps.io/api/echo/ping 12 threads and 400 connections Thread Stats Avg Stdev Max +/- Stdev Latency 251.00ms 135.47ms 1.24s 77.22% Req/Sec 148.38 104.52 434.00 63.10% 44970 requests in 30.09s, 9.61MB read Requests/sec: 1494.36 Transfer/sec: 326.89KB As you can see there\u0026rsquo;s almost no difference and, most importantly, wrk doesn\u0026rsquo;t indicate any non 2XX or 3XX response meaning that we were able to serve all requests while deploying a new revision.\nThe numbers are quite low because I\u0026rsquo;m using a very small configuration for testing purposes (0.25 Cores and 0.5 Gi of memory)\nI hope you find this helpful and if you have suggestions , don’t hesitate to comment or reach me out via twitter at twitter.com/maxx_don.\nStay tuned for part 2 that will be out very soon!\n","date":"24 June 2022","externalUrl":null,"permalink":"/posts/aca-zero-downtime-1/","section":"Posts","summary":"Introduction # As you may know, Azure Container Apps went out of preview during Microsoft Build in late May this year.","title":"Zero downtime deployment with Azure Container Apps and Github Actions - Part 1","type":"posts"},{"content":"Microsoft announced at Microsoft Build that Azure Container Apps are now generally available (GA).\nIf you\u0026rsquo;re not familiar with Azure Container Apps (ACA) I suggest you to go and check out the documentation here.\nFully managed serverless container service for building and deploying modern apps at scale\nThis is how Microsoft itself markets the product.\nI think it\u0026rsquo;s a very interesting platform and it offers some of the benefits of Kubernetes, abstracting a lot of concepts and complexity.\nIn order to start playing around with it, I usually create a repo with some terraform code so I can spin up a set of resources, play with them and then destroy all of them when I\u0026rsquo;m done.\nAs you may know not all Azure resources are available in terraform azure provider(s) from day 1, but for a month or so we have the awesome AzApi provider for terraform.\nFollow this github issue that tracks adding support for it in the azurerm official provider.\nThe AzAPI provider enables you to manage any Azure resource type using any API version.\nThanks to this provider it is very easy to create an Azure Container App with terraform.\nHere\u0026rsquo;s how you configure the provider: Here you can see how you can use azapi_resource to create an Azure Container App Tips # In order to discover the properties, I first make the changes it in the Azure portal, then I\u0026rsquo;m running the following az-cli command:\naz containerapp list\nand then you need to transform the json to the terraform equivalent.\nYou can also install Terraform AzApi Provider Visual Studio Code Extension VS Code extension that should provide completion support.\nKudos to piizei for coming up with the suggestion here\nIf you want to see a more advanced example, you can give a look at my repo here.\nHope you find this helpful, if you have any question/suggestion, don\u0026rsquo;t hesitate to comment!\n","date":"26 May 2022","externalUrl":null,"permalink":"/posts/aca-terraform/","section":"Posts","summary":"Microsoft announced at Microsoft Build that Azure Container Apps are now generally available (GA).","title":"Create Azure Container Apps with terraform","type":"posts"},{"content":"","date":"24 May 2022","externalUrl":null,"permalink":"/tags/servicebus/","section":"Tags","summary":"","title":"Servicebus","type":"tags"},{"content":"Managed Service Identity (or MSI for short) allows Azure resources to connect to Azure services that supports AD authentication (see the full list here) without using secrets. This is extremely useful because handling secrets the proper way it\u0026rsquo;s far from easy.\nHow MSI works is beyond the scope of the article and you can find more information here, but in a nutshell:\nYou create a service principal object and an application in Azure AD to represents your service (this is done automatically when turning on managed identity) You grant some permissions to access the downstream service it needs to communicate to You configure the authentication to the downstream service to be done via MSI In my case, I have a WebJob that processes messages via a ServiceBus queue, so I granted the service principal a permission to read from the queue using the built in Azure Service Bus Data Receiver role.\nThe WebJob SDK supports connecting to the ServiceBus using MSI as described here so I went ahead and configured the WebJob in the following way:\n\u0026#34;ServiceBusConnection__fullyQualifiedNamespace\u0026#34; : \u0026#34;\u0026lt;service_bus_namespace\u0026gt;.servicebus.windows.net\u0026#34; \u0026#34;QueueName\u0026#34; : \u0026#34;test-queue\u0026#34; The queue and the permission were defined in terraform as follows:\n// Define the queue resource \u0026#34;azurerm_servicebus_queue\u0026#34; \u0026#34;msi-test-queue\u0026#34; { name = \u0026#34;test-queue\u0026#34; namespace_id = azurerm_servicebus_namespace.msi-test-sb.id enable_partitioning = true } // Grant the WebJob Azure Service Bus Data Receiver permissions resource \u0026#34;azurerm_role_assignment\u0026#34; \u0026#34;consumer_service_bus_read\u0026#34; { scope = azurerm_servicebus_queue.msi-test-queue.id role_definition_name = \u0026#34;Azure Service Bus Data Receiver\u0026#34; principal_id = azapi_resource.consumer_container_app.identity.0.principal_id depends_on = [azapi_resource.consumer_container_app] } The WebJob definition in C# is something like this:\n[FunctionName(\u0026#34;Processor\u0026#34;)] public async Task ProcessEvent( [ServiceBusTrigger(\u0026#34;%QueueName%\u0026#34;, Connection = \u0026#34;ServiceBusConnection\u0026#34;, IsSessionsEnabled = false)] ServiceBusReceivedMessage message, ServiceBusMessageActions messageActions) { .... } Where the string ServiceBusConnection points to the name of the configuration value that contains the connection string to the Service Bus and the string %QueueName% point to the configuration value that contains the queue name.\nIf you don\u0026rsquo;t use the percent sign, the string will be the name of the queue and it will be hardcoded, adding the %% allows you to configure dynamically via a configuration lookup.\nThis unfortunately didn\u0026rsquo;t work, the WebJob was throwing exception at startup complaining about permissions, the message was:\nUnauthorized access. \u0026#39;Listen\u0026#39; claim(s) are required to perform this operation This was unexpected since the permission was there and I double checked it in the Azure portal.\nThe only way I was able to get this working was to grant Azure Service Bus Data Receiver permission on the whole service bus namespace.\nresource \u0026#34;azurerm_role_assignment\u0026#34; \u0026#34;consumer_service_bus_read\u0026#34; { scope = azurerm_servicebus_namespace.msi-test-sb.id role_definition_name = \u0026#34;Azure Service Bus Data Receiver\u0026#34; principal_id = azapi_resource.consumer_container_app.identity.0.principal_id depends_on = [azapi_resource.consumer_container_app] } One caveat of this approach is that it grants more permissions than strictly required, but at least it got me unblocked.\nIf you\u0026rsquo;re interested into the source code, you can find it here.\nI hope you find this useful and if you have any questions/suggestions feel free to comment here below!\n","date":"24 May 2022","externalUrl":null,"permalink":"/posts/servicebus-managed-identity/","section":"Posts","summary":"Managed Service Identity (or MSI for short) allows Azure resources to connect to Azure services that supports AD authentication (see the full list here) without using secrets.","title":"Using Managed Identity with Azure WebJobs and Service Bus","type":"posts"},{"content":"","date":"24 February 2022","externalUrl":null,"permalink":"/tags/helm/","section":"Tags","summary":"","title":"Helm","type":"tags"},{"content":"Azure makes it very easy to create managed identities for a variety of services (e.g. Azure Functions, App Services, Logic Apps\u0026hellip;), but when we want to implement it for Azure Kubernetes Service, things gets just a bit more complicated.\nFirst of all we have few options to choose from:\nAAD Pod Identity (deprecated) Azure AD Workload Identity What we discuss in this post, azwi for brevity. Both solutions aims to associate a pod with an identity in Azure Active Directory so we can grant this identity permissions to access another resource (i.e. a storage account or an Azure Sql Database).\nAs described on the documentation, azwi is the suggested approach from now on since Azure AD Pod Identity has been (somehow) deprecated as you can read on the github repo and on the blog post here.\nThe documentation describes Azure AD Workload Identity as follows:\nAzure AD Workload Identity for Kubernetes integrates with the capabilities native to Kubernetes to federate with external identity providers. This approach is simpler to use and deploy, and overcomes several limitations in Azure AD Pod Identity\nAssuming you already have an AKS cluster up \u0026amp; running (I won\u0026rsquo;t cover the creation of it here), in order to configure Azure AD Workload Identity we need to:\nConfigure the AKS cluster to enable OIDC issuer Deploy the Azure AD Workload Identity helm chart to the cluster Create a Federated Azure AD Application + a Service Principal Create a kubernetes service account manifest with some azwi specific metadata Configure our pods to run with the service account 1. Configure the AKS cluster to enable OIDC issuer # Unfortunately since OIDC issuer feature is still in preview at the time of writing (February 2022), there\u0026rsquo;s no built-in support in terraform, but this is a one time only operation, you can read more about it here.\nSo we need to enable it from the azure cli with the following command:\nEnable az cli preview feature\n# Install the aks-preview extension az extension add --name aks-preview # Update the extension to make sure you have the latest version installed az extension update --name aks-preview Enable OIDC issuer on an existing cluster\naz aks update -n aks -g myResourceGroup --enable-oidc-issuer After we enable the OIDC issuer feature we need to get the OIDC issuer url that will be used in the next step to federate the Azure AD Application, this can be done with the following command:\naz aks show --resource-group \u0026lt;resource_group\u0026gt; --name \u0026lt;cluster_name\u0026gt; --query \u0026#34;oidcIssuerProfile.issuerUrl\u0026#34; -otsv 2. Deploy the Azure AD Workload Identity helm chart to the cluster # We can deploy a helm chart in several ways, in this case I decided to deploy the chart using terraform. You can achieve that with the following terraform code:\nresource \u0026#34;kubernetes_namespace\u0026#34; \u0026#34;azure-workload-identity-system\u0026#34; { metadata { annotations = { name = \u0026#34;azure-workload-identity-system\u0026#34; } name = \u0026#34;azure-workload-identity-system\u0026#34; labels = var.tags } } resource \u0026#34;helm_release\u0026#34; \u0026#34;azure-workload-identity-system\u0026#34; { name = \u0026#34;workload-identity-webhook\u0026#34; namespace = \u0026#34;azure-workload-identity-system\u0026#34; chart = \u0026#34;workload-identity-webhook\u0026#34; repository = \u0026#34;https://azure.github.io/azure-workload-identity/charts\u0026#34; wait = false depends_on = [kubernetes_namespace.azure-workload-identity-system] set { name = \u0026#34;azureTenantID\u0026#34; value = var.azureTenantID } } Here we create a new kubernetes namespace and we deploy the helm release. I choose to deploy with terraform the helm charts that I depend on (i.e. my application dependencies, for example Azure AD Workload Identity and kong that I use as my ingress). We need to set the azureTenantID value when we deploy the helm chart with the current azure tenant id. I read the current tenant id in the root module with the data \u0026quot;azurerm_subscription\u0026quot; \u0026quot;current\u0026quot; {} data source and pass in as a variable in the child module.\n3. Create a Federated Azure AD Application + a Service Principal # Here we need to create an Azure AD Application + a Service Principal and federate the application with the OIDC Issuer so that Azure AD can exchange a token issued to the pod with a token that can be used to access other Azure resources.\nWe can achieve it with a bit of terraform:\nlocals { namespace_name = \u0026#34;app-ns\u0026#34; ## This should match the name of the service account created by helm chart service_account_name = \u0026#34;app-${local.namespace_name}\u0026#34; } ## Azure AD application that represents the app resource \u0026#34;azuread_application\u0026#34; \u0026#34;app\u0026#34; { display_name = \u0026#34;sp-app-${var.env}\u0026#34; } resource \u0026#34;azuread_service_principal\u0026#34; \u0026#34;app\u0026#34; { application_id = azuread_application.app.application_id } resource \u0026#34;azuread_service_principal_password\u0026#34; \u0026#34;app\u0026#34; { service_principal_id = azuread_service_principal.app.id } ## Azure AD federated identity used to federate kubernetes with Azure AD resource \u0026#34;azuread_application_federated_identity_credential\u0026#34; \u0026#34;app\u0026#34; { application_object_id = azuread_application.app.object_id display_name = \u0026#34;fed-identity-app-${var.env}\u0026#34; description = \u0026#34;The federated identity used to federate K8s with Azure AD with the app service running in k8s ${var.env}\u0026#34; audiences = [\u0026#34;api://AzureADTokenExchange\u0026#34;] issuer = var.oidc_k8s_issuer_url subject = \u0026#34;system:serviceaccount:${local.namespace_name}:${local.service_account_name}\u0026#34; } output \u0026#34;app_client_id\u0026#34; { value = azuread_application.app.application_id } Here we need to specify a couple of things:\nThe OIDC Issuer url that we got from step 1, (I\u0026rsquo;m using a variable here to hold it\u0026rsquo;s value) The subject that should follow a specific format: system:serviceaccount:{k8s_namespace}:{k8s_service_account_name} The namespace should match the namespace you will use to install your app in kubernetes and the Service Account name should match what you define in the kubernetes manifest.\n4. Create a kubernetes service account manifest with some specific metadata # Here we will create the service account manifest and add the required metadata to allow the azwi do it\u0026rsquo;s magic.\nHere\u0026rsquo;s the code to create a service account and the corresponding value file:\n# serviceaccount.yaml apiVersion: v1 kind: ServiceAccount metadata: name: {{ include \u0026#34;app.serviceAccountName\u0026#34; . }} labels: {{- include \u0026#34;app.labels\u0026#34; . | nindent 4 }} {{- with .Values.serviceAccount.labels }} {{- toYaml . | nindent 4 }} {{- end }} {{- with .Values.serviceAccount.annotations }} annotations: {{- toYaml . | nindent 4 }} {{- end }} # value.yaml serviceAccount: # Labels to add to the service account labels: azure.workload.identity/use: \u0026#34;true\u0026#34; # Represents the service account is to be used for workload identity, see https://azure.github.io/azure-workload-identity/docs/topics/service-account-labels-and-annotations.html # Annotations to add to the service account annotations: azure.workload.identity/client-id: \u0026#34;{Client Id of the azure ad application}\u0026#34; azure.workload.identity/tenant-id: \u0026#34;{Tenant Id of you Azure subscription}\u0026#34; azure.workload.identity/service-account-token-expiration: \u0026#34;86400\u0026#34; # Token is valid for 1 day Please note that you can get the client id from the output of the step 3 and that the name of the service account should match what you set in the subject of the azuread_application_federated_identity_credential.\n5. Configure our pods to run with the service account # We need to make sure our pods run with the service account created in step 4. In order to do that we just need to specify the serviceAccountName with the name of the Service Account in our deployment.yaml file as shown below:\napiVersion: apps/v1 kind: Deployment metadata: name: {{ include \u0026#34;app.fullname\u0026#34; . }} labels: {{- include \u0026#34;app.labels\u0026#34; . | nindent 4 }} spec: {{- if not .Values.autoscaling.enabled }} replicas: {{ .Values.replicaCount }} {{- end }} selector: matchLabels: {{- include \u0026#34;app.selectorLabels\u0026#34; . | nindent 6 }} template: metadata: {{- with .Values.podAnnotations }} annotations: {{- toYaml . | nindent 8 }} {{- end }} labels: {{- include \u0026#34;app.selectorLabels\u0026#34; . | nindent 8 }} spec: {{- with .Values.imagePullSecrets }} imagePullSecrets: {{- toYaml . | nindent 8 }} {{- end }} serviceAccountName: {{ include \u0026#34;app.serviceAccountName\u0026#34; . }} .... This is all it takes, after we\u0026rsquo;re done here, we can grant our Service Principal some rights to, for example, allow it to access a storage account in the following way:\n## Lookup our storage account data \u0026#34;azurerm_storage_account\u0026#34; \u0026#34;storage\u0026#34; { name = var.storage_account_name resource_group_name = var.storage_account_rg } ## Role assignment to the application resource \u0026#34;azurerm_role_assignment\u0026#34; \u0026#34;app_storage_contributor\u0026#34; { scope = data.azurerm_storage_account.storage.id role_definition_name = \u0026#34;Storage Blob Data Contributor\u0026#34; principal_id = azuread_service_principal.app.id } This is my required_providers configuration:\nterraform { required_providers { azurerm = { source = \u0026#34;hashicorp/azurerm\u0026#34; version = \u0026#34;~\u0026gt; 2.84\u0026#34; } azuread = { source = \u0026#34;hashicorp/azuread\u0026#34; version = \u0026#34;~\u0026gt; 2.14.0\u0026#34; } helm = { version = \u0026#34;2.4.1\u0026#34; } } } That\u0026rsquo;s all for now, I hope you find this interesting, if you have any questions/suggestions, don\u0026rsquo;t hesitate to comment!\n","date":"24 February 2022","externalUrl":null,"permalink":"/posts/azwi-k8s/","section":"Posts","summary":"Azure makes it very easy to create managed identities for a variety of services (e.","title":"Implement Azure AD Workload Identity on AKS with terraform","type":"posts"},{"content":"It\u0026rsquo;s been a while since we can connect App services to Azure Sql in a secret-less fashion, using managed service identity (MSI for brevity from now onwards).\nThe configuration is a bit more complicated than connecting to other Azure services e.g. Azure Storage Account because it involves running some queries on the Azure Sql database in order to create the user and grant them the required privileges, for more info see the tutorial here.\nIn order to be able to connect to Azure Sql with MSI we need to configure few things:\nGrant database access to Azure AD users Turn on MSI on the App Service Create a user for the service principal and grant the required privileges in the database(s) Change the connection string to use the new authentication mode This is quite easy to do manually, but if you are using IaC, then manual changes are a no go.\nConfigure all of this in terraform was a non trivial task and took me quite a bit to understand the ins and outs and since I wasn\u0026rsquo;t able to find much documentation online, I decided to put together this blog post.\nStep 1: Grant database access to Azure AD users # In order to be able to connect to Azure Sql with a managed identity, we need to configure the Azure Sql Server to allow Azure AD authentication, you can read more on the subject here.\nVia terraform we can configure it adding the azuread_administrator block on the Azure Sql Server resource as shown below:\nresource \u0026#34;azurerm_mssql_server\u0026#34; \u0026#34;sql\u0026#34; { ... azuread_administrator { login_username = var.sql_server_ad_admin_username object_id = var.sql_server_ad_admin_object_id } ... } Here we\u0026rsquo;re passing in the user name and the object id of the Azure AD User or Azure AD Group that we want to configure as the server admin.\nStep 2: Turn on MSI on the App Service # In order to create a MSI for our App Service, we need to configure the identity block to SytemAssigned as shown below.\nPlease note that there\u0026rsquo;s a small catch in terraform about turning on managed identity for an existing App Service, essentially you can\u0026rsquo;t use it until it\u0026rsquo;s there, so you may need to run terraform apply twice, one to turn on MSI, and then the second time to grant some privileges to it.\nYou can find more details on an issue I opened in the azurerm terraform provider here.\nresource \u0026#34;azurerm_app_service\u0026#34; \u0026#34;web\u0026#34; { name = \u0026#34;${var.prefix}-web-backend-${var.env}\u0026#34; location = azurerm_resource_group.backend.location resource_group_name = azurerm_resource_group.backend.name ... identity { type = \u0026#34;SystemAssigned\u0026#34; } ... } Step 3: Create a user for the service principal and grant the required privileges in the database(s) # This is the tricky part, that I struggled to automate because it requires running a couple of sql commands in the Sql Server database, as suggested in this article here.\nThe sql you need to run creates a user and grants it the required privileges as shown below.\nCREATE USER [ServicePrincipalName] FROM EXTERNAL PROVIDER; GO ALTER ROLE db_datareader ADD MEMBER [ServicePrincipalName]; ALTER ROLE db_datawriter ADD MEMBER [ServicePrincipalName]; The point of this article though is to take care of this via terraform, in order to do so we need to:\nGet the current Azure tenant id Read the App Service service principal from Azure AD Create the user and grant it required privileges in the database Let\u0026rsquo;s see how we can achieve this with terraform:\nGet current tenant id # This is easy, we can use a built-in terraform data source to access it:\ndata \u0026#34;azurerm_client_config\u0026#34; \u0026#34;current\u0026#34; {} Read the App Service service principal from Azure AD # Here we can once again use a terraform data source to get access to the application_id property of the generated MSI as follows:\ndata \u0026#34;azuread_service_principal\u0026#34; \u0026#34;web_managed_identity\u0026#34; { object_id = azurerm_app_service.web.identity.0.principal_id } Create the user and grant it required privileges # In order to achieve this step, we need to use a 3rd party provider called mssql_user, you can find it on the terraform registry here\nThe only catch here is that you need to specify an Azure AD credential to connect to the Azure Sql database, so you can use the user we configured in the step 1 above. If you used an Azure AD group instead you may create a service principal, add it to the group in Azure AD and use it\u0026rsquo;s client_id/client_secret to connect to the database.\nresource \u0026#34;mssql_user\u0026#34; \u0026#34;web\u0026#34; { server { host = azurerm_mssql_server.sql.fully_qualified_domain_name azure_login { tenant_id = data.azurerm_client_config.current.tenant_id client_id = var.sql_sp_client_id client_secret = var.sql_sp_client_secret } } object_id = data.azuread_service_principal.web_managed_identity.application_id database = var.database_name username = azurerm_app_service.web.name roles = [\u0026#34;db_datareader\u0026#34;, \u0026#34;db_datawriter\u0026#34;] } Here we need to specify few things:\nThe FQDN name of the Azure Sql Server How to login to the database (I\u0026rsquo;m using a service principal that\u0026rsquo;s been added to the Azure AD group that\u0026rsquo;s set as the Azure Sql Admin) What\u0026rsquo;s the object id of the service principal we are granting access to What\u0026rsquo;s the name of the service principal What roles we want to assign to it Step 4: Change the connection string to use the new authentication mode # Note that you need to reference System.Data.SqlClient version 3 or greater for dotnet core, older versions doesn\u0026rsquo;t support Authentication=Active Directory Default\nlocals { connection_string = \u0026#34;Server=${var.prefix}-sql-${var.env}.database.windows.net; Authentication=Active Directory Default; Database=${var.database_name};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Persist Security Info=False;\u0026#34; } and then we just need to set this new connection string on the App Service as follows:\nresource \u0026#34;azurerm_app_service\u0026#34; \u0026#34;web\u0026#34; { ... app_settings = { \u0026#34;ConnectionStrings__Database\u0026#34; = local.connection_string ... } ... } As a last step, I\u0026rsquo;m showing the terraform configuration to include all the required providers used to achieve this:\nterraform { required_providers { azurerm = { source = \u0026#34;hashicorp/azurerm\u0026#34; version = \u0026#34;~\u0026gt; 2.84\u0026#34; } azuread = { source = \u0026#34;hashicorp/azuread\u0026#34; version = \u0026#34;~\u0026gt; 2.14.0\u0026#34; } mssql = { source = \u0026#34;betr-io/mssql\u0026#34; version = \u0026#34;0.2.4\u0026#34; } } } Nothing else needs to change in your code, given you were reading the connection string from the configuration.\nI hope you find this useful!\n","date":"16 February 2022","externalUrl":null,"permalink":"/posts/azure-sql-secret-less-conn/","section":"Posts","summary":"It\u0026rsquo;s been a while since we can connect App services to Azure Sql in a secret-less fashion, using managed service identity (MSI for brevity from now onwards).","title":"Configure secret-less connection from App Services to Azure Sql via terraform","type":"posts"},{"content":"","date":"8 December 2021","externalUrl":null,"permalink":"/tags/cloud/","section":"Tags","summary":"","title":"Cloud","type":"tags"},{"content":"Nowadays App Service deployment has became quite straight forward. Since support for running Docker containers was added to the platform, this has become my preferred way of deploying and running code in production.\nOne way to deploy a Docker container to an App Service is taking advantage of an Azure Container Registry (henceforth referred to as ACR), the process looks like this:\nAhead of time:\nConfigure the App Service to pull the image from your ACR During continuous delivery build:\nBuild and tag your docker image with the name of the ACR Login to ACR Push the image to ACR via a docker pull Somehow push the new image from ACR to the App Service One of the way to achieve it is to configure an ACR webhook so ACR \u0026ldquo;pushes\u0026rdquo; the new image to the App Service as soon as a new image is pushed to the ACR repository. This can be achieved quite easily with terraform, as shown in the following snippet:\nresource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;rg\u0026#34; { name = \u0026#34;${var.prefix}-${var.env}\u0026#34; location = var.region } resource \u0026#34;azurerm_app_service_plan\u0026#34; \u0026#34;plan\u0026#34; { name = \u0026#34;${var.prefix}-plan-${var.env}\u0026#34; location = azurerm_resource_group.rg.location resource_group_name = azurerm_resource_group.rg.name kind = \u0026#34;linux\u0026#34; reserved = true sku { tier = var.app_service_plan_sku_tier size = var.app_service_plan_sku_size } } resource \u0026#34;azurerm_app_service\u0026#34; \u0026#34;app\u0026#34; { name = \u0026#34;${var.prefix}-app-${var.env}\u0026#34; location = azurerm_resource_group.rg.location resource_group_name = azurerm_resource_group.rg.name app_service_plan_id = azurerm_app_service_plan.plan.id https_only = true site_config { always_on = \u0026#34;true\u0026#34; linux_fx_version = \u0026#34;DOCKER|${azurerm_container_registry.acr.login_server}/app:latest\u0026#34; } } resource \u0026#34;azurerm_container_registry\u0026#34; \u0026#34;acr\u0026#34; { name = \u0026#34;${var.prefix}${var.env}\u0026#34; location = azurerm_resource_group.rg.location resource_group_name = azurerm_resource_group.rg.name sku = \u0026#34;Standard\u0026#34; admin_enabled = true } resource \u0026#34;azurerm_container_registry_webhook\u0026#34; \u0026#34;webhook\u0026#34; { name = \u0026#34;${var.prefix}webhook${var.env}\u0026#34; location = azurerm_resource_group.rg.location resource_group_name = azurerm_resource_group.rg.name registry_name = azurerm_container_registry.acr.name service_uri = \u0026#34;https://${azurerm_app_service.app.site_credential[0].username}:${azurerm_app_service.app.site_credential[0].password}@${azurerm_app_service.app.name}.scm.azurewebsites.net/docker/hook\u0026#34; status = \u0026#34;enabled\u0026#34; scope = \u0026#34;app:*\u0026#34; actions = [\u0026#34;push\u0026#34;] custom_headers = { \u0026#34;Content-Type\u0026#34; = \u0026#34;application/json\u0026#34; } } As shown, it\u0026rsquo;s quite straightforward to implement. We just configure the App Service to run the Docker image app:latest and use the ACR as the source. On the ACR side we define a webhook that pushes the image to the App Service identified by the service_uri when a new image is pushed to an ACR repository that matches the scope app:*\nThe actions value defines the webhook trigger\nThe scope at which the webhook works. If not specified, the scope is for all events in the registry. It can be specified for a repository or a tag by using the format \u0026ldquo;repository:tag\u0026rdquo;, or \u0026ldquo;repository:*\u0026rdquo; for all tags under a repository.\nThe github action is also quite easy, for example:\nname: Build and deploy app on: push: branches: - master env: webAppName: app imageTag: ${{secrets.REGISTRY_URL}}/app:latest jobs: build-and-push: name: Build and publish runs-on: ubuntu-latest timeout-minutes: 10 steps: - name: Checkout uses: actions/checkout@v2 - name: Docker Login uses: azure/docker-login@v1 with: login-server: ${{secrets.REGISTRY_URL}} username: ${{secrets.REGISTRY_LOGIN}} password: ${{secrets.REGISTRY_PASSWORD}} - name: Build \u0026amp; push application run: | docker build -f ./Path/To/Your/Dockerfile . --tag ${{env.imageTag}} docker push ${{env.imageTag}} As you can see we just\nbuild the docker image tag it with something that will look like: {your_acr_name}.azurecr.io/app:latest push it to the ACR. Please note that you have to tag the Docker image with the ACR name, for the tag version you can come up with more sophisticated approaches like using a version or the sha1 of the latest git commit, but for the sake of simplicity I\u0026rsquo;ll go with latest tag version.\nThis way of deploying things makes it very simple to configure your github action since you just login to ACR and then do a docker push, everything else is taken care of by the webhook.\nSo far so good. You can build and deploy your code to an App Service very easily. If you also want to implement zero downtime deployments and you\u0026rsquo;re running on Linux things get just a bit more complicated because, as you\u0026rsquo;re probably aware, Azure App Service auto-swap functionality is not available in Linux based App Service.\nIf you need to know what a deployment slot is, you can find the documentation here.\nWhen using a deployment slot, the deployment process becomes the following:\nBuild and tag your docker image with the name of the ACR Login to ACR Push the image to ACR via a docker pull Somehow push the new image from ACR to the App Service deployment slot Swap the deployment slot The problem here is how to make sure the updated container image has been deployed to the staging slot before starting the slot swap.\nThis is tricky to get right since we don\u0026rsquo;t have control over ACR webhook execution so we have no way to ensure that swapping the slot will be executed after the slot has been updated.\nIf your app service targets Windows you can use the auto-swap, when on Linux instead you can slightly change your github action to push to ACR and also deploy the container to your staging slot. This step (App Services deploy) will wait till deployment is completed so we can safely run the swap action soon after.\nSee the updated github action below, also note we don\u0026rsquo;t need the webhook anymore on the ACR.\nname: Build and deploy app on: push: branches: - master env: webAppName: app imageTag: ${{secrets.REGISTRY_URL}}/app:latest jobs: build-and-push: name: Build and publish runs-on: ubuntu-latest timeout-minutes: 10 steps: - name: Checkout uses: actions/checkout@v2 - name: Docker Login uses: azure/docker-login@v1 with: login-server: ${{secrets.REGISTRY_URL}} username: ${{secrets.REGISTRY_LOGIN}} password: ${{secrets.REGISTRY_PASSWORD}} - name: Build \u0026amp; push application run: | docker build -f ./Path/To/Your/Dockerfile . --tag ${{env.imageTag}} docker push ${{env.imageTag}} - name: Azure Login uses: azure/login@v1 with: creds: ${{secrets.AZURE_CREDENTIALS}} - name: App Services deploy uses: azure/webapps-deploy@v2 with: app-name: ${{env.webAppName}} images: ${{env.imageTag}} - name: Sign out of Azure run: az logout I hope you enjoyed it and find it useful.\n","date":"8 December 2021","externalUrl":null,"permalink":"/posts/poor-man-linux-swap/","section":"Posts","summary":"Nowadays App Service deployment has became quite straight forward.","title":"Poor mans App services deployment slot auto-swap for Linux with GitHub Actions","type":"posts"},{"content":"","date":"6 April 2021","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"6 April 2021","externalUrl":null,"permalink":"/series/ef-core-integration-testing/","section":"Series","summary":"","title":"Ef Core Integration Testing","type":"series"},{"content":"","date":"6 April 2021","externalUrl":null,"permalink":"/tags/efcore/","section":"Tags","summary":"","title":"Efcore","type":"tags"},{"content":"In this mini series I will go through some challenges and the solutions I applied in implementing integration testing with EF Core and SQL Server running on Docker.\nEF Core has been out for a while now (according to Wikipedia it\u0026rsquo;s been released on 27/6/2016) and since day one it had support for an in memory database provider. The aim of the in memory database provider is to simplify testing and if you compare what it takes now to write test against an Entity Framework Core DbContext compared to the old Entity Framework one you can see how much easier it\u0026rsquo;s now compared to the experience we had back then.\nI won\u0026rsquo;t go into why the in memory database is not the best bet for integration testing, Jimmy Bogard already did that long time ago.\nblogged about my thoughts on in-memory databases for testing purposes https://t.co/OZcEQvdMYH tl;dr - avoid. it\u0026#39;s not worth the pain/side effects\n\u0026mdash; Jimmy Bogard 🍻 (@jbogard) March 18, 2020 Long story short: there are several limitations introduced by the in memory provider e.g. it doesn't support transactions, so you may end up having to specialize your test code to work around these limitations. If the in memory provider does satisfy your needs then this mini series is not for you. If, instead, you want to run your tests on the infrastructure that matches, as closely as possible, your production environment keep on reading.\nStarting from SQL Server 2017 it\u0026rsquo;s possible to run the database engine in a container with Docker, so we can take advantage of this in order to run our integration tests on top of a real SQL Server database.\nAt the end of this series we will have:\nA throw away SQL Server DB so every test run starts from a clean state Integration tests that run on top of a SQL Server running in a docker container Running integration tests via command line (useful in a CI environment) Testing EF Core migrations (bonus) Running (and debugging) integration tests from within the IDE. In order to be able to successfully run integration tests that requires a DB connection, we need (stating the obvious) to have a SQL Server database up \u0026amp; running and ready to accept connections. One of the way to achieve this with Docker is via docker-compose.\nWhen I started to implement this my focus was mostly on having the integration tests run during the CI builds so I started creating a docker-compose file for every integration project that needed SQL Server.\nI won\u0026rsquo;t go in the detail of what docker-compose is and what it does, you can find the documentation here\nI used docker compose to spin up SQL Server and a docker image created from my integration test project.\nAs you probably know, docker-compose has the depends-on feature to control the start-up order, but there\u0026rsquo;s no guarantee over the ready state of the dependency (i.e. your application may start quicker than the DB, and try to connect to the DB container that\u0026rsquo;s not yet ready to accept connections)\nIn order to wait until SQL Server is up and running we will take advantage of the great docker-compose-wait utility.\nThe Dockerfile for the integration test project looks like this:\nFROM mcr.microsoft.com/dotnet/sdk:5.0-alpine AS build WORKDIR /src # Get connection string argument from docker compose and set it as an environment variable ARG connection_string ENV ConnectionStrings__Database=${connection_string} # Standard docker build COPY [\u0026#34;tests/Integration.Tests/Integration.Tests.csproj\u0026#34;, \u0026#34;Integration.Tests/\u0026#34;] RUN dotnet restore \u0026#34;Integration.Tests/Integration.Tests.csproj\u0026#34; COPY . . WORKDIR \u0026#34;Integration.Tests\u0026#34; # Restore the dotnet-ef command RUN dotnet tool restore RUN dotnet build \u0026#34;Integration.Tests.csproj\u0026#34; -c Release -o /app/build # Install docker-compose-wait to make sure the db server is up \u0026amp; running before moving on ADD https://github.com/ufoscout/docker-compose-wait/releases/download/2.5.0/wait /wait RUN chmod +x /wait # Wait for sql server and then migrate the db and run tests CMD /wait \u0026amp;\u0026amp; dotnet ef database update --context MyDbContext \u0026amp;\u0026amp; dotnet test --no-build The docker-compose file is a very straightforward one that looks like this:\nversion: \u0026#34;3\u0026#34; services: sql-server-db: image: mcr.microsoft.com/mssql/server:2019-latest ports: - \u0026#34;1533:1433\u0026#34; environment: SA_PASSWORD: \u0026#34;Guess_me\u0026#34; ACCEPT_EULA: \u0026#34;Y\u0026#34; logging: driver: none integrationtests: image: integrationtests build: context: ../.. dockerfile: test/Integration.Tests/Dockerfile args: connection_string: Data Source=sql-server-db;User Id=sa;Password=Guess_me environment: WAIT_HOSTS: sql-server-db:1433 depends_on: - sql-server-db So every time the integration tests container starts, we wait until the SQL Server is ready to accept connections, run EF core migrations and run dotnet test. Starting from a clean state every time may be a bit slow but it adds, as a bonus the ability to test migrations.\nThe last piece I added to make it easier to run tests locally, is just a run-tests.cmd file to run docker-compose with --abort-on-container-exit . It looks like this\n@echo off REM Run Docker compose build and stops after the container exits docker-compose up --build --abort-on-container-exit REM Removes volumes, networks and images docker-compose down All of these files (Dockerfile, docker-compose and run-tests.cmd) lives in the integration tests directory.\nThis will gives us 4 of the 5 points outlined above, the only downside is that running and debugging from within Visual Studio doesn\u0026rsquo;t work yet and this will be the subject of the next post.\n","date":"6 April 2021","externalUrl":null,"permalink":"/posts/ef-integration-test-1/","section":"Posts","summary":"In this mini series I will go through some challenges and the solutions I applied in implementing integration testing with EF Core and SQL Server running on Docker.","title":"Integration testing with EF Core, part 1","type":"posts"},{"content":"In the first part of this mini series, I described how I implemented integration tests with EF core and SQL Server running on top of a Docker container. The approach explained in the first blog post works but it has one very big downside, the ability to debug integration tests.\nIn order to be able to do so, we need to replace Docker compose with a code based solution and, depending on your testing framework of choice, pick the appropriate hook to start the SQL Server container.\nTo run Docker in C# we can just start a new Process, configure all arguments, handle it\u0026rsquo;s lifecycle and so on or, since this looks like quite some work, pick a library that already wraps Docker and exposes it in C#. I knew Java had Testcontainers that\u0026rsquo;s marketed as:\nTestcontainers is a Java library that supports JUnit tests, providing lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.\nThis is exactly what we need, so I went to look for the dotnet counterpart and sure enough I found Dotnet.Testcontainers and decided to give it a try.\nDepending on the test framework you use, you have to find the proper hook to tell testcontainers to start your SQL Server Docker container just before test execution starts. I am using NUnit so the hook I picked is a class in the root namespace of the integration test project with the [SetupFixture] attribute applied to it.\nyou can also have the class outside of every namespace, for more info see here\nIf you are using xUnit.net, you can probably achieve the same via a collection fixture, if you\u0026rsquo;re on MSTest V2, you can probably use the [AssemblyInitialize] hook, you can find more info on StackOverflow\nDotnet.Testcontainers also comes with some built-in classes that wraps various services, one of these classes actually wraps a SQL Server Docker container and there are few more that covers the most common databases e.g.\nMySql Oracle Postgres and few more are available, to see the full list check here.\nSo after installing the nuget package DotNet.Testcontainers, I created a class like the following:\n[SetUpFixture] public class TestFixture { private MsSqlTestcontainer _container; [OneTimeSetUp] public async Task GlobalSetup() { var builder = new TestcontainersBuilder\u0026lt;MsSqlTestcontainer\u0026gt;() .WithName(\u0026#34;sql-server-db\u0026#34;) .WithDatabase(new MsSqlTestcontainerConfiguration(\u0026#34;mcr.microsoft.com/mssql/server:2019-latest\u0026#34;) { Password = \u0026#34;Guess_me\u0026#34;, Port = 1535 }); _container = builder.Build(); await _container.StartAsync(); // Access the connection string via _container.ConnectionString } [OneTimeTearDown] public async Task GlobalTeardown() { await _container.StopAsync(); } } With this class in place, I was able to start a container before running the first test method, the only problem I was left with was clean-up. What happens if something during test execution prevents the code to properly tear down the container? This error typically manifest itself with an exception at startup, there can be several reasons this may happen e.g. using a duplicate container name name or use a port that\u0026rsquo;s already in use on the host machine. To cope with this limitation I could wrap the startup in a try catch statement but I wasn’t very happy with the result, so I decided to come up with a tiny PR to allow override the StartAsync method in a class that derives from TestcontainersContainer, the class that wraps the actual container lifecycle, so we can derive from it and override the StartAsync method to implement our custom start-up logic.\nUnfortunately we cannot derive from the built-in MsSqlTestcontainer class since it\u0026rsquo;s sealed as you can see here\nThe class may look as easy as this:\npublic sealed class SqlServerTestcontainer : TestcontainerDatabase { internal SqlServerTestcontainer(ITestcontainersConfiguration configuration) : base(configuration) { } public override string ConnectionString =\u0026gt; $\u0026#34;Server=127.0.0.1,{Port};Database={Database};User Id={Username};Password={Password};\u0026#34;; public override async Task StartAsync(CancellationToken cancellationToken = default) { bool retry = true; while (true) { try { await base.StartAsync(cancellationToken); break; } catch (DockerApiException dockerApiException) when (retry \u0026amp;\u0026amp; dockerApiException.StatusCode == HttpStatusCode.Conflict) { retry = false; await NukeItAsync(\u0026#34;sql-server-db\u0026#34;); } } } private async Task NukeItAsync(string name) { var uri = RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? new Uri(\u0026#34;npipe://./pipe/docker_engine\u0026#34;) : new Uri(\u0026#34;unix:/var/run/docker.sock\u0026#34;); var dockerClient = new DockerClientConfiguration(uri).CreateClient(); // Stop the container if it\u0026#39;s running and remove it await dockerClient.Containers.RemoveContainerAsync(name, new ContainerRemoveParameters { Force = true }); } } As you can see in the StartAsync method, I\u0026rsquo;m catching the exception thrown if the container already exists, nuke it and retry starting the container again.\nThis could be handled better by the tescontainers library itself and there\u0026rsquo;s an actual issue tracking the improvement here, but for the time being I can live with this, especially considering that this will allow me to debug integration tests within my IDE of choice.\nStarting the SQL Server container takes time, ~30 sec on my dev machine, so this will be the cost you have to pay before starting the tests execution.\nThis is the end of this mini series, I hope you enjoyed it and find it useful.\n","date":"6 April 2021","externalUrl":null,"permalink":"/posts/ef-integration-test-2/","section":"Posts","summary":"In the first part of this mini series, I described how I implemented integration tests with EF core and SQL Server running on top of a Docker container.","title":"Integration testing with EF Core, part 2","type":"posts"},{"content":"","date":"6 April 2021","externalUrl":null,"permalink":"/tags/testing/","section":"Tags","summary":"","title":"Testing","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"}]